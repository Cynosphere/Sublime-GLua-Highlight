{
  "scope": "source.lua - keyword.control.lua - constant.language.lua - string",
  "completions": [
    {
      "trigger": "and",
      "contents": "and",
      "kind": "keyword"
    },
    {
      "trigger": "break",
      "contents": "break",
      "kind": "keyword"
    },
    {
      "trigger": "do",
      "contents": "do",
      "kind": "keyword"
    },
    {
      "trigger": "elseif",
      "contents": "elseif",
      "kind": "keyword"
    },
    {
      "trigger": "else",
      "contents": "else",
      "kind": "keyword"
    },
    {
      "trigger": "end",
      "contents": "end",
      "kind": "keyword"
    },
    {
      "trigger": "false",
      "contents": "false",
      "kind": "keyword"
    },
    {
      "trigger": "for",
      "contents": "for",
      "kind": "keyword"
    },
    {
      "trigger": "function",
      "contents": "function",
      "kind": "keyword"
    },
    {
      "trigger": "goto",
      "contents": "goto",
      "kind": "keyword"
    },
    {
      "trigger": "if",
      "contents": "if",
      "kind": "keyword"
    },
    {
      "trigger": "in",
      "contents": "in",
      "kind": "keyword"
    },
    {
      "trigger": "local",
      "contents": "local",
      "kind": "keyword"
    },
    {
      "trigger": "nil",
      "contents": "nil",
      "kind": "keyword"
    },
    {
      "trigger": "not",
      "contents": "not",
      "kind": "keyword"
    },
    {
      "trigger": "or",
      "contents": "or",
      "kind": "keyword"
    },
    {
      "trigger": "repeat",
      "contents": "repeat",
      "kind": "keyword"
    },
    {
      "trigger": "return",
      "contents": "return",
      "kind": "keyword"
    },
    {
      "trigger": "then",
      "contents": "then",
      "kind": "keyword"
    },
    {
      "trigger": "true",
      "contents": "true",
      "kind": "keyword"
    },
    {
      "trigger": "until",
      "contents": "until",
      "kind": "keyword"
    },
    {
      "trigger": "while",
      "contents": "while",
      "kind": "keyword"
    },
    {
      "trigger": "derma.Controls",
      "contents": "derma.Controls",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "derma.SkinList",
      "contents": "derma.SkinList",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "jit.arch",
      "contents": "jit.arch",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "jit.os",
      "contents": "jit.os",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "jit.version",
      "contents": "jit.version",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "jit.version_num",
      "contents": "jit.version_num",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "net.Receivers",
      "contents": "net.Receivers",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "utf8.charpattern",
      "contents": "utf8.charpattern",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "_VERSION",
      "contents": "_VERSION",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "CLIENT",
      "contents": "CLIENT",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "CLIENT_DLL",
      "contents": "CLIENT_DLL",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "SERVER",
      "contents": "SERVER",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "GAME_DLL",
      "contents": "GAME_DLL",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "MENU_DLL",
      "contents": "MENU_DLL",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "GAMEMODE_NAME",
      "contents": "GAMEMODE_NAME",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "NULL",
      "contents": "NULL",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "VERSION",
      "contents": "VERSION",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "VERSIONSTR",
      "contents": "VERSIONSTR",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "BRANCH",
      "contents": "BRANCH",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "GAMEMODE",
      "contents": "GAMEMODE",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "GM",
      "contents": "GM",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "ENT",
      "contents": "ENT",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "SWEP",
      "contents": "SWEP",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "EFFECT",
      "contents": "EFFECT",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "_G",
      "contents": "_G",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "_MODULES",
      "contents": "_MODULES",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ]
    },
    {
      "trigger": "vector_origin",
      "contents": "vector_origin",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "vector_origin = Vector(0, 0, 0)"
    },
    {
      "trigger": "vector_up",
      "contents": "vector_up",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "vector_up = Vector(0, 0, 1)"
    },
    {
      "trigger": "angle_zero",
      "contents": "angle_zero",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "angle_zero = Angle(0, 0, 0)"
    },
    {
      "trigger": "color_white",
      "contents": "color_white",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "color_white = Color(255, 255, 255, 255)"
    },
    {
      "trigger": "color_black",
      "contents": "color_black",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "color_black = Color(0, 0, 0, 255)"
    },
    {
      "trigger": "color_transparent",
      "contents": "color_transparent",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "color_transparent = Color(255, 255, 255, 0)"
    },
    {
      "trigger": "math.huge",
      "contents": "math.huge",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "math.huge = ∞"
    },
    {
      "trigger": "math.pi",
      "contents": "math.pi",
      "kind": [
        "namespace",
        "G",
        "Global Variable"
      ],
      "details": "math.pi = π"
    },
    {
      "trigger": "AccessorFunc",
      "contents": "AccessorFunc(${1:table tab}, ${2:any key}, ${3:string name}, ${4:number force = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AccessorFunc(tab, key, name, force)"
    },
    {
      "trigger": "Add_NPC_Class",
      "contents": "Add_NPC_Class(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Add_NPC_Class(name)"
    },
    {
      "trigger": "AddBackgroundImage",
      "contents": "AddBackgroundImage(${1:string path})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddBackgroundImage(path)"
    },
    {
      "trigger": "AddConsoleCommand",
      "contents": "AddConsoleCommand(${1:string name}, ${2:string helpText}, ${3:number flags})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddConsoleCommand(name, helpText, flags)"
    },
    {
      "trigger": "AddCSLuaFile",
      "contents": "AddCSLuaFile(${1:string file = current file})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddCSLuaFile(file)"
    },
    {
      "trigger": "AddonMaterial",
      "contents": "AddonMaterial(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddonMaterial(name)"
    },
    {
      "trigger": "AddOriginToPVS",
      "contents": "AddOriginToPVS(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddOriginToPVS(position)"
    },
    {
      "trigger": "AddPropsOfParent",
      "contents": "AddPropsOfParent(${1:Panel pnlContent}, ${2:Panel node}, ${3:number parentid}, ${4:table customProps})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddPropsOfParent(pnlContent, node, parentid, customProps)"
    },
    {
      "trigger": "AddWorldTip",
      "contents": "AddWorldTip(${1:number entindex = nil}, ${2:string text}, ${3:number dieTime = SysTime() + 0.05}, ${4:Vector pos = ent:GetPos()}, ${5:Entity ent = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AddWorldTip(entindex, text, dieTime, pos, ent)"
    },
    {
      "trigger": "Angle",
      "contents": "Angle(${1:number pitch = 0}, ${2:number yaw = 0}, ${3:number roll = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Angle(pitch, yaw, roll)"
    },
    {
      "trigger": "AngleRand",
      "contents": "AngleRand(${1:number min = -90 for pitch, -180 for yaw and roll}, ${2:number max = 90 for pitch, 180 for yaw and roll})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "AngleRand(min, max)"
    },
    {
      "trigger": "assert",
      "contents": "assert(${1:any expression}, ${2:string errorMessage = assertion failed!}, ${3:vararg returns = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "assert(expression, errorMessage, returns)"
    },
    {
      "trigger": "BroadcastLua",
      "contents": "BroadcastLua(${1:string code})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "BroadcastLua(code)"
    },
    {
      "trigger": "BuildNetworkedVarsTable",
      "contents": "BuildNetworkedVarsTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "BuildNetworkedVarsTable()"
    },
    {
      "trigger": "CanAddServerToFavorites",
      "contents": "CanAddServerToFavorites()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CanAddServerToFavorites()"
    },
    {
      "trigger": "CancelLoading",
      "contents": "CancelLoading()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CancelLoading()"
    },
    {
      "trigger": "ChangeBackground",
      "contents": "ChangeBackground(${1:string currentgm})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ChangeBackground(currentgm)"
    },
    {
      "trigger": "ChangeTooltip",
      "contents": "ChangeTooltip(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ChangeTooltip(panel)"
    },
    {
      "trigger": "ClearBackgroundImages",
      "contents": "ClearBackgroundImages()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClearBackgroundImages()"
    },
    {
      "trigger": "ClearLuaErrorGroup",
      "contents": "ClearLuaErrorGroup(${1:string group_id})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClearLuaErrorGroup(group_id)"
    },
    {
      "trigger": "ClearProblem",
      "contents": "ClearProblem(${1:string id})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClearProblem(id)"
    },
    {
      "trigger": "ClientsideModel",
      "contents": "ClientsideModel(${1:string model}, ${2:number renderGroup = RENDERGROUP_OTHER})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClientsideModel(model, renderGroup)"
    },
    {
      "trigger": "ClientsideRagdoll",
      "contents": "ClientsideRagdoll(${1:string model}, ${2:number renderGroup = RENDERGROUP_OPAQUE})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClientsideRagdoll(model, renderGroup)"
    },
    {
      "trigger": "ClientsideScene",
      "contents": "ClientsideScene(${1:string name}, ${2:Entity targetEnt})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ClientsideScene(name, targetEnt)"
    },
    {
      "trigger": "CloseDermaMenus",
      "contents": "CloseDermaMenus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CloseDermaMenus()"
    },
    {
      "trigger": "collectgarbage",
      "contents": "collectgarbage(${1:string action = collect}, ${2:number arg})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "collectgarbage(action, arg)"
    },
    {
      "trigger": "Color",
      "contents": "Color(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a = 255})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Color(r, g, b, a)"
    },
    {
      "trigger": "ColorAlpha",
      "contents": "ColorAlpha(${1:table color}, ${2:number alpha})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ColorAlpha(color, alpha)"
    },
    {
      "trigger": "ColorRand",
      "contents": "ColorRand(${1:boolean a = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ColorRand(a)"
    },
    {
      "trigger": "ColorToHSL",
      "contents": "ColorToHSL(${1:table color})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ColorToHSL(color)"
    },
    {
      "trigger": "ColorToHSV",
      "contents": "ColorToHSV(${1:table color})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ColorToHSV(color)"
    },
    {
      "trigger": "CompileFile",
      "contents": "CompileFile(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CompileFile(path)"
    },
    {
      "trigger": "CompileString",
      "contents": "CompileString(${1:string code}, ${2:string identifier}, ${3:boolean HandleError = true})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CompileString(code, identifier, HandleError)"
    },
    {
      "trigger": "ConsoleAutoComplete",
      "contents": "ConsoleAutoComplete(${1:string text})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ConsoleAutoComplete(text)"
    },
    {
      "trigger": "ConVarExists",
      "contents": "ConVarExists(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ConVarExists(name)"
    },
    {
      "trigger": "CreateClientConVar",
      "contents": "CreateClientConVar(${1:string name}, ${2:string default}, ${3:boolean shouldsave = true}, ${4:boolean userinfo = false}, ${5:string helptext}, ${6:number min = nil}, ${7:number max = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateClientConVar(name, default, shouldsave, userinfo, helptext, min, max)"
    },
    {
      "trigger": "CreateContextMenu",
      "contents": "CreateContextMenu()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateContextMenu()"
    },
    {
      "trigger": "CreateConVar",
      "contents": "CreateConVar(${1:string name}, ${2:string value}, ${3:number flags = FCVAR_NONE}, ${4:string helptext}, ${5:number min = nil}, ${6:number max = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateConVar(name, value, flags, helptext, min, max)"
    },
    {
      "trigger": "CreateMaterial",
      "contents": "CreateMaterial(${1:string name}, ${2:string shaderName}, ${3:table materialData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateMaterial(name, shaderName, materialData)"
    },
    {
      "trigger": "CreateNewAddonPreset",
      "contents": "CreateNewAddonPreset(${1:string data})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateNewAddonPreset(data)"
    },
    {
      "trigger": "CreateParticleSystem",
      "contents": "CreateParticleSystem(${1:Entity ent}, ${2:string effect}, ${3:number partAttachment}, ${4:number entAttachment = 0}, ${5:Vector offset = Vector( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateParticleSystem(ent, effect, partAttachment, entAttachment, offset)"
    },
    {
      "trigger": "CreateParticleSystemNoEntity",
      "contents": "CreateParticleSystemNoEntity(${1:string effect}, ${2:Vector pos}, ${3:Angle ang = Angle( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateParticleSystemNoEntity(effect, pos, ang)"
    },
    {
      "trigger": "CreatePhysCollideBox",
      "contents": "CreatePhysCollideBox(${1:Vector mins}, ${2:Vector maxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreatePhysCollideBox(mins, maxs)"
    },
    {
      "trigger": "CreatePhysCollidesFromModel",
      "contents": "CreatePhysCollidesFromModel(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreatePhysCollidesFromModel(modelName)"
    },
    {
      "trigger": "CreateSound",
      "contents": "CreateSound(${1:Entity targetEnt}, ${2:string soundName}, ${3:CRecipientFilter filter = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateSound(targetEnt, soundName, filter)"
    },
    {
      "trigger": "CreateSprite",
      "contents": "CreateSprite(${1:IMaterial material})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CreateSprite(material)"
    },
    {
      "trigger": "CurTime",
      "contents": "CurTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "CurTime()"
    },
    {
      "trigger": "DamageInfo",
      "contents": "DamageInfo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DamageInfo()"
    },
    {
      "trigger": "DebugInfo",
      "contents": "DebugInfo(${1:number slot}, ${2:string info})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DebugInfo(slot, info)"
    },
    {
      "trigger": "DEFINE_BASECLASS",
      "contents": "DEFINE_BASECLASS(${1:string value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DEFINE_BASECLASS(value)"
    },
    {
      "trigger": "DeleteAddonPreset",
      "contents": "DeleteAddonPreset(${1:string name})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DeleteAddonPreset(name)"
    },
    {
      "trigger": "DeriveGamemode",
      "contents": "DeriveGamemode(${1:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DeriveGamemode(base)"
    },
    {
      "trigger": "Derma_Anim",
      "contents": "Derma_Anim(${1:string name}, ${2:Panel panel}, ${3:function func})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_Anim(name, panel, func)"
    },
    {
      "trigger": "Derma_DrawBackgroundBlur",
      "contents": "Derma_DrawBackgroundBlur(${1:Panel panel}, ${2:number startTime})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_DrawBackgroundBlur(panel, startTime)"
    },
    {
      "trigger": "Derma_Hook",
      "contents": "Derma_Hook(${1:Panel panel}, ${2:string functionName}, ${3:string hookName}, ${4:string typeName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_Hook(panel, functionName, hookName, typeName)"
    },
    {
      "trigger": "Derma_Install_Convar_Functions",
      "contents": "Derma_Install_Convar_Functions(${1:Panel target})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_Install_Convar_Functions(target)"
    },
    {
      "trigger": "Derma_Message",
      "contents": "Derma_Message(${1:string Text}, ${2:string Title}, ${3:string Button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_Message(Text, Title, Button)"
    },
    {
      "trigger": "Derma_Query",
      "contents": "Derma_Query(${1:string text = Message Text (Second Parameter)}, ${2:string title = Message Title (First Parameter)}, ${3:string btn1text}, ${4:function btn1func = nil}, ${5:string btn2text = nil}, ${6:function btn2func = nil}, ${7:string btn3text = nil}, ${8:function btn3func = nil}, ${9:string btn4text = nil}, ${10:function btn4func = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_Query(text, title, btn1text, btn1func, btn2text, btn2func, btn3text, btn3func, btn4text, btn4func)"
    },
    {
      "trigger": "Derma_StringRequest",
      "contents": "Derma_StringRequest(${1:string title}, ${2:string subtitle}, ${3:string default}, ${4:function confirm}, ${5:function cancel = nil}, ${6:string confirmText = OK}, ${7:string cancelText = Cancel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Derma_StringRequest(title, subtitle, default, confirm, cancel, confirmText, cancelText)"
    },
    {
      "trigger": "DermaMenu",
      "contents": "DermaMenu(${1:boolean keepOpen = false}, ${2:Panel parent = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DermaMenu(keepOpen, parent)"
    },
    {
      "trigger": "DisableClipping",
      "contents": "DisableClipping(${1:boolean disable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DisableClipping(disable)"
    },
    {
      "trigger": "DOF_Kill",
      "contents": "DOF_Kill()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DOF_Kill()"
    },
    {
      "trigger": "DOF_Start",
      "contents": "DOF_Start()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DOF_Start()"
    },
    {
      "trigger": "DOFModeHack",
      "contents": "DOFModeHack(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DOFModeHack(enable)"
    },
    {
      "trigger": "DoStopServers",
      "contents": "DoStopServers(${1:string category})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DoStopServers(category)"
    },
    {
      "trigger": "DrawBackground",
      "contents": "DrawBackground()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawBackground()"
    },
    {
      "trigger": "DrawBloom",
      "contents": "DrawBloom(${1:number Darken}, ${2:number Multiply}, ${3:number SizeX}, ${4:number SizeY}, ${5:number Passes}, ${6:number ColorMultiply}, ${7:number Red}, ${8:number Green}, ${9:number Blue})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawBloom(Darken, Multiply, SizeX, SizeY, Passes, ColorMultiply, Red, Green, Blue)"
    },
    {
      "trigger": "DrawBokehDOF",
      "contents": "DrawBokehDOF(${1:number intensity}, ${2:number distance}, ${3:number focus})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawBokehDOF(intensity, distance, focus)"
    },
    {
      "trigger": "DrawColorModify",
      "contents": "DrawColorModify(${1:table modifyParameters})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawColorModify(modifyParameters)"
    },
    {
      "trigger": "DrawMaterialOverlay",
      "contents": "DrawMaterialOverlay(${1:string Material}, ${2:number RefractAmount})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawMaterialOverlay(Material, RefractAmount)"
    },
    {
      "trigger": "DrawMotionBlur",
      "contents": "DrawMotionBlur(${1:number AddAlpha}, ${2:number DrawAlpha}, ${3:number Delay})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawMotionBlur(AddAlpha, DrawAlpha, Delay)"
    },
    {
      "trigger": "DrawSharpen",
      "contents": "DrawSharpen(${1:number Contrast}, ${2:number Distance})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawSharpen(Contrast, Distance)"
    },
    {
      "trigger": "DrawSobel",
      "contents": "DrawSobel(${1:number Threshold})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawSobel(Threshold)"
    },
    {
      "trigger": "DrawSunbeams",
      "contents": "DrawSunbeams(${1:number darken}, ${2:number multiplier}, ${3:number sunSize}, ${4:number sunX}, ${5:number sunY})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawSunbeams(darken, multiplier, sunSize, sunX, sunY)"
    },
    {
      "trigger": "DrawTexturize",
      "contents": "DrawTexturize(${1:number Scale}, ${2:number BaseTexture})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawTexturize(Scale, BaseTexture)"
    },
    {
      "trigger": "DrawToyTown",
      "contents": "DrawToyTown(${1:number Passes}, ${2:number Height})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DrawToyTown(Passes, Height)"
    },
    {
      "trigger": "DropEntityIfHeld",
      "contents": "DropEntityIfHeld(${1:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DropEntityIfHeld(ent)"
    },
    {
      "trigger": "DTVar_ReceiveProxyGL",
      "contents": "DTVar_ReceiveProxyGL(${1:Entity entity}, ${2:string Type}, ${3:number index}, ${4:any new value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DTVar_ReceiveProxyGL(entity, Type, index, new value)"
    },
    {
      "trigger": "DynamicLight",
      "contents": "DynamicLight(${1:number index}, ${2:boolean elight = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DynamicLight(index, elight)"
    },
    {
      "trigger": "DynamicMaterial",
      "contents": "DynamicMaterial(${1:string materialPath}, ${2:string flags = nil})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "DynamicMaterial(materialPath, flags)"
    },
    {
      "trigger": "EffectData",
      "contents": "EffectData()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EffectData()"
    },
    {
      "trigger": "Either",
      "contents": "Either(${1:any condition}, ${2:any truevar}, ${3:any falsevar})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Either(condition, truevar, falsevar)"
    },
    {
      "trigger": "EmitSentence",
      "contents": "EmitSentence(${1:string soundName}, ${2:Vector position}, ${3:number entity}, ${4:number channel = CHAN_AUTO}, ${5:number volume = 1}, ${6:number soundLevel = 75}, ${7:number soundFlags = 0}, ${8:number pitch = 100})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EmitSentence(soundName, position, entity, channel, volume, soundLevel, soundFlags, pitch)"
    },
    {
      "trigger": "EmitSound",
      "contents": "EmitSound(${1:string soundName}, ${2:Vector position}, ${3:number entity = 0}, ${4:number channel = CHAN_AUTO}, ${5:number volume = 1}, ${6:number soundLevel = 75}, ${7:number soundFlags = 0}, ${8:number pitch = 100}, ${9:number dsp = 0}, ${10:CRecipientFilter filter = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EmitSound(soundName, position, entity, channel, volume, soundLevel, soundFlags, pitch, dsp, filter)"
    },
    {
      "trigger": "EndTooltip",
      "contents": "EndTooltip(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EndTooltip(panel)"
    },
    {
      "trigger": "Entity",
      "contents": "Entity(${1:number entityIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Entity(entityIndex)"
    },
    {
      "trigger": "error",
      "contents": "error(${1:string message}, ${2:number errorLevel = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "error(message, errorLevel)"
    },
    {
      "trigger": "Error",
      "contents": "Error(${1:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Error(arguments)"
    },
    {
      "trigger": "ErrorNoHalt",
      "contents": "ErrorNoHalt(${1:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ErrorNoHalt(arguments)"
    },
    {
      "trigger": "ErrorNoHaltWithStack",
      "contents": "ErrorNoHaltWithStack(${1:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ErrorNoHaltWithStack(arguments)"
    },
    {
      "trigger": "EyeAngles",
      "contents": "EyeAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EyeAngles()"
    },
    {
      "trigger": "EyePos",
      "contents": "EyePos()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EyePos()"
    },
    {
      "trigger": "EyeVector",
      "contents": "EyeVector()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "EyeVector()"
    },
    {
      "trigger": "FindMetaTable",
      "contents": "FindMetaTable(${1:string metaName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FindMetaTable(metaName)"
    },
    {
      "trigger": "FindTooltip",
      "contents": "FindTooltip(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FindTooltip(panel)"
    },
    {
      "trigger": "FireAddonConflicts",
      "contents": "FireAddonConflicts()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FireAddonConflicts()"
    },
    {
      "trigger": "FireProblem",
      "contents": "FireProblem(${1:table prob})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FireProblem(prob)"
    },
    {
      "trigger": "FireProblemFromEngine",
      "contents": "FireProblemFromEngine(${1:string id}, ${2:number severity}, ${3:string params})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FireProblemFromEngine(id, severity, params)"
    },
    {
      "trigger": "Format",
      "contents": "Format(${1:string format}, ${2:vararg formatParameters})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Format(format, formatParameters)"
    },
    {
      "trigger": "FrameNumber",
      "contents": "FrameNumber()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FrameNumber()"
    },
    {
      "trigger": "FrameTime",
      "contents": "FrameTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "FrameTime()"
    },
    {
      "trigger": "GameDetails",
      "contents": "GameDetails(${1:string servername}, ${2:string serverurl}, ${3:string mapname}, ${4:number maxplayers}, ${5:string steamid}, ${6:string gamemode})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GameDetails(servername, serverurl, mapname, maxplayers, steamid, gamemode)"
    },
    {
      "trigger": "gcinfo",
      "contents": "gcinfo()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "gcinfo()"
    },
    {
      "trigger": "GenerateSpawnlistFromPath",
      "contents": "GenerateSpawnlistFromPath(${1:string folder}, ${2:string path}, ${3:string name}, ${4:string icon = icon16/page.png}, ${5:number appid})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GenerateSpawnlistFromPath(folder, path, name, icon, appid)"
    },
    {
      "trigger": "GetAddonStatus",
      "contents": "GetAddonStatus()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetAddonStatus()"
    },
    {
      "trigger": "GetAPIManifest",
      "contents": "GetAPIManifest(${1:function callback})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetAPIManifest(callback)"
    },
    {
      "trigger": "GetConVar",
      "contents": "GetConVar(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetConVar(name)"
    },
    {
      "trigger": "GetConVar_Internal",
      "contents": "GetConVar_Internal(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetConVar_Internal(name)"
    },
    {
      "trigger": "GetConVarNumber",
      "contents": "GetConVarNumber(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetConVarNumber(name)"
    },
    {
      "trigger": "GetConVarString",
      "contents": "GetConVarString(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetConVarString(name)"
    },
    {
      "trigger": "GetDefaultLoadingHTML",
      "contents": "GetDefaultLoadingHTML()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetDefaultLoadingHTML()"
    },
    {
      "trigger": "GetDemoFileDetails",
      "contents": "GetDemoFileDetails(${1:string filename})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetDemoFileDetails(filename)"
    },
    {
      "trigger": "GetDownloadables",
      "contents": "GetDownloadables()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetDownloadables()"
    },
    {
      "trigger": "getfenv",
      "contents": "getfenv(${1:function location = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "getfenv(location)"
    },
    {
      "trigger": "GetGlobal2Angle",
      "contents": "GetGlobal2Angle(${1:string index}, ${2:Angle default = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Angle(index, default)"
    },
    {
      "trigger": "GetGlobal2Bool",
      "contents": "GetGlobal2Bool(${1:string index}, ${2:boolean default = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Bool(index, default)"
    },
    {
      "trigger": "GetGlobal2Entity",
      "contents": "GetGlobal2Entity(${1:string index}, ${2:Entity default = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Entity(index, default)"
    },
    {
      "trigger": "GetGlobal2Float",
      "contents": "GetGlobal2Float(${1:string index}, ${2:number default = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Float(index, default)"
    },
    {
      "trigger": "GetGlobal2Int",
      "contents": "GetGlobal2Int(${1:string index}, ${2:number default = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Int(index, default)"
    },
    {
      "trigger": "GetGlobal2String",
      "contents": "GetGlobal2String(${1:string index}, ${2:string default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2String(index, default)"
    },
    {
      "trigger": "GetGlobal2Var",
      "contents": "GetGlobal2Var(${1:string index}, ${2:any default = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Var(index, default)"
    },
    {
      "trigger": "GetGlobal2Vector",
      "contents": "GetGlobal2Vector(${1:string Index}, ${2:Vector Default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobal2Vector(Index, Default)"
    },
    {
      "trigger": "GetGlobalAngle",
      "contents": "GetGlobalAngle(${1:string index}, ${2:Angle default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalAngle(index, default)"
    },
    {
      "trigger": "GetGlobalBool",
      "contents": "GetGlobalBool(${1:string index}, ${2:boolean default = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalBool(index, default)"
    },
    {
      "trigger": "GetGlobalEntity",
      "contents": "GetGlobalEntity(${1:string index}, ${2:Entity default = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalEntity(index, default)"
    },
    {
      "trigger": "GetGlobalFloat",
      "contents": "GetGlobalFloat(${1:string index}, ${2:number default = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalFloat(index, default)"
    },
    {
      "trigger": "GetGlobalInt",
      "contents": "GetGlobalInt(${1:string index}, ${2:number default = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalInt(index, default)"
    },
    {
      "trigger": "GetGlobalString",
      "contents": "GetGlobalString(${1:string index}, ${2:string default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalString(index, default)"
    },
    {
      "trigger": "GetGlobalVar",
      "contents": "GetGlobalVar(${1:string index}, ${2:any default = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalVar(index, default)"
    },
    {
      "trigger": "GetGlobalVector",
      "contents": "GetGlobalVector(${1:string Index}, ${2:Vector Default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetGlobalVector(Index, Default)"
    },
    {
      "trigger": "GetHostName",
      "contents": "GetHostName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetHostName()"
    },
    {
      "trigger": "GetHUDPanel",
      "contents": "GetHUDPanel()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetHUDPanel()"
    },
    {
      "trigger": "GetLoadPanel",
      "contents": "GetLoadPanel()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetLoadPanel()"
    },
    {
      "trigger": "GetLoadStatus",
      "contents": "GetLoadStatus()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetLoadStatus()"
    },
    {
      "trigger": "GetMapList",
      "contents": "GetMapList()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetMapList()"
    },
    {
      "trigger": "getmetatable",
      "contents": "getmetatable(${1:any object})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "getmetatable(object)"
    },
    {
      "trigger": "GetOverlayPanel",
      "contents": "GetOverlayPanel()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetOverlayPanel()"
    },
    {
      "trigger": "GetPlayerList",
      "contents": "GetPlayerList(${1:string serverip})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetPlayerList(serverip)"
    },
    {
      "trigger": "GetPredictionPlayer",
      "contents": "GetPredictionPlayer()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetPredictionPlayer()"
    },
    {
      "trigger": "GetRenderTarget",
      "contents": "GetRenderTarget(${1:string name}, ${2:number width}, ${3:number height})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetRenderTarget(name, width, height)"
    },
    {
      "trigger": "GetRenderTargetEx",
      "contents": "GetRenderTargetEx(${1:string name}, ${2:number width}, ${3:number height}, ${4:number sizeMode}, ${5:number depthMode}, ${6:number textureFlags}, ${7:number rtFlags}, ${8:number imageFormat})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetRenderTargetEx(name, width, height, sizeMode, depthMode, textureFlags, rtFlags, imageFormat)"
    },
    {
      "trigger": "GetSaveFileDetails",
      "contents": "GetSaveFileDetails(${1:string filename})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetSaveFileDetails(filename)"
    },
    {
      "trigger": "GetServers",
      "contents": "GetServers(${1:string category}, ${2:number id})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetServers(category, id)"
    },
    {
      "trigger": "GetTimeoutInfo",
      "contents": "GetTimeoutInfo()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetTimeoutInfo()"
    },
    {
      "trigger": "GetViewEntity",
      "contents": "GetViewEntity()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GetViewEntity()"
    },
    {
      "trigger": "GMOD_OpenURLNoOverlay",
      "contents": "GMOD_OpenURLNoOverlay(${1:string url})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "GMOD_OpenURLNoOverlay(url)"
    },
    {
      "trigger": "HSLToColor",
      "contents": "HSLToColor(${1:number hue}, ${2:number saturation}, ${3:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "HSLToColor(hue, saturation, value)"
    },
    {
      "trigger": "HSVToColor",
      "contents": "HSVToColor(${1:number hue}, ${2:number saturation}, ${3:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "HSVToColor(hue, saturation, value)"
    },
    {
      "trigger": "HTTP",
      "contents": "HTTP(${1:table parameters})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "HTTP(parameters)"
    },
    {
      "trigger": "include",
      "contents": "include(${1:string fileName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "include(fileName)"
    },
    {
      "trigger": "IncludeCS",
      "contents": "IncludeCS(${1:string filename})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IncludeCS(filename)"
    },
    {
      "trigger": "ipairs",
      "contents": "ipairs(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ipairs(tab)"
    },
    {
      "trigger": "isangle",
      "contents": "isangle(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isangle(variable)"
    },
    {
      "trigger": "isbool",
      "contents": "isbool(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isbool(variable)"
    },
    {
      "trigger": "IsColor",
      "contents": "IsColor(${1:any Object})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsColor(Object)"
    },
    {
      "trigger": "IsConCommandBlocked",
      "contents": "IsConCommandBlocked(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsConCommandBlocked(name)"
    },
    {
      "trigger": "IsEnemyEntityName",
      "contents": "IsEnemyEntityName(${1:string className})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsEnemyEntityName(className)"
    },
    {
      "trigger": "isentity",
      "contents": "isentity(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isentity(variable)"
    },
    {
      "trigger": "IsFirstTimePredicted",
      "contents": "IsFirstTimePredicted()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsFirstTimePredicted()"
    },
    {
      "trigger": "IsFriendEntityName",
      "contents": "IsFriendEntityName(${1:string className})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsFriendEntityName(className)"
    },
    {
      "trigger": "isfunction",
      "contents": "isfunction(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isfunction(variable)"
    },
    {
      "trigger": "IsInGame",
      "contents": "IsInGame()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsInGame()"
    },
    {
      "trigger": "IsInLoading",
      "contents": "IsInLoading()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsInLoading()"
    },
    {
      "trigger": "ismatrix",
      "contents": "ismatrix(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ismatrix(variable)"
    },
    {
      "trigger": "IsMounted",
      "contents": "IsMounted(${1:string game})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsMounted(game)"
    },
    {
      "trigger": "isnumber",
      "contents": "isnumber(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isnumber(variable)"
    },
    {
      "trigger": "ispanel",
      "contents": "ispanel(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ispanel(variable)"
    },
    {
      "trigger": "IsServerBlacklisted",
      "contents": "IsServerBlacklisted(${1:string address}, ${2:string hostname}, ${3:string description}, ${4:string gm}, ${5:string map})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsServerBlacklisted(address, hostname, description, gm, map)"
    },
    {
      "trigger": "isstring",
      "contents": "isstring(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isstring(variable)"
    },
    {
      "trigger": "istable",
      "contents": "istable(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "istable(variable)"
    },
    {
      "trigger": "IsTableOfEntitiesValid",
      "contents": "IsTableOfEntitiesValid(${1:table table})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsTableOfEntitiesValid(table)"
    },
    {
      "trigger": "IsUselessModel",
      "contents": "IsUselessModel(${1:string modelName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsUselessModel(modelName)"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid(${1:any toBeValidated})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "IsValid(toBeValidated)"
    },
    {
      "trigger": "isvector",
      "contents": "isvector(${1:any variable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "isvector(variable)"
    },
    {
      "trigger": "JoinServer",
      "contents": "JoinServer(${1:string IP})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "JoinServer(IP)"
    },
    {
      "trigger": "JS_Language",
      "contents": "JS_Language(${1:Panel htmlPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "JS_Language(htmlPanel)"
    },
    {
      "trigger": "JS_Utility",
      "contents": "JS_Utility(${1:Panel htmlPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "JS_Utility(htmlPanel)"
    },
    {
      "trigger": "JS_Workshop",
      "contents": "JS_Workshop(${1:Panel htmlPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "JS_Workshop(htmlPanel)"
    },
    {
      "trigger": "Label",
      "contents": "Label(${1:string text}, ${2:Panel parent = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Label(text, parent)"
    },
    {
      "trigger": "LanguageChanged",
      "contents": "LanguageChanged(${1:string lang})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LanguageChanged(lang)"
    },
    {
      "trigger": "Lerp",
      "contents": "Lerp(${1:number t}, ${2:number from}, ${3:number to})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Lerp(t, from, to)"
    },
    {
      "trigger": "LerpAngle",
      "contents": "LerpAngle(${1:number ratio}, ${2:Angle angleStart}, ${3:Angle angleEnd})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LerpAngle(ratio, angleStart, angleEnd)"
    },
    {
      "trigger": "LerpVector",
      "contents": "LerpVector(${1:number fraction}, ${2:Vector from}, ${3:Vector to})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LerpVector(fraction, from, to)"
    },
    {
      "trigger": "ListAddonPresets",
      "contents": "ListAddonPresets()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ListAddonPresets()"
    },
    {
      "trigger": "LoadAddonPresets",
      "contents": "LoadAddonPresets()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LoadAddonPresets()"
    },
    {
      "trigger": "LoadLastMap",
      "contents": "LoadLastMap()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LoadLastMap()"
    },
    {
      "trigger": "LoadNewsList",
      "contents": "LoadNewsList()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LoadNewsList()"
    },
    {
      "trigger": "LoadPresets",
      "contents": "LoadPresets()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LoadPresets()"
    },
    {
      "trigger": "Localize",
      "contents": "Localize(${1:string localisationToken}, ${2:string default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Localize(localisationToken, default)"
    },
    {
      "trigger": "LocalPlayer",
      "contents": "LocalPlayer()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LocalPlayer()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector localPos}, ${2:Angle localAng}, ${3:Vector originPos}, ${4:Angle originAngle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "LocalToWorld(localPos, localAng, originPos, originAngle)"
    },
    {
      "trigger": "Material",
      "contents": "Material(${1:string materialName}, ${2:string pngParameters = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Material(materialName, pngParameters)"
    },
    {
      "trigger": "Matrix",
      "contents": "Matrix(${1:table data = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Matrix(data)"
    },
    {
      "trigger": "MenuGetAddonData",
      "contents": "MenuGetAddonData(${1:string workshopItemID})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "MenuGetAddonData(workshopItemID)"
    },
    {
      "trigger": "Mesh",
      "contents": "Mesh(${1:IMaterial mat = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Mesh(mat)"
    },
    {
      "trigger": "Model",
      "contents": "Model(${1:string model})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Model(model)"
    },
    {
      "trigger": "module",
      "contents": "module(${1:string name}, ${2:vararg loaders})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "module(name, loaders)"
    },
    {
      "trigger": "Msg",
      "contents": "Msg(${1:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Msg(args)"
    },
    {
      "trigger": "MsgAll",
      "contents": "MsgAll(${1:vararg args})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "MsgAll(args)"
    },
    {
      "trigger": "MsgC",
      "contents": "MsgC(${1:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "MsgC(args)"
    },
    {
      "trigger": "MsgN",
      "contents": "MsgN(${1:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "MsgN(args)"
    },
    {
      "trigger": "NamedColor",
      "contents": "NamedColor(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "NamedColor(name)"
    },
    {
      "trigger": "newproxy",
      "contents": "newproxy(${1:boolean addMetatable = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "newproxy(addMetatable)"
    },
    {
      "trigger": "next",
      "contents": "next(${1:table tab}, ${2:any prevKey = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "next(tab, prevKey)"
    },
    {
      "trigger": "NumDownloadables",
      "contents": "NumDownloadables()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "NumDownloadables()"
    },
    {
      "trigger": "NumModelSkins",
      "contents": "NumModelSkins(${1:string modelName})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "NumModelSkins(modelName)"
    },
    {
      "trigger": "OnModelLoaded",
      "contents": "OnModelLoaded(${1:string modelName}, ${2:number numPostParams}, ${3:number numSeq}, ${4:number numAttachments}, ${5:number numBoneControllers}, ${6:number numSkins}, ${7:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "OnModelLoaded(modelName, numPostParams, numSeq, numAttachments, numBoneControllers, numSkins, size)"
    },
    {
      "trigger": "OpenFolder",
      "contents": "OpenFolder(${1:string folder})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "OpenFolder(folder)"
    },
    {
      "trigger": "OpenProblemsPanel",
      "contents": "OpenProblemsPanel()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "OpenProblemsPanel()"
    },
    {
      "trigger": "OrderVectors",
      "contents": "OrderVectors(${1:Vector vector1}, ${2:Vector vector2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "OrderVectors(vector1, vector2)"
    },
    {
      "trigger": "pairs",
      "contents": "pairs(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "pairs(tab)"
    },
    {
      "trigger": "Particle",
      "contents": "Particle(${1:string file})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Particle(file)"
    },
    {
      "trigger": "ParticleEffect",
      "contents": "ParticleEffect(${1:string particleName}, ${2:Vector position}, ${3:Angle angles}, ${4:Entity parent = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ParticleEffect(particleName, position, angles, parent)"
    },
    {
      "trigger": "ParticleEffectAttach",
      "contents": "ParticleEffectAttach(${1:string particleName}, ${2:number attachType}, ${3:Entity entity}, ${4:number attachmentID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ParticleEffectAttach(particleName, attachType, entity, attachmentID)"
    },
    {
      "trigger": "ParticleEmitter",
      "contents": "ParticleEmitter(${1:Vector position}, ${2:boolean use3D = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ParticleEmitter(position, use3D)"
    },
    {
      "trigger": "Path",
      "contents": "Path(${1:string type})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Path(type)"
    },
    {
      "trigger": "pcall",
      "contents": "pcall(${1:function func}, ${2:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "pcall(func, arguments)"
    },
    {
      "trigger": "Player",
      "contents": "Player(${1:number playerIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Player(playerIndex)"
    },
    {
      "trigger": "PositionSpawnIcon",
      "contents": "PositionSpawnIcon(${1:Entity model}, ${2:Vector position}, ${3:boolean noAngles})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PositionSpawnIcon(model, position, noAngles)"
    },
    {
      "trigger": "PrecacheParticleSystem",
      "contents": "PrecacheParticleSystem(${1:string particleSystemName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrecacheParticleSystem(particleSystemName)"
    },
    {
      "trigger": "PrecacheScene",
      "contents": "PrecacheScene(${1:string scene})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrecacheScene(scene)"
    },
    {
      "trigger": "PrecacheSentenceFile",
      "contents": "PrecacheSentenceFile(${1:string filename})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrecacheSentenceFile(filename)"
    },
    {
      "trigger": "PrecacheSentenceGroup",
      "contents": "PrecacheSentenceGroup(${1:string group})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrecacheSentenceGroup(group)"
    },
    {
      "trigger": "print",
      "contents": "print(${1:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "print(args)"
    },
    {
      "trigger": "PrintMessage",
      "contents": "PrintMessage(${1:number type}, ${2:string message})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrintMessage(type, message)"
    },
    {
      "trigger": "PrintTable",
      "contents": "PrintTable(${1:table tableToPrint}, ${2:number indent = 0}, ${3:table done = {}})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "PrintTable(tableToPrint, indent, done)"
    },
    {
      "trigger": "ProjectedTexture",
      "contents": "ProjectedTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ProjectedTexture()"
    },
    {
      "trigger": "ProtectedCall",
      "contents": "ProtectedCall(${1:function func})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ProtectedCall(func)"
    },
    {
      "trigger": "RandomPairs",
      "contents": "RandomPairs(${1:table table}, ${2:boolean descending = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RandomPairs(table, descending)"
    },
    {
      "trigger": "rawequal",
      "contents": "rawequal(${1:any value1}, ${2:any value2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "rawequal(value1, value2)"
    },
    {
      "trigger": "rawget",
      "contents": "rawget(${1:table table}, ${2:any index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "rawget(table, index)"
    },
    {
      "trigger": "rawset",
      "contents": "rawset(${1:table table}, ${2:any index}, ${3:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "rawset(table, index, value)"
    },
    {
      "trigger": "RealFrameTime",
      "contents": "RealFrameTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RealFrameTime()"
    },
    {
      "trigger": "RealTime",
      "contents": "RealTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RealTime()"
    },
    {
      "trigger": "RecipientFilter",
      "contents": "RecipientFilter(${1:boolean unreliable = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RecipientFilter(unreliable)"
    },
    {
      "trigger": "RecordDemoFrame",
      "contents": "RecordDemoFrame()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RecordDemoFrame()"
    },
    {
      "trigger": "RefreshAddonConflicts",
      "contents": "RefreshAddonConflicts()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RefreshAddonConflicts()"
    },
    {
      "trigger": "RegisterDermaMenuForClose",
      "contents": "RegisterDermaMenuForClose(${1:Panel menu})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RegisterDermaMenuForClose(menu)"
    },
    {
      "trigger": "RememberCursorPosition",
      "contents": "RememberCursorPosition()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RememberCursorPosition()"
    },
    {
      "trigger": "RemoveTooltip",
      "contents": "RemoveTooltip()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RemoveTooltip()"
    },
    {
      "trigger": "RenderAngles",
      "contents": "RenderAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RenderAngles()"
    },
    {
      "trigger": "RenderDoF",
      "contents": "RenderDoF(${1:Vector origin}, ${2:Angle angle}, ${3:Vector usableFocusPoint}, ${4:number angleSize}, ${5:number radialSteps}, ${6:number passes}, ${7:boolean spin}, ${8:table inView}, ${9:number fov})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RenderDoF(origin, angle, usableFocusPoint, angleSize, radialSteps, passes, spin, inView, fov)"
    },
    {
      "trigger": "RenderStereoscopy",
      "contents": "RenderStereoscopy(${1:Vector viewOrigin}, ${2:Angle viewAngles})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RenderStereoscopy(viewOrigin, viewAngles)"
    },
    {
      "trigger": "RenderSuperDoF",
      "contents": "RenderSuperDoF(${1:Vector viewOrigin}, ${2:Angle viewAngles}, ${3:number viewFOV})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RenderSuperDoF(viewOrigin, viewAngles, viewFOV)"
    },
    {
      "trigger": "RequestConnectToServer",
      "contents": "RequestConnectToServer(${1:string serverip})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RequestConnectToServer(serverip)"
    },
    {
      "trigger": "RequestOpenURL",
      "contents": "RequestOpenURL(${1:string url})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RequestOpenURL(url)"
    },
    {
      "trigger": "RequestPermission",
      "contents": "RequestPermission(${1:string permission})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RequestPermission(permission)"
    },
    {
      "trigger": "require",
      "contents": "require(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "require(name)"
    },
    {
      "trigger": "RestoreCursorPosition",
      "contents": "RestoreCursorPosition()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RestoreCursorPosition()"
    },
    {
      "trigger": "RunConsoleCommand",
      "contents": "RunConsoleCommand(${1:string command}, ${2:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RunConsoleCommand(command, arguments)"
    },
    {
      "trigger": "RunGameUICommand",
      "contents": "RunGameUICommand(${1:string command})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RunGameUICommand(command)"
    },
    {
      "trigger": "RunString",
      "contents": "RunString(${1:string code}, ${2:string identifier = RunString}, ${3:boolean handleError = true})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RunString(code, identifier, handleError)"
    },
    {
      "trigger": "RunStringEx",
      "contents": "RunStringEx()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "RunStringEx()"
    },
    {
      "trigger": "SafeRemoveEntity",
      "contents": "SafeRemoveEntity(${1:Entity ent})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SafeRemoveEntity(ent)"
    },
    {
      "trigger": "SafeRemoveEntityDelayed",
      "contents": "SafeRemoveEntityDelayed(${1:Entity entity}, ${2:number delay})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SafeRemoveEntityDelayed(entity, delay)"
    },
    {
      "trigger": "SaveAddonPresets",
      "contents": "SaveAddonPresets(${1:string JSON})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SaveAddonPresets(JSON)"
    },
    {
      "trigger": "SaveHideNews",
      "contents": "SaveHideNews(${1:boolean hide})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SaveHideNews(hide)"
    },
    {
      "trigger": "SaveLastMap",
      "contents": "SaveLastMap(${1:string map}, ${2:string category})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SaveLastMap(map, category)"
    },
    {
      "trigger": "SavePresets",
      "contents": "SavePresets(${1:table presets})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SavePresets(presets)"
    },
    {
      "trigger": "ScreenScale",
      "contents": "ScreenScale(${1:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ScreenScale(size)"
    },
    {
      "trigger": "ScreenScaleH",
      "contents": "ScreenScaleH(${1:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ScreenScaleH(size)"
    },
    {
      "trigger": "ScrH",
      "contents": "ScrH()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ScrH()"
    },
    {
      "trigger": "ScrW",
      "contents": "ScrW()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ScrW()"
    },
    {
      "trigger": "select",
      "contents": "select(${1:any parameter}, ${2:vararg vararg})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "select(parameter, vararg)"
    },
    {
      "trigger": "SendUserMessage",
      "contents": "SendUserMessage(${1:string name}, ${2:any recipients}, ${3:vararg args})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SendUserMessage(name, recipients, args)"
    },
    {
      "trigger": "SentenceDuration",
      "contents": "SentenceDuration(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SentenceDuration(name)"
    },
    {
      "trigger": "ServerLog",
      "contents": "ServerLog(${1:string parameter})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ServerLog(parameter)"
    },
    {
      "trigger": "SetClipboardText",
      "contents": "SetClipboardText(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetClipboardText(text)"
    },
    {
      "trigger": "setfenv",
      "contents": "setfenv(${1:function location}, ${2:table environment})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "setfenv(location, environment)"
    },
    {
      "trigger": "SetGlobal2Angle",
      "contents": "SetGlobal2Angle(${1:any index}, ${2:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Angle(index, angle)"
    },
    {
      "trigger": "SetGlobal2Bool",
      "contents": "SetGlobal2Bool(${1:any index}, ${2:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Bool(index, bool)"
    },
    {
      "trigger": "SetGlobal2Entity",
      "contents": "SetGlobal2Entity(${1:any index}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Entity(index, ent)"
    },
    {
      "trigger": "SetGlobal2Float",
      "contents": "SetGlobal2Float(${1:any index}, ${2:number float})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Float(index, float)"
    },
    {
      "trigger": "SetGlobal2Int",
      "contents": "SetGlobal2Int(${1:string index}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Int(index, value)"
    },
    {
      "trigger": "SetGlobal2String",
      "contents": "SetGlobal2String(${1:any index}, ${2:string string})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2String(index, string)"
    },
    {
      "trigger": "SetGlobal2Var",
      "contents": "SetGlobal2Var(${1:any index}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Var(index, value)"
    },
    {
      "trigger": "SetGlobal2Vector",
      "contents": "SetGlobal2Vector(${1:any index}, ${2:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobal2Vector(index, vec)"
    },
    {
      "trigger": "SetGlobalAngle",
      "contents": "SetGlobalAngle(${1:any index}, ${2:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalAngle(index, angle)"
    },
    {
      "trigger": "SetGlobalBool",
      "contents": "SetGlobalBool(${1:any index}, ${2:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalBool(index, bool)"
    },
    {
      "trigger": "SetGlobalEntity",
      "contents": "SetGlobalEntity(${1:any index}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalEntity(index, ent)"
    },
    {
      "trigger": "SetGlobalFloat",
      "contents": "SetGlobalFloat(${1:any index}, ${2:number float})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalFloat(index, float)"
    },
    {
      "trigger": "SetGlobalInt",
      "contents": "SetGlobalInt(${1:string index}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalInt(index, value)"
    },
    {
      "trigger": "SetGlobalString",
      "contents": "SetGlobalString(${1:any index}, ${2:string string})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalString(index, string)"
    },
    {
      "trigger": "SetGlobalVar",
      "contents": "SetGlobalVar(${1:any index}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalVar(index, value)"
    },
    {
      "trigger": "SetGlobalVector",
      "contents": "SetGlobalVector(${1:any index}, ${2:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetGlobalVector(index, vec)"
    },
    {
      "trigger": "setmetatable",
      "contents": "setmetatable(${1:table Tab}, ${2:table Metatable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "setmetatable(Tab, Metatable)"
    },
    {
      "trigger": "SetPhysConstraintSystem",
      "contents": "SetPhysConstraintSystem(${1:Entity constraintSystem})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SetPhysConstraintSystem(constraintSystem)"
    },
    {
      "trigger": "SortedPairs",
      "contents": "SortedPairs(${1:table table}, ${2:boolean desc = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SortedPairs(table, desc)"
    },
    {
      "trigger": "SortedPairsByMemberValue",
      "contents": "SortedPairsByMemberValue(${1:table table}, ${2:any memberKey}, ${3:boolean descending = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SortedPairsByMemberValue(table, memberKey, descending)"
    },
    {
      "trigger": "SortedPairsByValue",
      "contents": "SortedPairsByValue(${1:table table}, ${2:boolean descending = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SortedPairsByValue(table, descending)"
    },
    {
      "trigger": "Sound",
      "contents": "Sound(${1:string soundPath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Sound(soundPath)"
    },
    {
      "trigger": "SoundDuration",
      "contents": "SoundDuration(${1:string soundName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SoundDuration(soundName)"
    },
    {
      "trigger": "SQLStr",
      "contents": "SQLStr(${1:string input}, ${2:boolean noQuotes = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SQLStr(input, noQuotes)"
    },
    {
      "trigger": "SScale",
      "contents": "SScale(${1:number Size})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SScale(Size)"
    },
    {
      "trigger": "STNDRD",
      "contents": "STNDRD(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "STNDRD(number)"
    },
    {
      "trigger": "SuppressHostEvents",
      "contents": "SuppressHostEvents(${1:Player suppressPlayer})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SuppressHostEvents(suppressPlayer)"
    },
    {
      "trigger": "SysTime",
      "contents": "SysTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "SysTime()"
    },
    {
      "trigger": "TauntCamera",
      "contents": "TauntCamera()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TauntCamera()"
    },
    {
      "trigger": "TextEntryLoseFocus",
      "contents": "TextEntryLoseFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TextEntryLoseFocus()"
    },
    {
      "trigger": "TimedCos",
      "contents": "TimedCos(${1:number frequency}, ${2:number min}, ${3:number max}, ${4:number offset})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TimedCos(frequency, min, max, offset)"
    },
    {
      "trigger": "TimedSin",
      "contents": "TimedSin(${1:number frequency}, ${2:number origin}, ${3:number max}, ${4:number offset})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TimedSin(frequency, origin, max, offset)"
    },
    {
      "trigger": "tobool",
      "contents": "tobool(${1:any val})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "tobool(val)"
    },
    {
      "trigger": "ToggleFavourite",
      "contents": "ToggleFavourite(${1:string map})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ToggleFavourite(map)"
    },
    {
      "trigger": "tonumber",
      "contents": "tonumber(${1:any value}, ${2:number base = 10})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "tonumber(value, base)"
    },
    {
      "trigger": "tostring",
      "contents": "tostring(${1:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "tostring(value)"
    },
    {
      "trigger": "TranslateDownloadableName",
      "contents": "TranslateDownloadableName(${1:string filename})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TranslateDownloadableName(filename)"
    },
    {
      "trigger": "type",
      "contents": "type(${1:any var})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "type(var)"
    },
    {
      "trigger": "TypeID",
      "contents": "TypeID(${1:any variable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "TypeID(variable)"
    },
    {
      "trigger": "unpack",
      "contents": "unpack(${1:table tbl}, ${2:number startIndex = 1}, ${3:number endIndex = #tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "unpack(tbl, startIndex, endIndex)"
    },
    {
      "trigger": "UnPredictedCurTime",
      "contents": "UnPredictedCurTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UnPredictedCurTime()"
    },
    {
      "trigger": "UpdateAddonDisabledState",
      "contents": "UpdateAddonDisabledState()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateAddonDisabledState()"
    },
    {
      "trigger": "UpdateAddonMapList",
      "contents": "UpdateAddonMapList()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateAddonMapList()"
    },
    {
      "trigger": "UpdateGames",
      "contents": "UpdateGames()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateGames()"
    },
    {
      "trigger": "UpdateLanguages",
      "contents": "UpdateLanguages()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateLanguages()"
    },
    {
      "trigger": "UpdateLoadPanel",
      "contents": "UpdateLoadPanel(${1:string javascript})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateLoadPanel(javascript)"
    },
    {
      "trigger": "UpdateMapList",
      "contents": "UpdateMapList()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateMapList()"
    },
    {
      "trigger": "UpdateServerSettings",
      "contents": "UpdateServerSettings()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateServerSettings()"
    },
    {
      "trigger": "UpdateSubscribedAddons",
      "contents": "UpdateSubscribedAddons()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UpdateSubscribedAddons()"
    },
    {
      "trigger": "UTIL_IsUselessModel",
      "contents": "UTIL_IsUselessModel(${1:string modelName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "UTIL_IsUselessModel(modelName)"
    },
    {
      "trigger": "ValidPanel",
      "contents": "ValidPanel(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "ValidPanel(panel)"
    },
    {
      "trigger": "Vector",
      "contents": "Vector(${1:number x = 0}, ${2:number y = 0}, ${3:number z = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "Vector(x, y, z)"
    },
    {
      "trigger": "VectorRand",
      "contents": "VectorRand(${1:number min = -1}, ${2:number max = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "VectorRand(min, max)"
    },
    {
      "trigger": "VGUIFrameTime",
      "contents": "VGUIFrameTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "VGUIFrameTime()"
    },
    {
      "trigger": "VGUIRect",
      "contents": "VGUIRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "VGUIRect(x, y, w, h)"
    },
    {
      "trigger": "VisualizeLayout",
      "contents": "VisualizeLayout(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "VisualizeLayout(panel)"
    },
    {
      "trigger": "WorkshopFileBase",
      "contents": "WorkshopFileBase(${1:string namespace}, ${2:table requiredTags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "WorkshopFileBase(namespace, requiredTags)"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector position}, ${2:Angle angle}, ${3:Vector newSystemOrigin}, ${4:Angle newSystemAngles})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "WorldToLocal(position, angle, newSystemOrigin, newSystemAngles)"
    },
    {
      "trigger": "xpcall",
      "contents": "xpcall(${1:function func}, ${2:function errorCallback}, ${3:vararg arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Global"
      ],
      "details": "xpcall(func, errorCallback, arguments)"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Angle angle})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Add(angle)"
    },
    {
      "trigger": "Div",
      "contents": "Div(${1:number scalar})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Div(scalar)"
    },
    {
      "trigger": "Forward",
      "contents": "Forward()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Forward()"
    },
    {
      "trigger": "IsEqualTol",
      "contents": "IsEqualTol(${1:Angle compare}, ${2:number tolerance})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:IsEqualTol(compare, tolerance)"
    },
    {
      "trigger": "IsZero",
      "contents": "IsZero()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:IsZero()"
    },
    {
      "trigger": "Mul",
      "contents": "Mul(${1:number scalar})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Mul(scalar)"
    },
    {
      "trigger": "Normalize",
      "contents": "Normalize()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Normalize()"
    },
    {
      "trigger": "Random",
      "contents": "Random(${1:number min = -360}, ${2:number max = 360})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Random(min, max)"
    },
    {
      "trigger": "Right",
      "contents": "Right()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Right()"
    },
    {
      "trigger": "RotateAroundAxis",
      "contents": "RotateAroundAxis(${1:Vector axis}, ${2:number rotation})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:RotateAroundAxis(axis, rotation)"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:Angle originalAngle})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Set(originalAngle)"
    },
    {
      "trigger": "SetUnpacked",
      "contents": "SetUnpacked(${1:number p}, ${2:number y}, ${3:number r})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:SetUnpacked(p, y, r)"
    },
    {
      "trigger": "SnapTo",
      "contents": "SnapTo(${1:string axis}, ${2:number target})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:SnapTo(axis, target)"
    },
    {
      "trigger": "Sub",
      "contents": "Sub(${1:Angle angle})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Sub(angle)"
    },
    {
      "trigger": "ToTable",
      "contents": "ToTable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:ToTable()"
    },
    {
      "trigger": "Unpack",
      "contents": "Unpack()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Unpack()"
    },
    {
      "trigger": "Up",
      "contents": "Up()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Up()"
    },
    {
      "trigger": "Zero",
      "contents": "Zero()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Angle:Zero()"
    },
    {
      "trigger": "ReadAngle",
      "contents": "ReadAngle()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadAngle()"
    },
    {
      "trigger": "ReadBool",
      "contents": "ReadBool()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadBool()"
    },
    {
      "trigger": "ReadChar",
      "contents": "ReadChar()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadChar()"
    },
    {
      "trigger": "ReadEntity",
      "contents": "ReadEntity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadEntity()"
    },
    {
      "trigger": "ReadFloat",
      "contents": "ReadFloat()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadFloat()"
    },
    {
      "trigger": "ReadLong",
      "contents": "ReadLong()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadLong()"
    },
    {
      "trigger": "ReadShort",
      "contents": "ReadShort()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadShort()"
    },
    {
      "trigger": "ReadString",
      "contents": "ReadString()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadString()"
    },
    {
      "trigger": "ReadVector",
      "contents": "ReadVector()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadVector()"
    },
    {
      "trigger": "ReadVectorNormal",
      "contents": "ReadVectorNormal()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:ReadVectorNormal()"
    },
    {
      "trigger": "Reset",
      "contents": "Reset()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "bf_read:Reset()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetAngles()"
    },
    {
      "trigger": "GetAttachment",
      "contents": "GetAttachment()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetAttachment()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetColor()"
    },
    {
      "trigger": "GetDamageType",
      "contents": "GetDamageType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetDamageType()"
    },
    {
      "trigger": "GetEntIndex",
      "contents": "GetEntIndex()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetEntIndex()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetEntity()"
    },
    {
      "trigger": "GetFlags",
      "contents": "GetFlags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetFlags()"
    },
    {
      "trigger": "GetHitBox",
      "contents": "GetHitBox()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetHitBox()"
    },
    {
      "trigger": "GetMagnitude",
      "contents": "GetMagnitude()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetMagnitude()"
    },
    {
      "trigger": "GetMaterialIndex",
      "contents": "GetMaterialIndex()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetMaterialIndex()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetNormal()"
    },
    {
      "trigger": "GetOrigin",
      "contents": "GetOrigin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetOrigin()"
    },
    {
      "trigger": "GetRadius",
      "contents": "GetRadius()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetRadius()"
    },
    {
      "trigger": "GetScale",
      "contents": "GetScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetScale()"
    },
    {
      "trigger": "GetStart",
      "contents": "GetStart()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetStart()"
    },
    {
      "trigger": "GetSurfaceProp",
      "contents": "GetSurfaceProp()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:GetSurfaceProp()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetAngles(ang)"
    },
    {
      "trigger": "SetAttachment",
      "contents": "SetAttachment(${1:number attachment})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetAttachment(attachment)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:number color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetColor(color)"
    },
    {
      "trigger": "SetDamageType",
      "contents": "SetDamageType(${1:number damageType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetDamageType(damageType)"
    },
    {
      "trigger": "SetEntIndex",
      "contents": "SetEntIndex(${1:number entIndex})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetEntIndex(entIndex)"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity entity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetEntity(entity)"
    },
    {
      "trigger": "SetFlags",
      "contents": "SetFlags(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetFlags(flags)"
    },
    {
      "trigger": "SetHitBox",
      "contents": "SetHitBox(${1:number hitBoxIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetHitBox(hitBoxIndex)"
    },
    {
      "trigger": "SetMagnitude",
      "contents": "SetMagnitude(${1:number magnitude})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetMagnitude(magnitude)"
    },
    {
      "trigger": "SetMaterialIndex",
      "contents": "SetMaterialIndex(${1:number materialIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetMaterialIndex(materialIndex)"
    },
    {
      "trigger": "SetNormal",
      "contents": "SetNormal(${1:Vector normal})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetNormal(normal)"
    },
    {
      "trigger": "SetOrigin",
      "contents": "SetOrigin(${1:Vector origin})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetOrigin(origin)"
    },
    {
      "trigger": "SetRadius",
      "contents": "SetRadius(${1:number radius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetRadius(radius)"
    },
    {
      "trigger": "SetScale",
      "contents": "SetScale(${1:number scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetScale(scale)"
    },
    {
      "trigger": "SetStart",
      "contents": "SetStart(${1:Vector start})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetStart(start)"
    },
    {
      "trigger": "SetSurfaceProp",
      "contents": "SetSurfaceProp(${1:number surfaceProperties})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CEffectData:SetSurfaceProp(surfaceProperties)"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:string material}, ${2:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:Add(material, position)"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:Draw()"
    },
    {
      "trigger": "Finish",
      "contents": "Finish()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:Finish()"
    },
    {
      "trigger": "GetNumActiveParticles",
      "contents": "GetNumActiveParticles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:GetNumActiveParticles()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:GetPos()"
    },
    {
      "trigger": "Is3D",
      "contents": "Is3D()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:Is3D()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:IsValid()"
    },
    {
      "trigger": "SetBBox",
      "contents": "SetBBox(${1:Vector mins}, ${2:Vector maxs})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:SetBBox(mins, maxs)"
    },
    {
      "trigger": "SetNearClip",
      "contents": "SetNearClip(${1:number distanceMin}, ${2:number distanceMax})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:SetNearClip(distanceMin, distanceMax)"
    },
    {
      "trigger": "SetNoDraw",
      "contents": "SetNoDraw(${1:boolean noDraw})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:SetNoDraw(noDraw)"
    },
    {
      "trigger": "SetParticleCullRadius",
      "contents": "SetParticleCullRadius(${1:number radius})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:SetParticleCullRadius(radius)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaEmitter:SetPos(position)"
    },
    {
      "trigger": "Approach",
      "contents": "Approach(${1:Vector goal}, ${2:number goalweight})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:Approach(goal, goalweight)"
    },
    {
      "trigger": "ClearStuck",
      "contents": "ClearStuck()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:ClearStuck()"
    },
    {
      "trigger": "FaceTowards",
      "contents": "FaceTowards(${1:Vector goal})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:FaceTowards(goal)"
    },
    {
      "trigger": "GetAcceleration",
      "contents": "GetAcceleration()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetAcceleration()"
    },
    {
      "trigger": "GetAvoidAllowed",
      "contents": "GetAvoidAllowed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetAvoidAllowed()"
    },
    {
      "trigger": "GetClimbAllowed",
      "contents": "GetClimbAllowed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetClimbAllowed()"
    },
    {
      "trigger": "GetCurrentAcceleration",
      "contents": "GetCurrentAcceleration()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetCurrentAcceleration()"
    },
    {
      "trigger": "GetDeathDropHeight",
      "contents": "GetDeathDropHeight()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetDeathDropHeight()"
    },
    {
      "trigger": "GetDeceleration",
      "contents": "GetDeceleration()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetDeceleration()"
    },
    {
      "trigger": "GetDesiredSpeed",
      "contents": "GetDesiredSpeed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetDesiredSpeed()"
    },
    {
      "trigger": "GetGravity",
      "contents": "GetGravity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetGravity()"
    },
    {
      "trigger": "GetGroundMotionVector",
      "contents": "GetGroundMotionVector()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetGroundMotionVector()"
    },
    {
      "trigger": "GetGroundNormal",
      "contents": "GetGroundNormal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetGroundNormal()"
    },
    {
      "trigger": "GetJumpGapsAllowed",
      "contents": "GetJumpGapsAllowed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetJumpGapsAllowed()"
    },
    {
      "trigger": "GetJumpHeight",
      "contents": "GetJumpHeight()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetJumpHeight()"
    },
    {
      "trigger": "GetMaxJumpHeight",
      "contents": "GetMaxJumpHeight()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetMaxJumpHeight()"
    },
    {
      "trigger": "GetMaxYawRate",
      "contents": "GetMaxYawRate()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetMaxYawRate()"
    },
    {
      "trigger": "GetNextBot",
      "contents": "GetNextBot()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetNextBot()"
    },
    {
      "trigger": "GetStepHeight",
      "contents": "GetStepHeight()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetStepHeight()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:GetVelocity()"
    },
    {
      "trigger": "IsAreaTraversable",
      "contents": "IsAreaTraversable(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsAreaTraversable(area)"
    },
    {
      "trigger": "IsAttemptingToMove",
      "contents": "IsAttemptingToMove()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsAttemptingToMove()"
    },
    {
      "trigger": "IsClimbingOrJumping",
      "contents": "IsClimbingOrJumping()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsClimbingOrJumping()"
    },
    {
      "trigger": "IsOnGround",
      "contents": "IsOnGround()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsOnGround()"
    },
    {
      "trigger": "IsStuck",
      "contents": "IsStuck()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsStuck()"
    },
    {
      "trigger": "IsUsingLadder",
      "contents": "IsUsingLadder()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:IsUsingLadder()"
    },
    {
      "trigger": "Jump",
      "contents": "Jump(${1:number act = ACT_JUMP})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:Jump(act)"
    },
    {
      "trigger": "JumpAcrossGap",
      "contents": "JumpAcrossGap(${1:Vector landingGoal}, ${2:Vector landingForward})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:JumpAcrossGap(landingGoal, landingForward)"
    },
    {
      "trigger": "SetAcceleration",
      "contents": "SetAcceleration(${1:number speed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetAcceleration(speed)"
    },
    {
      "trigger": "SetAvoidAllowed",
      "contents": "SetAvoidAllowed(${1:boolean allowed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetAvoidAllowed(allowed)"
    },
    {
      "trigger": "SetClimbAllowed",
      "contents": "SetClimbAllowed(${1:boolean allowed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetClimbAllowed(allowed)"
    },
    {
      "trigger": "SetDeathDropHeight",
      "contents": "SetDeathDropHeight(${1:number height})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetDeathDropHeight(height)"
    },
    {
      "trigger": "SetDeceleration",
      "contents": "SetDeceleration(${1:number deceleration})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetDeceleration(deceleration)"
    },
    {
      "trigger": "SetDesiredSpeed",
      "contents": "SetDesiredSpeed(${1:number speed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetDesiredSpeed(speed)"
    },
    {
      "trigger": "SetGravity",
      "contents": "SetGravity(${1:number gravity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetGravity(gravity)"
    },
    {
      "trigger": "SetJumpGapsAllowed",
      "contents": "SetJumpGapsAllowed(${1:boolean allowed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetJumpGapsAllowed(allowed)"
    },
    {
      "trigger": "SetJumpHeight",
      "contents": "SetJumpHeight(${1:number height})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetJumpHeight(height)"
    },
    {
      "trigger": "SetMaxYawRate",
      "contents": "SetMaxYawRate(${1:number yawRate})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetMaxYawRate(yawRate)"
    },
    {
      "trigger": "SetStepHeight",
      "contents": "SetStepHeight(${1:number height})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetStepHeight(height)"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaLocomotion:SetVelocity(velocity)"
    },
    {
      "trigger": "GetAirResistance",
      "contents": "GetAirResistance()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetAirResistance()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetAngles()"
    },
    {
      "trigger": "GetAngleVelocity",
      "contents": "GetAngleVelocity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetAngleVelocity()"
    },
    {
      "trigger": "GetBounce",
      "contents": "GetBounce()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetBounce()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetColor()"
    },
    {
      "trigger": "GetDieTime",
      "contents": "GetDieTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetDieTime()"
    },
    {
      "trigger": "GetEndAlpha",
      "contents": "GetEndAlpha()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetEndAlpha()"
    },
    {
      "trigger": "GetEndLength",
      "contents": "GetEndLength()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetEndLength()"
    },
    {
      "trigger": "GetEndSize",
      "contents": "GetEndSize()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetEndSize()"
    },
    {
      "trigger": "GetGravity",
      "contents": "GetGravity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetGravity()"
    },
    {
      "trigger": "GetLifeTime",
      "contents": "GetLifeTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetLifeTime()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetMaterial()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetPos()"
    },
    {
      "trigger": "GetRoll",
      "contents": "GetRoll()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetRoll()"
    },
    {
      "trigger": "GetRollDelta",
      "contents": "GetRollDelta()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetRollDelta()"
    },
    {
      "trigger": "GetStartAlpha",
      "contents": "GetStartAlpha()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetStartAlpha()"
    },
    {
      "trigger": "GetStartLength",
      "contents": "GetStartLength()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetStartLength()"
    },
    {
      "trigger": "GetStartSize",
      "contents": "GetStartSize()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetStartSize()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:GetVelocity()"
    },
    {
      "trigger": "SetAirResistance",
      "contents": "SetAirResistance(${1:number airResistance})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetAirResistance(airResistance)"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetAngles(ang)"
    },
    {
      "trigger": "SetAngleVelocity",
      "contents": "SetAngleVelocity(${1:Angle angVel})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetAngleVelocity(angVel)"
    },
    {
      "trigger": "SetBounce",
      "contents": "SetBounce(${1:number bounce})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetBounce(bounce)"
    },
    {
      "trigger": "SetCollide",
      "contents": "SetCollide(${1:boolean shouldCollide})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetCollide(shouldCollide)"
    },
    {
      "trigger": "SetCollideCallback",
      "contents": "SetCollideCallback(${1:function collideFunc})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetCollideCallback(collideFunc)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:number r}, ${2:number g}, ${3:number b})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetColor(r, g, b)"
    },
    {
      "trigger": "SetDieTime",
      "contents": "SetDieTime(${1:number dieTime})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetDieTime(dieTime)"
    },
    {
      "trigger": "SetEndAlpha",
      "contents": "SetEndAlpha(${1:number endAlpha})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetEndAlpha(endAlpha)"
    },
    {
      "trigger": "SetEndLength",
      "contents": "SetEndLength(${1:number endLength})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetEndLength(endLength)"
    },
    {
      "trigger": "SetEndSize",
      "contents": "SetEndSize(${1:number endSize})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetEndSize(endSize)"
    },
    {
      "trigger": "SetGravity",
      "contents": "SetGravity(${1:Vector gravity})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetGravity(gravity)"
    },
    {
      "trigger": "SetLifeTime",
      "contents": "SetLifeTime(${1:number lifeTime})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetLifeTime(lifeTime)"
    },
    {
      "trigger": "SetLighting",
      "contents": "SetLighting(${1:boolean useLighting})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetLighting(useLighting)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial mat})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetMaterial(mat)"
    },
    {
      "trigger": "SetNextThink",
      "contents": "SetNextThink(${1:number nextThink})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetNextThink(nextThink)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector pos})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetPos(pos)"
    },
    {
      "trigger": "SetRoll",
      "contents": "SetRoll(${1:number roll})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetRoll(roll)"
    },
    {
      "trigger": "SetRollDelta",
      "contents": "SetRollDelta(${1:number rollDelta})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetRollDelta(rollDelta)"
    },
    {
      "trigger": "SetStartAlpha",
      "contents": "SetStartAlpha(${1:number startAlpha})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetStartAlpha(startAlpha)"
    },
    {
      "trigger": "SetStartLength",
      "contents": "SetStartLength(${1:number startLength})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetStartLength(startLength)"
    },
    {
      "trigger": "SetStartSize",
      "contents": "SetStartSize(${1:number startSize})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetStartSize(startSize)"
    },
    {
      "trigger": "SetThinkFunction",
      "contents": "SetThinkFunction(${1:function thinkFunc})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetThinkFunction(thinkFunc)"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector vel})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetVelocity(vel)"
    },
    {
      "trigger": "SetVelocityScale",
      "contents": "SetVelocityScale(${1:boolean doScale = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CLuaParticle:SetVelocityScale(doScale)"
    },
    {
      "trigger": "AddKey",
      "contents": "AddKey(${1:number keys})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:AddKey(keys)"
    },
    {
      "trigger": "GetAbsMoveAngles",
      "contents": "GetAbsMoveAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetAbsMoveAngles()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetAngles()"
    },
    {
      "trigger": "GetButtons",
      "contents": "GetButtons()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetButtons()"
    },
    {
      "trigger": "GetConstraintCenter",
      "contents": "GetConstraintCenter()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetConstraintCenter()"
    },
    {
      "trigger": "GetConstraintRadius",
      "contents": "GetConstraintRadius()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetConstraintRadius()"
    },
    {
      "trigger": "GetConstraintSpeedScale",
      "contents": "GetConstraintSpeedScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetConstraintSpeedScale()"
    },
    {
      "trigger": "GetConstraintWidth",
      "contents": "GetConstraintWidth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetConstraintWidth()"
    },
    {
      "trigger": "GetFinalIdealVelocity",
      "contents": "GetFinalIdealVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetFinalIdealVelocity()"
    },
    {
      "trigger": "GetFinalJumpVelocity",
      "contents": "GetFinalJumpVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetFinalJumpVelocity()"
    },
    {
      "trigger": "GetFinalStepHeight",
      "contents": "GetFinalStepHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetFinalStepHeight()"
    },
    {
      "trigger": "GetForwardSpeed",
      "contents": "GetForwardSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetForwardSpeed()"
    },
    {
      "trigger": "GetImpulseCommand",
      "contents": "GetImpulseCommand()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetImpulseCommand()"
    },
    {
      "trigger": "GetMaxClientSpeed",
      "contents": "GetMaxClientSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetMaxClientSpeed()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetMaxSpeed()"
    },
    {
      "trigger": "GetMoveAngles",
      "contents": "GetMoveAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetMoveAngles()"
    },
    {
      "trigger": "GetOldAngles",
      "contents": "GetOldAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetOldAngles()"
    },
    {
      "trigger": "GetOldButtons",
      "contents": "GetOldButtons()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetOldButtons()"
    },
    {
      "trigger": "GetOrigin",
      "contents": "GetOrigin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetOrigin()"
    },
    {
      "trigger": "GetSideSpeed",
      "contents": "GetSideSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetSideSpeed()"
    },
    {
      "trigger": "GetUpSpeed",
      "contents": "GetUpSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetUpSpeed()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:GetVelocity()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:KeyDown(key)"
    },
    {
      "trigger": "KeyPressed",
      "contents": "KeyPressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:KeyPressed(key)"
    },
    {
      "trigger": "KeyReleased",
      "contents": "KeyReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:KeyReleased(key)"
    },
    {
      "trigger": "KeyWasDown",
      "contents": "KeyWasDown(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:KeyWasDown(key)"
    },
    {
      "trigger": "SetAbsMoveAngles",
      "contents": "SetAbsMoveAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetAbsMoveAngles(ang)"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetAngles(ang)"
    },
    {
      "trigger": "SetButtons",
      "contents": "SetButtons(${1:number buttons})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetButtons(buttons)"
    },
    {
      "trigger": "SetConstraintCenter",
      "contents": "SetConstraintCenter(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetConstraintCenter(pos)"
    },
    {
      "trigger": "SetConstraintRadius",
      "contents": "SetConstraintRadius(${1:number radius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetConstraintRadius(radius)"
    },
    {
      "trigger": "SetConstraintSpeedScale",
      "contents": "SetConstraintSpeedScale(${1:number })",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetConstraintSpeedScale()"
    },
    {
      "trigger": "SetConstraintWidth",
      "contents": "SetConstraintWidth(${1:number })",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetConstraintWidth()"
    },
    {
      "trigger": "SetFinalIdealVelocity",
      "contents": "SetFinalIdealVelocity(${1:Vector idealVel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetFinalIdealVelocity(idealVel)"
    },
    {
      "trigger": "SetFinalJumpVelocity",
      "contents": "SetFinalJumpVelocity(${1:Vector jumpVel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetFinalJumpVelocity(jumpVel)"
    },
    {
      "trigger": "SetFinalStepHeight",
      "contents": "SetFinalStepHeight(${1:number stepHeight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetFinalStepHeight(stepHeight)"
    },
    {
      "trigger": "SetForwardSpeed",
      "contents": "SetForwardSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetForwardSpeed(speed)"
    },
    {
      "trigger": "SetImpulseCommand",
      "contents": "SetImpulseCommand(${1:number impulse})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetImpulseCommand(impulse)"
    },
    {
      "trigger": "SetMaxClientSpeed",
      "contents": "SetMaxClientSpeed(${1:number maxSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetMaxClientSpeed(maxSpeed)"
    },
    {
      "trigger": "SetMaxSpeed",
      "contents": "SetMaxSpeed(${1:number maxSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetMaxSpeed(maxSpeed)"
    },
    {
      "trigger": "SetMoveAngles",
      "contents": "SetMoveAngles(${1:Angle dir})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetMoveAngles(dir)"
    },
    {
      "trigger": "SetOldAngles",
      "contents": "SetOldAngles(${1:Angle aimAng})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetOldAngles(aimAng)"
    },
    {
      "trigger": "SetOldButtons",
      "contents": "SetOldButtons(${1:number buttons})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetOldButtons(buttons)"
    },
    {
      "trigger": "SetOrigin",
      "contents": "SetOrigin(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetOrigin(pos)"
    },
    {
      "trigger": "SetSideSpeed",
      "contents": "SetSideSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetSideSpeed(speed)"
    },
    {
      "trigger": "SetUpSpeed",
      "contents": "SetUpSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetUpSpeed(speed)"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CMoveData:SetVelocity(velocity)"
    },
    {
      "trigger": "AddAttributes",
      "contents": "AddAttributes(${1:number attribs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:AddAttributes(attribs)"
    },
    {
      "trigger": "AddHidingSpot",
      "contents": "AddHidingSpot(${1:Vector pos}, ${2:number flags = 7})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:AddHidingSpot(pos, flags)"
    },
    {
      "trigger": "AddToClosedList",
      "contents": "AddToClosedList()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:AddToClosedList()"
    },
    {
      "trigger": "AddToOpenList",
      "contents": "AddToOpenList()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:AddToOpenList()"
    },
    {
      "trigger": "ClearSearchLists",
      "contents": "ClearSearchLists()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:ClearSearchLists()"
    },
    {
      "trigger": "ComputeAdjacentConnectionHeightChange",
      "contents": "ComputeAdjacentConnectionHeightChange(${1:CNavArea navarea})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:ComputeAdjacentConnectionHeightChange(navarea)"
    },
    {
      "trigger": "ComputeDirection",
      "contents": "ComputeDirection(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:ComputeDirection(pos)"
    },
    {
      "trigger": "ComputeGroundHeightChange",
      "contents": "ComputeGroundHeightChange(${1:CNavArea navArea})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:ComputeGroundHeightChange(navArea)"
    },
    {
      "trigger": "ConnectTo",
      "contents": "ConnectTo(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:ConnectTo(area)"
    },
    {
      "trigger": "Contains",
      "contents": "Contains(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:Contains(pos)"
    },
    {
      "trigger": "Disconnect",
      "contents": "Disconnect(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:Disconnect(area)"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:Draw()"
    },
    {
      "trigger": "DrawSpots",
      "contents": "DrawSpots()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:DrawSpots()"
    },
    {
      "trigger": "GetAdjacentAreaDistances",
      "contents": "GetAdjacentAreaDistances(${1:number dir = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAdjacentAreaDistances(dir)"
    },
    {
      "trigger": "GetAdjacentAreas",
      "contents": "GetAdjacentAreas()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAdjacentAreas()"
    },
    {
      "trigger": "GetAdjacentAreasAtSide",
      "contents": "GetAdjacentAreasAtSide(${1:number navDir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAdjacentAreasAtSide(navDir)"
    },
    {
      "trigger": "GetAdjacentCount",
      "contents": "GetAdjacentCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAdjacentCount()"
    },
    {
      "trigger": "GetAdjacentCountAtSide",
      "contents": "GetAdjacentCountAtSide(${1:number navDir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAdjacentCountAtSide(navDir)"
    },
    {
      "trigger": "GetAttributes",
      "contents": "GetAttributes()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetAttributes()"
    },
    {
      "trigger": "GetCenter",
      "contents": "GetCenter()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetCenter()"
    },
    {
      "trigger": "GetClosestPointOnArea",
      "contents": "GetClosestPointOnArea(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetClosestPointOnArea(pos)"
    },
    {
      "trigger": "GetCorner",
      "contents": "GetCorner(${1:number cornerid})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetCorner(cornerid)"
    },
    {
      "trigger": "GetCostSoFar",
      "contents": "GetCostSoFar()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetCostSoFar()"
    },
    {
      "trigger": "GetExposedSpots",
      "contents": "GetExposedSpots()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetExposedSpots()"
    },
    {
      "trigger": "GetExtentInfo",
      "contents": "GetExtentInfo()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetExtentInfo()"
    },
    {
      "trigger": "GetHidingSpots",
      "contents": "GetHidingSpots(${1:number type = 1})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetHidingSpots(type)"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetID()"
    },
    {
      "trigger": "GetIncomingConnectionDistances",
      "contents": "GetIncomingConnectionDistances(${1:number dir = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetIncomingConnectionDistances(dir)"
    },
    {
      "trigger": "GetIncomingConnections",
      "contents": "GetIncomingConnections()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetIncomingConnections()"
    },
    {
      "trigger": "GetIncomingConnectionsAtSide",
      "contents": "GetIncomingConnectionsAtSide(${1:number navDir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetIncomingConnectionsAtSide(navDir)"
    },
    {
      "trigger": "GetLadders",
      "contents": "GetLadders()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetLadders()"
    },
    {
      "trigger": "GetLaddersAtSide",
      "contents": "GetLaddersAtSide(${1:number navDir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetLaddersAtSide(navDir)"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetParent()"
    },
    {
      "trigger": "GetParentHow",
      "contents": "GetParentHow()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetParentHow()"
    },
    {
      "trigger": "GetPlace",
      "contents": "GetPlace()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetPlace()"
    },
    {
      "trigger": "GetRandomAdjacentAreaAtSide",
      "contents": "GetRandomAdjacentAreaAtSide(${1:number navDir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetRandomAdjacentAreaAtSide(navDir)"
    },
    {
      "trigger": "GetRandomPoint",
      "contents": "GetRandomPoint()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetRandomPoint()"
    },
    {
      "trigger": "GetSizeX",
      "contents": "GetSizeX()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetSizeX()"
    },
    {
      "trigger": "GetSizeY",
      "contents": "GetSizeY()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetSizeY()"
    },
    {
      "trigger": "GetSpotEncounters",
      "contents": "GetSpotEncounters()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetSpotEncounters()"
    },
    {
      "trigger": "GetTotalCost",
      "contents": "GetTotalCost()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetTotalCost()"
    },
    {
      "trigger": "GetVisibleAreas",
      "contents": "GetVisibleAreas()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetVisibleAreas()"
    },
    {
      "trigger": "GetZ",
      "contents": "GetZ(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:GetZ(pos)"
    },
    {
      "trigger": "HasAttributes",
      "contents": "HasAttributes(${1:number attribs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:HasAttributes(attribs)"
    },
    {
      "trigger": "IsBlocked",
      "contents": "IsBlocked(${1:number teamID = -2}, ${2:boolean ignoreNavBlockers = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsBlocked(teamID, ignoreNavBlockers)"
    },
    {
      "trigger": "IsClosed",
      "contents": "IsClosed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsClosed()"
    },
    {
      "trigger": "IsCompletelyVisible",
      "contents": "IsCompletelyVisible(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsCompletelyVisible(area)"
    },
    {
      "trigger": "IsConnected",
      "contents": "IsConnected(${1:CNavArea navArea})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsConnected(navArea)"
    },
    {
      "trigger": "IsConnectedAtSide",
      "contents": "IsConnectedAtSide(${1:CNavArea navArea}, ${2:number navDirType})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsConnectedAtSide(navArea, navDirType)"
    },
    {
      "trigger": "IsCoplanar",
      "contents": "IsCoplanar(${1:CNavArea navArea})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsCoplanar(navArea)"
    },
    {
      "trigger": "IsDamaging",
      "contents": "IsDamaging()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsDamaging()"
    },
    {
      "trigger": "IsFlat",
      "contents": "IsFlat()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsFlat()"
    },
    {
      "trigger": "IsOpen",
      "contents": "IsOpen()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsOpen()"
    },
    {
      "trigger": "IsOpenListEmpty",
      "contents": "IsOpenListEmpty()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsOpenListEmpty()"
    },
    {
      "trigger": "IsOverlapping",
      "contents": "IsOverlapping(${1:Vector pos}, ${2:number tolerance = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsOverlapping(pos, tolerance)"
    },
    {
      "trigger": "IsOverlappingArea",
      "contents": "IsOverlappingArea(${1:CNavArea navArea})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsOverlappingArea(navArea)"
    },
    {
      "trigger": "IsPartiallyVisible",
      "contents": "IsPartiallyVisible(${1:Vector pos}, ${2:Entity ignoreEnt = NULL})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsPartiallyVisible(pos, ignoreEnt)"
    },
    {
      "trigger": "IsPotentiallyVisible",
      "contents": "IsPotentiallyVisible(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsPotentiallyVisible(area)"
    },
    {
      "trigger": "IsRoughlySquare",
      "contents": "IsRoughlySquare()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsRoughlySquare()"
    },
    {
      "trigger": "IsUnderwater",
      "contents": "IsUnderwater()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsUnderwater()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsValid()"
    },
    {
      "trigger": "IsVisible",
      "contents": "IsVisible(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:IsVisible(pos)"
    },
    {
      "trigger": "MarkAsBlocked",
      "contents": "MarkAsBlocked(${1:number teamID = -2})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:MarkAsBlocked(teamID)"
    },
    {
      "trigger": "MarkAsDamaging",
      "contents": "MarkAsDamaging(${1:number duration})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:MarkAsDamaging(duration)"
    },
    {
      "trigger": "MarkAsUnblocked",
      "contents": "MarkAsUnblocked(${1:number teamID = -2})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:MarkAsUnblocked(teamID)"
    },
    {
      "trigger": "PlaceOnGround",
      "contents": "PlaceOnGround(${1:number corner})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:PlaceOnGround(corner)"
    },
    {
      "trigger": "PopOpenList",
      "contents": "PopOpenList()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:PopOpenList()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:Remove()"
    },
    {
      "trigger": "RemoveAttributes",
      "contents": "RemoveAttributes(${1:number attribs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:RemoveAttributes(attribs)"
    },
    {
      "trigger": "RemoveFromClosedList",
      "contents": "RemoveFromClosedList()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:RemoveFromClosedList()"
    },
    {
      "trigger": "SetAttributes",
      "contents": "SetAttributes(${1:number attribs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetAttributes(attribs)"
    },
    {
      "trigger": "SetCorner",
      "contents": "SetCorner(${1:number corner}, ${2:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetCorner(corner, position)"
    },
    {
      "trigger": "SetCostSoFar",
      "contents": "SetCostSoFar(${1:number cost})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetCostSoFar(cost)"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:CNavArea parent}, ${2:number how})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetParent(parent, how)"
    },
    {
      "trigger": "SetPlace",
      "contents": "SetPlace(${1:string place})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetPlace(place)"
    },
    {
      "trigger": "SetTotalCost",
      "contents": "SetTotalCost(${1:number cost})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:SetTotalCost(cost)"
    },
    {
      "trigger": "UpdateOnOpenList",
      "contents": "UpdateOnOpenList()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavArea:UpdateOnOpenList()"
    },
    {
      "trigger": "ConnectTo",
      "contents": "ConnectTo(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:ConnectTo(area)"
    },
    {
      "trigger": "Disconnect",
      "contents": "Disconnect(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:Disconnect(area)"
    },
    {
      "trigger": "GetBottom",
      "contents": "GetBottom()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetBottom()"
    },
    {
      "trigger": "GetBottomArea",
      "contents": "GetBottomArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetBottomArea()"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetID()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetLength()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetNormal()"
    },
    {
      "trigger": "GetPosAtHeight",
      "contents": "GetPosAtHeight(${1:number height})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetPosAtHeight(height)"
    },
    {
      "trigger": "GetTop",
      "contents": "GetTop()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetTop()"
    },
    {
      "trigger": "GetTopBehindArea",
      "contents": "GetTopBehindArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetTopBehindArea()"
    },
    {
      "trigger": "GetTopForwardArea",
      "contents": "GetTopForwardArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetTopForwardArea()"
    },
    {
      "trigger": "GetTopLeftArea",
      "contents": "GetTopLeftArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetTopLeftArea()"
    },
    {
      "trigger": "GetTopRightArea",
      "contents": "GetTopRightArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetTopRightArea()"
    },
    {
      "trigger": "GetWidth",
      "contents": "GetWidth()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:GetWidth()"
    },
    {
      "trigger": "IsConnectedAtSide",
      "contents": "IsConnectedAtSide(${1:CNavArea navArea}, ${2:number navDirType})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:IsConnectedAtSide(navArea, navDirType)"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:IsValid()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:Remove()"
    },
    {
      "trigger": "SetBottomArea",
      "contents": "SetBottomArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:SetBottomArea(area)"
    },
    {
      "trigger": "SetTopBehindArea",
      "contents": "SetTopBehindArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:SetTopBehindArea(area)"
    },
    {
      "trigger": "SetTopForwardArea",
      "contents": "SetTopForwardArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:SetTopForwardArea(area)"
    },
    {
      "trigger": "SetTopLeftArea",
      "contents": "SetTopLeftArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:SetTopLeftArea(area)"
    },
    {
      "trigger": "SetTopRightArea",
      "contents": "SetTopRightArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNavLadder:SetTopRightArea(area)"
    },
    {
      "trigger": "AddControlPoint",
      "contents": "AddControlPoint(${1:number cpID}, ${2:Entity ent}, ${3:number partAttachment}, ${4:number entAttachment = 0}, ${5:Vector offset = Vector( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:AddControlPoint(cpID, ent, partAttachment, entAttachment, offset)"
    },
    {
      "trigger": "GetAutoUpdateBBox",
      "contents": "GetAutoUpdateBBox()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:GetAutoUpdateBBox()"
    },
    {
      "trigger": "GetEffectName",
      "contents": "GetEffectName()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:GetEffectName()"
    },
    {
      "trigger": "GetHighestControlPoint",
      "contents": "GetHighestControlPoint()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:GetHighestControlPoint()"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:GetOwner()"
    },
    {
      "trigger": "IsFinished",
      "contents": "IsFinished()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:IsFinished()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:IsValid()"
    },
    {
      "trigger": "IsViewModelEffect",
      "contents": "IsViewModelEffect()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:IsViewModelEffect()"
    },
    {
      "trigger": "Render",
      "contents": "Render()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:Render()"
    },
    {
      "trigger": "Restart",
      "contents": "Restart()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:Restart()"
    },
    {
      "trigger": "SetControlPoint",
      "contents": "SetControlPoint(${1:number cpID}, ${2:Vector value})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPoint(cpID, value)"
    },
    {
      "trigger": "SetControlPointEntity",
      "contents": "SetControlPointEntity(${1:number child}, ${2:Entity parent})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointEntity(child, parent)"
    },
    {
      "trigger": "SetControlPointForwardVector",
      "contents": "SetControlPointForwardVector(${1:number cpID}, ${2:Vector forward})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointForwardVector(cpID, forward)"
    },
    {
      "trigger": "SetControlPointOrientation",
      "contents": "SetControlPointOrientation(${1:number cpID}, ${2:Vector forward}, ${3:Vector right}, ${4:Vector up})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointOrientation(cpID, forward, right, up)"
    },
    {
      "trigger": "SetControlPointParent",
      "contents": "SetControlPointParent(${1:number child}, ${2:number parent})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointParent(child, parent)"
    },
    {
      "trigger": "SetControlPointRightVector",
      "contents": "SetControlPointRightVector(${1:number cpID}, ${2:Vector right})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointRightVector(cpID, right)"
    },
    {
      "trigger": "SetControlPointUpVector",
      "contents": "SetControlPointUpVector(${1:number cpID}, ${2:Vector upward})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetControlPointUpVector(cpID, upward)"
    },
    {
      "trigger": "SetIsViewModelEffect",
      "contents": "SetIsViewModelEffect(${1:boolean isViewModel})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetIsViewModelEffect(isViewModel)"
    },
    {
      "trigger": "SetShouldDraw",
      "contents": "SetShouldDraw(${1:boolean should})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetShouldDraw(should)"
    },
    {
      "trigger": "SetSortOrigin",
      "contents": "SetSortOrigin(${1:Vector origin})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:SetSortOrigin(origin)"
    },
    {
      "trigger": "StartEmission",
      "contents": "StartEmission(${1:boolean infiniteOnly = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:StartEmission(infiniteOnly)"
    },
    {
      "trigger": "StopEmission",
      "contents": "StopEmission(${1:boolean infiniteOnly = false}, ${2:boolean removeAllParticles = false}, ${3:boolean wakeOnStop = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:StopEmission(infiniteOnly, removeAllParticles, wakeOnStop)"
    },
    {
      "trigger": "StopEmissionAndDestroyImmediately",
      "contents": "StopEmissionAndDestroyImmediately()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CNewParticleEffect:StopEmissionAndDestroyImmediately()"
    },
    {
      "trigger": "SetUnpacked",
      "contents": "SetUnpacked(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:SetUnpacked(r, g, b, a)"
    },
    {
      "trigger": "ToHSL",
      "contents": "ToHSL()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:ToHSL()"
    },
    {
      "trigger": "ToHSV",
      "contents": "ToHSV()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:ToHSV()"
    },
    {
      "trigger": "ToTable",
      "contents": "ToTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:ToTable()"
    },
    {
      "trigger": "ToVector",
      "contents": "ToVector()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:ToVector()"
    },
    {
      "trigger": "Unpack",
      "contents": "Unpack()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Color:Unpack()"
    },
    {
      "trigger": "GetBool",
      "contents": "GetBool()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetBool()"
    },
    {
      "trigger": "GetDefault",
      "contents": "GetDefault()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetDefault()"
    },
    {
      "trigger": "GetFlags",
      "contents": "GetFlags()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetFlags()"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetFloat()"
    },
    {
      "trigger": "GetHelpText",
      "contents": "GetHelpText()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetHelpText()"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetInt()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetMin()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetName()"
    },
    {
      "trigger": "GetString",
      "contents": "GetString()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:GetString()"
    },
    {
      "trigger": "IsFlagSet",
      "contents": "IsFlagSet(${1:number flag})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:IsFlagSet(flag)"
    },
    {
      "trigger": "Revert",
      "contents": "Revert()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:Revert()"
    },
    {
      "trigger": "SetBool",
      "contents": "SetBool(${1:boolean value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:SetBool(value)"
    },
    {
      "trigger": "SetFloat",
      "contents": "SetFloat(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:SetFloat(value)"
    },
    {
      "trigger": "SetInt",
      "contents": "SetInt(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:SetInt(value)"
    },
    {
      "trigger": "SetString",
      "contents": "SetString(${1:string value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ConVar:SetString(value)"
    },
    {
      "trigger": "AddAllPlayers",
      "contents": "AddAllPlayers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddAllPlayers()"
    },
    {
      "trigger": "AddPAS",
      "contents": "AddPAS(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddPAS(pos)"
    },
    {
      "trigger": "AddPlayer",
      "contents": "AddPlayer(${1:Player Player})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddPlayer(Player)"
    },
    {
      "trigger": "AddPlayers",
      "contents": "AddPlayers(${1:CRecipientFilter input})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddPlayers(input)"
    },
    {
      "trigger": "AddPVS",
      "contents": "AddPVS(${1:Vector Position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddPVS(Position)"
    },
    {
      "trigger": "AddRecipientsByTeam",
      "contents": "AddRecipientsByTeam(${1:number teamid})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:AddRecipientsByTeam(teamid)"
    },
    {
      "trigger": "GetCount",
      "contents": "GetCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:GetCount()"
    },
    {
      "trigger": "GetPlayers",
      "contents": "GetPlayers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:GetPlayers()"
    },
    {
      "trigger": "RemoveAllPlayers",
      "contents": "RemoveAllPlayers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemoveAllPlayers()"
    },
    {
      "trigger": "RemoveMismatchedPlayers",
      "contents": "RemoveMismatchedPlayers(${1:CRecipientFilter input})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemoveMismatchedPlayers(input)"
    },
    {
      "trigger": "RemovePAS",
      "contents": "RemovePAS(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemovePAS(position)"
    },
    {
      "trigger": "RemovePlayer",
      "contents": "RemovePlayer(${1:Player Player})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemovePlayer(Player)"
    },
    {
      "trigger": "RemovePlayers",
      "contents": "RemovePlayers(${1:CRecipientFilter input})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemovePlayers(input)"
    },
    {
      "trigger": "RemovePVS",
      "contents": "RemovePVS(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemovePVS(pos)"
    },
    {
      "trigger": "RemoveRecipientsByTeam",
      "contents": "RemoveRecipientsByTeam(${1:number teamid})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemoveRecipientsByTeam(teamid)"
    },
    {
      "trigger": "RemoveRecipientsNotOnTeam",
      "contents": "RemoveRecipientsNotOnTeam(${1:number teamid})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CRecipientFilter:RemoveRecipientsNotOnTeam(teamid)"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSEnt:Remove()"
    },
    {
      "trigger": "ChangePitch",
      "contents": "ChangePitch(${1:number pitch}, ${2:number deltaTime = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:ChangePitch(pitch, deltaTime)"
    },
    {
      "trigger": "ChangeVolume",
      "contents": "ChangeVolume(${1:number volume}, ${2:number deltaTime = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:ChangeVolume(volume, deltaTime)"
    },
    {
      "trigger": "FadeOut",
      "contents": "FadeOut(${1:number seconds})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:FadeOut(seconds)"
    },
    {
      "trigger": "GetDSP",
      "contents": "GetDSP()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:GetDSP()"
    },
    {
      "trigger": "GetPitch",
      "contents": "GetPitch()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:GetPitch()"
    },
    {
      "trigger": "GetSoundLevel",
      "contents": "GetSoundLevel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:GetSoundLevel()"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:GetVolume()"
    },
    {
      "trigger": "IsPlaying",
      "contents": "IsPlaying()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:IsPlaying()"
    },
    {
      "trigger": "Play",
      "contents": "Play()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:Play()"
    },
    {
      "trigger": "PlayEx",
      "contents": "PlayEx(${1:number volume}, ${2:number pitch})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:PlayEx(volume, pitch)"
    },
    {
      "trigger": "SetDSP",
      "contents": "SetDSP(${1:number dsp})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:SetDSP(dsp)"
    },
    {
      "trigger": "SetSoundLevel",
      "contents": "SetSoundLevel(${1:number level})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:SetSoundLevel(level)"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CSoundPatch:Stop()"
    },
    {
      "trigger": "AddDamage",
      "contents": "AddDamage(${1:number damageIncrease})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:AddDamage(damageIncrease)"
    },
    {
      "trigger": "GetAmmoType",
      "contents": "GetAmmoType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetAmmoType()"
    },
    {
      "trigger": "GetAttacker",
      "contents": "GetAttacker()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetAttacker()"
    },
    {
      "trigger": "GetBaseDamage",
      "contents": "GetBaseDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetBaseDamage()"
    },
    {
      "trigger": "GetDamage",
      "contents": "GetDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamage()"
    },
    {
      "trigger": "GetDamageBonus",
      "contents": "GetDamageBonus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamageBonus()"
    },
    {
      "trigger": "GetDamageCustom",
      "contents": "GetDamageCustom()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamageCustom()"
    },
    {
      "trigger": "GetDamageForce",
      "contents": "GetDamageForce()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamageForce()"
    },
    {
      "trigger": "GetDamagePosition",
      "contents": "GetDamagePosition()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamagePosition()"
    },
    {
      "trigger": "GetDamageType",
      "contents": "GetDamageType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetDamageType()"
    },
    {
      "trigger": "GetInflictor",
      "contents": "GetInflictor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetInflictor()"
    },
    {
      "trigger": "GetMaxDamage",
      "contents": "GetMaxDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetMaxDamage()"
    },
    {
      "trigger": "GetReportedPosition",
      "contents": "GetReportedPosition()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:GetReportedPosition()"
    },
    {
      "trigger": "IsBulletDamage",
      "contents": "IsBulletDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:IsBulletDamage()"
    },
    {
      "trigger": "IsDamageType",
      "contents": "IsDamageType(${1:number dmgType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:IsDamageType(dmgType)"
    },
    {
      "trigger": "IsExplosionDamage",
      "contents": "IsExplosionDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:IsExplosionDamage()"
    },
    {
      "trigger": "IsFallDamage",
      "contents": "IsFallDamage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:IsFallDamage()"
    },
    {
      "trigger": "ScaleDamage",
      "contents": "ScaleDamage(${1:number scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:ScaleDamage(scale)"
    },
    {
      "trigger": "SetAmmoType",
      "contents": "SetAmmoType(${1:number ammoType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetAmmoType(ammoType)"
    },
    {
      "trigger": "SetAttacker",
      "contents": "SetAttacker(${1:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetAttacker(ent)"
    },
    {
      "trigger": "SetBaseDamage",
      "contents": "SetBaseDamage(${1:number })",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetBaseDamage()"
    },
    {
      "trigger": "SetDamage",
      "contents": "SetDamage(${1:number damage})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamage(damage)"
    },
    {
      "trigger": "SetDamageBonus",
      "contents": "SetDamageBonus(${1:number damage})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamageBonus(damage)"
    },
    {
      "trigger": "SetDamageCustom",
      "contents": "SetDamageCustom(${1:number DamageType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamageCustom(DamageType)"
    },
    {
      "trigger": "SetDamageForce",
      "contents": "SetDamageForce(${1:Vector force})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamageForce(force)"
    },
    {
      "trigger": "SetDamagePosition",
      "contents": "SetDamagePosition(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamagePosition(pos)"
    },
    {
      "trigger": "SetDamageType",
      "contents": "SetDamageType(${1:number type})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetDamageType(type)"
    },
    {
      "trigger": "SetInflictor",
      "contents": "SetInflictor(${1:Entity inflictor})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetInflictor(inflictor)"
    },
    {
      "trigger": "SetMaxDamage",
      "contents": "SetMaxDamage(${1:number maxDamage})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetMaxDamage(maxDamage)"
    },
    {
      "trigger": "SetReportedPosition",
      "contents": "SetReportedPosition(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SetReportedPosition(pos)"
    },
    {
      "trigger": "SubtractDamage",
      "contents": "SubtractDamage(${1:number damage})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CTakeDamageInfo:SubtractDamage(damage)"
    },
    {
      "trigger": "AddKey",
      "contents": "AddKey(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:AddKey(key)"
    },
    {
      "trigger": "ClearButtons",
      "contents": "ClearButtons()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:ClearButtons()"
    },
    {
      "trigger": "ClearMovement",
      "contents": "ClearMovement()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:ClearMovement()"
    },
    {
      "trigger": "CommandNumber",
      "contents": "CommandNumber()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:CommandNumber()"
    },
    {
      "trigger": "GetButtons",
      "contents": "GetButtons()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetButtons()"
    },
    {
      "trigger": "GetForwardMove",
      "contents": "GetForwardMove()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetForwardMove()"
    },
    {
      "trigger": "GetImpulse",
      "contents": "GetImpulse()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetImpulse()"
    },
    {
      "trigger": "GetMouseWheel",
      "contents": "GetMouseWheel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetMouseWheel()"
    },
    {
      "trigger": "GetMouseX",
      "contents": "GetMouseX()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetMouseX()"
    },
    {
      "trigger": "GetMouseY",
      "contents": "GetMouseY()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetMouseY()"
    },
    {
      "trigger": "GetSideMove",
      "contents": "GetSideMove()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetSideMove()"
    },
    {
      "trigger": "GetUpMove",
      "contents": "GetUpMove()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetUpMove()"
    },
    {
      "trigger": "GetViewAngles",
      "contents": "GetViewAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:GetViewAngles()"
    },
    {
      "trigger": "IsForced",
      "contents": "IsForced()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:IsForced()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:KeyDown(key)"
    },
    {
      "trigger": "RemoveKey",
      "contents": "RemoveKey(${1:number button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:RemoveKey(button)"
    },
    {
      "trigger": "SelectWeapon",
      "contents": "SelectWeapon(${1:Weapon weapon})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SelectWeapon(weapon)"
    },
    {
      "trigger": "SetButtons",
      "contents": "SetButtons(${1:number buttons})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetButtons(buttons)"
    },
    {
      "trigger": "SetForwardMove",
      "contents": "SetForwardMove(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetForwardMove(speed)"
    },
    {
      "trigger": "SetImpulse",
      "contents": "SetImpulse(${1:number impulse})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetImpulse(impulse)"
    },
    {
      "trigger": "SetMouseWheel",
      "contents": "SetMouseWheel(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetMouseWheel(speed)"
    },
    {
      "trigger": "SetMouseX",
      "contents": "SetMouseX(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetMouseX(speed)"
    },
    {
      "trigger": "SetMouseY",
      "contents": "SetMouseY(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetMouseY(speed)"
    },
    {
      "trigger": "SetSideMove",
      "contents": "SetSideMove(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetSideMove(speed)"
    },
    {
      "trigger": "SetUpMove",
      "contents": "SetUpMove(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetUpMove(speed)"
    },
    {
      "trigger": "SetViewAngles",
      "contents": "SetViewAngles(${1:Angle viewAngle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:SetViewAngles(viewAngle)"
    },
    {
      "trigger": "TickCount",
      "contents": "TickCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "CUserCmd:TickCount()"
    },
    {
      "trigger": "Activate",
      "contents": "Activate()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Activate()"
    },
    {
      "trigger": "AddCallback",
      "contents": "AddCallback(${1:string hook}, ${2:function func})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddCallback(hook, func)"
    },
    {
      "trigger": "AddEffects",
      "contents": "AddEffects(${1:number effect})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddEffects(effect)"
    },
    {
      "trigger": "AddEFlags",
      "contents": "AddEFlags(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddEFlags(flag)"
    },
    {
      "trigger": "AddFlags",
      "contents": "AddFlags(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddFlags(flag)"
    },
    {
      "trigger": "AddGesture",
      "contents": "AddGesture(${1:number activity}, ${2:boolean autokill = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddGesture(activity, autokill)"
    },
    {
      "trigger": "AddGestureSequence",
      "contents": "AddGestureSequence(${1:number sequence}, ${2:boolean autokill = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddGestureSequence(sequence, autokill)"
    },
    {
      "trigger": "AddLayeredSequence",
      "contents": "AddLayeredSequence(${1:number sequence}, ${2:number priority})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddLayeredSequence(sequence, priority)"
    },
    {
      "trigger": "AddSolidFlags",
      "contents": "AddSolidFlags(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddSolidFlags(flags)"
    },
    {
      "trigger": "AddToMotionController",
      "contents": "AddToMotionController(${1:PhysObj physObj})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AddToMotionController(physObj)"
    },
    {
      "trigger": "AlignAngles",
      "contents": "AlignAngles(${1:Angle from}, ${2:Angle to})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:AlignAngles(from, to)"
    },
    {
      "trigger": "BecomeRagdollOnClient",
      "contents": "BecomeRagdollOnClient()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BecomeRagdollOnClient()"
    },
    {
      "trigger": "BeingLookedAtByLocalPlayer",
      "contents": "BeingLookedAtByLocalPlayer()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BeingLookedAtByLocalPlayer()"
    },
    {
      "trigger": "Blocked",
      "contents": "Blocked(${1:Entity entity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Blocked(entity)"
    },
    {
      "trigger": "BodyTarget",
      "contents": "BodyTarget(${1:Vector origin}, ${2:boolean noisy = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BodyTarget(origin, noisy)"
    },
    {
      "trigger": "BoneHasFlag",
      "contents": "BoneHasFlag(${1:number boneID}, ${2:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BoneHasFlag(boneID, flag)"
    },
    {
      "trigger": "BoneLength",
      "contents": "BoneLength(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BoneLength(boneID)"
    },
    {
      "trigger": "BoundingRadius",
      "contents": "BoundingRadius()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:BoundingRadius()"
    },
    {
      "trigger": "CallDTVarProxies",
      "contents": "CallDTVarProxies(${1:string Type}, ${2:number index}, ${3:any new value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CallDTVarProxies(Type, index, new value)"
    },
    {
      "trigger": "CallOnRemove",
      "contents": "CallOnRemove(${1:string identifier}, ${2:function removeFunc}, ${3:vararg args})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CallOnRemove(identifier, removeFunc, args)"
    },
    {
      "trigger": "ClearAllOutputs",
      "contents": "ClearAllOutputs(${1:string outputName = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ClearAllOutputs(outputName)"
    },
    {
      "trigger": "ClearPoseParameters",
      "contents": "ClearPoseParameters()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ClearPoseParameters()"
    },
    {
      "trigger": "CollisionRulesChanged",
      "contents": "CollisionRulesChanged()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CollisionRulesChanged()"
    },
    {
      "trigger": "CreateBoneFollowers",
      "contents": "CreateBoneFollowers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CreateBoneFollowers()"
    },
    {
      "trigger": "CreatedByMap",
      "contents": "CreatedByMap()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CreatedByMap()"
    },
    {
      "trigger": "CreateParticleEffect",
      "contents": "CreateParticleEffect(${1:string particle}, ${2:number attachment}, ${3:table options = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CreateParticleEffect(particle, attachment, options)"
    },
    {
      "trigger": "CreateShadow",
      "contents": "CreateShadow()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:CreateShadow()"
    },
    {
      "trigger": "DeleteOnRemove",
      "contents": "DeleteOnRemove(${1:Entity entityToRemove})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DeleteOnRemove(entityToRemove)"
    },
    {
      "trigger": "DestroyBoneFollowers",
      "contents": "DestroyBoneFollowers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DestroyBoneFollowers()"
    },
    {
      "trigger": "DestroyShadow",
      "contents": "DestroyShadow()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DestroyShadow()"
    },
    {
      "trigger": "DisableMatrix",
      "contents": "DisableMatrix(${1:string matrixType})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DisableMatrix(matrixType)"
    },
    {
      "trigger": "DispatchTraceAttack",
      "contents": "DispatchTraceAttack(${1:CTakeDamageInfo damageInfo}, ${2:table traceRes}, ${3:Vector dir = traceRes.HitNormal})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DispatchTraceAttack(damageInfo, traceRes, dir)"
    },
    {
      "trigger": "DontDeleteOnRemove",
      "contents": "DontDeleteOnRemove(${1:Entity entityToUnremove})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DontDeleteOnRemove(entityToUnremove)"
    },
    {
      "trigger": "DrawModel",
      "contents": "DrawModel(${1:number flags = STUDIO_RENDER})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DrawModel(flags)"
    },
    {
      "trigger": "DrawShadow",
      "contents": "DrawShadow(${1:boolean shouldDraw})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DrawShadow(shouldDraw)"
    },
    {
      "trigger": "DropToFloor",
      "contents": "DropToFloor()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DropToFloor()"
    },
    {
      "trigger": "DTVar",
      "contents": "DTVar(${1:string Type}, ${2:number ID}, ${3:string Name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:DTVar(Type, ID, Name)"
    },
    {
      "trigger": "EmitSound",
      "contents": "EmitSound(${1:string soundName}, ${2:number soundLevel = 75}, ${3:number pitchPercent = 100}, ${4:number volume = 1}, ${5:number channel = CHAN_AUTO, CHAN_WEAPON for weapons}, ${6:number soundFlags = 0}, ${7:number dsp = 0}, ${8:CRecipientFilter filter = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EmitSound(soundName, soundLevel, pitchPercent, volume, channel, soundFlags, dsp, filter)"
    },
    {
      "trigger": "EnableConstraints",
      "contents": "EnableConstraints(${1:boolean toggleConstraints})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EnableConstraints(toggleConstraints)"
    },
    {
      "trigger": "EnableCustomCollisions",
      "contents": "EnableCustomCollisions(${1:boolean useCustom})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EnableCustomCollisions(useCustom)"
    },
    {
      "trigger": "EnableMatrix",
      "contents": "EnableMatrix(${1:string matrixType}, ${2:VMatrix matrix})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EnableMatrix(matrixType, matrix)"
    },
    {
      "trigger": "EntIndex",
      "contents": "EntIndex()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EntIndex()"
    },
    {
      "trigger": "Extinguish",
      "contents": "Extinguish()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Extinguish()"
    },
    {
      "trigger": "EyeAngles",
      "contents": "EyeAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EyeAngles()"
    },
    {
      "trigger": "EyePos",
      "contents": "EyePos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:EyePos()"
    },
    {
      "trigger": "FindBodygroupByName",
      "contents": "FindBodygroupByName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:FindBodygroupByName(name)"
    },
    {
      "trigger": "FindTransitionSequence",
      "contents": "FindTransitionSequence(${1:number currentSequence}, ${2:number goalSequence})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:FindTransitionSequence(currentSequence, goalSequence)"
    },
    {
      "trigger": "Fire",
      "contents": "Fire(${1:string input}, ${2:string param = nil}, ${3:number delay = 0}, ${4:Entity activator = nil}, ${5:Entity caller = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Fire(input, param, delay, activator, caller)"
    },
    {
      "trigger": "FireBullets",
      "contents": "FireBullets(${1:table bulletInfo}, ${2:boolean suppressHostEvents = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:FireBullets(bulletInfo, suppressHostEvents)"
    },
    {
      "trigger": "FollowBone",
      "contents": "FollowBone(${1:Entity parent = NULL}, ${2:number boneid})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:FollowBone(parent, boneid)"
    },
    {
      "trigger": "ForcePlayerDrop",
      "contents": "ForcePlayerDrop()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ForcePlayerDrop()"
    },
    {
      "trigger": "FrameAdvance",
      "contents": "FrameAdvance()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:FrameAdvance()"
    },
    {
      "trigger": "GetAbsVelocity",
      "contents": "GetAbsVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAbsVelocity()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAngles()"
    },
    {
      "trigger": "GetAnimCount",
      "contents": "GetAnimCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAnimCount()"
    },
    {
      "trigger": "GetAnimInfo",
      "contents": "GetAnimInfo(${1:number animIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAnimInfo(animIndex)"
    },
    {
      "trigger": "GetAnimTime",
      "contents": "GetAnimTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAnimTime()"
    },
    {
      "trigger": "GetAnimTimeInterval",
      "contents": "GetAnimTimeInterval()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAnimTimeInterval()"
    },
    {
      "trigger": "GetAttachment",
      "contents": "GetAttachment(${1:number attachmentId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAttachment(attachmentId)"
    },
    {
      "trigger": "GetAttachments",
      "contents": "GetAttachments()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetAttachments()"
    },
    {
      "trigger": "GetBaseVelocity",
      "contents": "GetBaseVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBaseVelocity()"
    },
    {
      "trigger": "GetBloodColor",
      "contents": "GetBloodColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBloodColor()"
    },
    {
      "trigger": "GetBodygroup",
      "contents": "GetBodygroup(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBodygroup(id)"
    },
    {
      "trigger": "GetBodygroupCount",
      "contents": "GetBodygroupCount(${1:number bodygroup})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBodygroupCount(bodygroup)"
    },
    {
      "trigger": "GetBodygroupName",
      "contents": "GetBodygroupName(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBodygroupName(id)"
    },
    {
      "trigger": "GetBodyGroups",
      "contents": "GetBodyGroups()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBodyGroups()"
    },
    {
      "trigger": "GetBoneContents",
      "contents": "GetBoneContents(${1:number bone})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneContents(bone)"
    },
    {
      "trigger": "GetBoneController",
      "contents": "GetBoneController(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneController(boneID)"
    },
    {
      "trigger": "GetBoneCount",
      "contents": "GetBoneCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneCount()"
    },
    {
      "trigger": "GetBoneMatrix",
      "contents": "GetBoneMatrix(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneMatrix(boneID)"
    },
    {
      "trigger": "GetBoneName",
      "contents": "GetBoneName(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneName(index)"
    },
    {
      "trigger": "GetBoneParent",
      "contents": "GetBoneParent(${1:number bone})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneParent(bone)"
    },
    {
      "trigger": "GetBonePosition",
      "contents": "GetBonePosition(${1:number boneIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBonePosition(boneIndex)"
    },
    {
      "trigger": "GetBoneSurfaceProp",
      "contents": "GetBoneSurfaceProp(${1:number bone})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBoneSurfaceProp(bone)"
    },
    {
      "trigger": "GetBrushPlane",
      "contents": "GetBrushPlane(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBrushPlane(id)"
    },
    {
      "trigger": "GetBrushPlaneCount",
      "contents": "GetBrushPlaneCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBrushPlaneCount()"
    },
    {
      "trigger": "GetBrushSurfaces",
      "contents": "GetBrushSurfaces()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetBrushSurfaces()"
    },
    {
      "trigger": "GetCallbacks",
      "contents": "GetCallbacks(${1:string hook})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCallbacks(hook)"
    },
    {
      "trigger": "GetChildBones",
      "contents": "GetChildBones(${1:number boneid})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetChildBones(boneid)"
    },
    {
      "trigger": "GetChildren",
      "contents": "GetChildren()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetChildren()"
    },
    {
      "trigger": "GetClass",
      "contents": "GetClass()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetClass()"
    },
    {
      "trigger": "GetCollisionBounds",
      "contents": "GetCollisionBounds()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCollisionBounds()"
    },
    {
      "trigger": "GetCollisionGroup",
      "contents": "GetCollisionGroup()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCollisionGroup()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetColor()"
    },
    {
      "trigger": "GetColor4Part",
      "contents": "GetColor4Part()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetColor4Part()"
    },
    {
      "trigger": "GetConstrainedEntities",
      "contents": "GetConstrainedEntities()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetConstrainedEntities()"
    },
    {
      "trigger": "GetConstrainedPhysObjects",
      "contents": "GetConstrainedPhysObjects()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetConstrainedPhysObjects()"
    },
    {
      "trigger": "GetCreationID",
      "contents": "GetCreationID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCreationID()"
    },
    {
      "trigger": "GetCreationTime",
      "contents": "GetCreationTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCreationTime()"
    },
    {
      "trigger": "GetCreator",
      "contents": "GetCreator()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCreator()"
    },
    {
      "trigger": "GetCustomCollisionCheck",
      "contents": "GetCustomCollisionCheck()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCustomCollisionCheck()"
    },
    {
      "trigger": "GetCycle",
      "contents": "GetCycle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetCycle()"
    },
    {
      "trigger": "GetDTAngle",
      "contents": "GetDTAngle(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTAngle(key)"
    },
    {
      "trigger": "GetDTBool",
      "contents": "GetDTBool(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTBool(key)"
    },
    {
      "trigger": "GetDTEntity",
      "contents": "GetDTEntity(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTEntity(key)"
    },
    {
      "trigger": "GetDTFloat",
      "contents": "GetDTFloat(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTFloat(key)"
    },
    {
      "trigger": "GetDTInt",
      "contents": "GetDTInt(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTInt(key)"
    },
    {
      "trigger": "GetDTString",
      "contents": "GetDTString(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTString(key)"
    },
    {
      "trigger": "GetDTVector",
      "contents": "GetDTVector(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetDTVector(key)"
    },
    {
      "trigger": "GetEditingData",
      "contents": "GetEditingData()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetEditingData()"
    },
    {
      "trigger": "GetEffects",
      "contents": "GetEffects()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetEffects()"
    },
    {
      "trigger": "GetEFlags",
      "contents": "GetEFlags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetEFlags()"
    },
    {
      "trigger": "GetElasticity",
      "contents": "GetElasticity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetElasticity()"
    },
    {
      "trigger": "GetFlags",
      "contents": "GetFlags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlags()"
    },
    {
      "trigger": "GetFlexBounds",
      "contents": "GetFlexBounds(${1:number flex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexBounds(flex)"
    },
    {
      "trigger": "GetFlexIDByName",
      "contents": "GetFlexIDByName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexIDByName(name)"
    },
    {
      "trigger": "GetFlexName",
      "contents": "GetFlexName(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexName(id)"
    },
    {
      "trigger": "GetFlexNum",
      "contents": "GetFlexNum()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexNum()"
    },
    {
      "trigger": "GetFlexScale",
      "contents": "GetFlexScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexScale()"
    },
    {
      "trigger": "GetFlexWeight",
      "contents": "GetFlexWeight(${1:number flex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFlexWeight(flex)"
    },
    {
      "trigger": "GetForward",
      "contents": "GetForward()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetForward()"
    },
    {
      "trigger": "GetFriction",
      "contents": "GetFriction()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetFriction()"
    },
    {
      "trigger": "GetGravity",
      "contents": "GetGravity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetGravity()"
    },
    {
      "trigger": "GetGroundEntity",
      "contents": "GetGroundEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetGroundEntity()"
    },
    {
      "trigger": "GetGroundSpeedVelocity",
      "contents": "GetGroundSpeedVelocity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetGroundSpeedVelocity()"
    },
    {
      "trigger": "GetHitBoxBone",
      "contents": "GetHitBoxBone(${1:number hitbox}, ${2:number hboxset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitBoxBone(hitbox, hboxset)"
    },
    {
      "trigger": "GetHitBoxBounds",
      "contents": "GetHitBoxBounds(${1:number hitbox}, ${2:number set})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitBoxBounds(hitbox, set)"
    },
    {
      "trigger": "GetHitBoxCount",
      "contents": "GetHitBoxCount(${1:number set})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitBoxCount(set)"
    },
    {
      "trigger": "GetHitBoxGroupCount",
      "contents": "GetHitBoxGroupCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitBoxGroupCount()"
    },
    {
      "trigger": "GetHitBoxHitGroup",
      "contents": "GetHitBoxHitGroup(${1:number hitbox}, ${2:number hitboxset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitBoxHitGroup(hitbox, hitboxset)"
    },
    {
      "trigger": "GetHitboxSet",
      "contents": "GetHitboxSet()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitboxSet()"
    },
    {
      "trigger": "GetHitboxSetCount",
      "contents": "GetHitboxSetCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetHitboxSetCount()"
    },
    {
      "trigger": "GetInternalVariable",
      "contents": "GetInternalVariable(${1:string variableName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetInternalVariable(variableName)"
    },
    {
      "trigger": "GetKeyValues",
      "contents": "GetKeyValues()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetKeyValues()"
    },
    {
      "trigger": "GetLayerCycle",
      "contents": "GetLayerCycle(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLayerCycle(layerID)"
    },
    {
      "trigger": "GetLayerDuration",
      "contents": "GetLayerDuration(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLayerDuration(layerID)"
    },
    {
      "trigger": "GetLayerPlaybackRate",
      "contents": "GetLayerPlaybackRate(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLayerPlaybackRate(layerID)"
    },
    {
      "trigger": "GetLayerSequence",
      "contents": "GetLayerSequence(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLayerSequence(layerID)"
    },
    {
      "trigger": "GetLayerWeight",
      "contents": "GetLayerWeight(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLayerWeight(layerID)"
    },
    {
      "trigger": "GetLightingOriginEntity",
      "contents": "GetLightingOriginEntity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLightingOriginEntity()"
    },
    {
      "trigger": "GetLocalAngles",
      "contents": "GetLocalAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLocalAngles()"
    },
    {
      "trigger": "GetLocalAngularVelocity",
      "contents": "GetLocalAngularVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLocalAngularVelocity()"
    },
    {
      "trigger": "GetLocalPos",
      "contents": "GetLocalPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetLocalPos()"
    },
    {
      "trigger": "GetManipulateBoneAngles",
      "contents": "GetManipulateBoneAngles(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetManipulateBoneAngles(boneID)"
    },
    {
      "trigger": "GetManipulateBoneJiggle",
      "contents": "GetManipulateBoneJiggle(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetManipulateBoneJiggle(boneID)"
    },
    {
      "trigger": "GetManipulateBonePosition",
      "contents": "GetManipulateBonePosition(${1:number boneId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetManipulateBonePosition(boneId)"
    },
    {
      "trigger": "GetManipulateBoneScale",
      "contents": "GetManipulateBoneScale(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetManipulateBoneScale(boneID)"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMaterial()"
    },
    {
      "trigger": "GetMaterials",
      "contents": "GetMaterials()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMaterials()"
    },
    {
      "trigger": "GetMaterialType",
      "contents": "GetMaterialType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMaterialType()"
    },
    {
      "trigger": "GetMaxHealth",
      "contents": "GetMaxHealth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMaxHealth()"
    },
    {
      "trigger": "GetModel",
      "contents": "GetModel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModel()"
    },
    {
      "trigger": "GetModelBounds",
      "contents": "GetModelBounds()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelBounds()"
    },
    {
      "trigger": "GetModelContents",
      "contents": "GetModelContents()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelContents()"
    },
    {
      "trigger": "GetModelPhysBoneCount",
      "contents": "GetModelPhysBoneCount()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelPhysBoneCount()"
    },
    {
      "trigger": "GetModelRadius",
      "contents": "GetModelRadius()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelRadius()"
    },
    {
      "trigger": "GetModelRenderBounds",
      "contents": "GetModelRenderBounds()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelRenderBounds()"
    },
    {
      "trigger": "GetModelScale",
      "contents": "GetModelScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetModelScale()"
    },
    {
      "trigger": "GetMomentaryRotButtonPos",
      "contents": "GetMomentaryRotButtonPos(${1:Angle turnAngle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMomentaryRotButtonPos(turnAngle)"
    },
    {
      "trigger": "GetMoveCollide",
      "contents": "GetMoveCollide()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMoveCollide()"
    },
    {
      "trigger": "GetMoveParent",
      "contents": "GetMoveParent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMoveParent()"
    },
    {
      "trigger": "GetMoveType",
      "contents": "GetMoveType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetMoveType()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetName()"
    },
    {
      "trigger": "GetNetworkAngles",
      "contents": "GetNetworkAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkAngles()"
    },
    {
      "trigger": "GetNetworked2Angle",
      "contents": "GetNetworked2Angle(${1:string key}, ${2:any fallback = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Angle(key, fallback)"
    },
    {
      "trigger": "GetNetworked2Bool",
      "contents": "GetNetworked2Bool(${1:string key}, ${2:any fallback = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Bool(key, fallback)"
    },
    {
      "trigger": "GetNetworked2Entity",
      "contents": "GetNetworked2Entity(${1:string key}, ${2:any fallback = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Entity(key, fallback)"
    },
    {
      "trigger": "GetNetworked2Float",
      "contents": "GetNetworked2Float(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Float(key, fallback)"
    },
    {
      "trigger": "GetNetworked2Int",
      "contents": "GetNetworked2Int(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Int(key, fallback)"
    },
    {
      "trigger": "GetNetworked2String",
      "contents": "GetNetworked2String(${1:string key}, ${2:any fallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2String(key, fallback)"
    },
    {
      "trigger": "GetNetworked2Var",
      "contents": "GetNetworked2Var(${1:string key}, ${2:any fallback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Var(key, fallback)"
    },
    {
      "trigger": "GetNetworked2VarProxy",
      "contents": "GetNetworked2VarProxy(${1:any key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2VarProxy(key)"
    },
    {
      "trigger": "GetNetworked2VarTable",
      "contents": "GetNetworked2VarTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2VarTable()"
    },
    {
      "trigger": "GetNetworked2Vector",
      "contents": "GetNetworked2Vector(${1:string key}, ${2:any fallback = Vector( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworked2Vector(key, fallback)"
    },
    {
      "trigger": "GetNetworkedAngle",
      "contents": "GetNetworkedAngle(${1:string key}, ${2:Angle fallback = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedAngle(key, fallback)"
    },
    {
      "trigger": "GetNetworkedBool",
      "contents": "GetNetworkedBool(${1:string key}, ${2:boolean fallback = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedBool(key, fallback)"
    },
    {
      "trigger": "GetNetworkedEntity",
      "contents": "GetNetworkedEntity(${1:string key}, ${2:Entity fallback = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedEntity(key, fallback)"
    },
    {
      "trigger": "GetNetworkedFloat",
      "contents": "GetNetworkedFloat(${1:string key}, ${2:number fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedFloat(key, fallback)"
    },
    {
      "trigger": "GetNetworkedInt",
      "contents": "GetNetworkedInt(${1:string key}, ${2:number fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedInt(key, fallback)"
    },
    {
      "trigger": "GetNetworkedString",
      "contents": "GetNetworkedString(${1:string key}, ${2:string fallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedString(key, fallback)"
    },
    {
      "trigger": "GetNetworkedVar",
      "contents": "GetNetworkedVar(${1:string key}, ${2:any fallback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedVar(key, fallback)"
    },
    {
      "trigger": "GetNetworkedVarProxy",
      "contents": "GetNetworkedVarProxy(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedVarProxy(name)"
    },
    {
      "trigger": "GetNetworkedVarTable",
      "contents": "GetNetworkedVarTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedVarTable()"
    },
    {
      "trigger": "GetNetworkedVector",
      "contents": "GetNetworkedVector(${1:string key}, ${2:Vector fallback = Vector( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkedVector(key, fallback)"
    },
    {
      "trigger": "GetNetworkOrigin",
      "contents": "GetNetworkOrigin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkOrigin()"
    },
    {
      "trigger": "GetNetworkVars",
      "contents": "GetNetworkVars()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNetworkVars()"
    },
    {
      "trigger": "GetNoDraw",
      "contents": "GetNoDraw()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNoDraw()"
    },
    {
      "trigger": "GetNumBodyGroups",
      "contents": "GetNumBodyGroups()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNumBodyGroups()"
    },
    {
      "trigger": "GetNumPoseParameters",
      "contents": "GetNumPoseParameters()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNumPoseParameters()"
    },
    {
      "trigger": "GetNW2Angle",
      "contents": "GetNW2Angle(${1:string key}, ${2:any fallback = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Angle(key, fallback)"
    },
    {
      "trigger": "GetNW2Bool",
      "contents": "GetNW2Bool(${1:string key}, ${2:any fallback = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Bool(key, fallback)"
    },
    {
      "trigger": "GetNW2Entity",
      "contents": "GetNW2Entity(${1:string key}, ${2:any fallback = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Entity(key, fallback)"
    },
    {
      "trigger": "GetNW2Float",
      "contents": "GetNW2Float(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Float(key, fallback)"
    },
    {
      "trigger": "GetNW2Int",
      "contents": "GetNW2Int(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Int(key, fallback)"
    },
    {
      "trigger": "GetNW2String",
      "contents": "GetNW2String(${1:string key}, ${2:any fallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2String(key, fallback)"
    },
    {
      "trigger": "GetNW2Var",
      "contents": "GetNW2Var(${1:string key}, ${2:any fallback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Var(key, fallback)"
    },
    {
      "trigger": "GetNW2VarProxy",
      "contents": "GetNW2VarProxy(${1:any key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2VarProxy(key)"
    },
    {
      "trigger": "GetNW2VarTable",
      "contents": "GetNW2VarTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2VarTable()"
    },
    {
      "trigger": "GetNW2Vector",
      "contents": "GetNW2Vector(${1:string key}, ${2:any fallback = Vector( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNW2Vector(key, fallback)"
    },
    {
      "trigger": "GetNWAngle",
      "contents": "GetNWAngle(${1:string key}, ${2:any fallback = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWAngle(key, fallback)"
    },
    {
      "trigger": "GetNWBool",
      "contents": "GetNWBool(${1:string key}, ${2:any fallback = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWBool(key, fallback)"
    },
    {
      "trigger": "GetNWEntity",
      "contents": "GetNWEntity(${1:string key}, ${2:any fallback = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWEntity(key, fallback)"
    },
    {
      "trigger": "GetNWFloat",
      "contents": "GetNWFloat(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWFloat(key, fallback)"
    },
    {
      "trigger": "GetNWInt",
      "contents": "GetNWInt(${1:string key}, ${2:any fallback = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWInt(key, fallback)"
    },
    {
      "trigger": "GetNWString",
      "contents": "GetNWString(${1:string key}, ${2:any fallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWString(key, fallback)"
    },
    {
      "trigger": "GetNWVarProxy",
      "contents": "GetNWVarProxy(${1:any key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWVarProxy(key)"
    },
    {
      "trigger": "GetNWVarTable",
      "contents": "GetNWVarTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWVarTable()"
    },
    {
      "trigger": "GetNWVector",
      "contents": "GetNWVector(${1:string key}, ${2:any fallback = Vector( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetNWVector(key, fallback)"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetOwner()"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetParent()"
    },
    {
      "trigger": "GetParentAttachment",
      "contents": "GetParentAttachment()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetParentAttachment()"
    },
    {
      "trigger": "GetParentPhysNum",
      "contents": "GetParentPhysNum()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetParentPhysNum()"
    },
    {
      "trigger": "GetParentWorldTransformMatrix",
      "contents": "GetParentWorldTransformMatrix()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetParentWorldTransformMatrix()"
    },
    {
      "trigger": "GetPersistent",
      "contents": "GetPersistent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPersistent()"
    },
    {
      "trigger": "GetPhysicsAttacker",
      "contents": "GetPhysicsAttacker(${1:number timeLimit = 1})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPhysicsAttacker(timeLimit)"
    },
    {
      "trigger": "GetPhysicsObject",
      "contents": "GetPhysicsObject()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPhysicsObject()"
    },
    {
      "trigger": "GetPhysicsObjectCount",
      "contents": "GetPhysicsObjectCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPhysicsObjectCount()"
    },
    {
      "trigger": "GetPhysicsObjectNum",
      "contents": "GetPhysicsObjectNum(${1:number physNum})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPhysicsObjectNum(physNum)"
    },
    {
      "trigger": "GetPlaybackRate",
      "contents": "GetPlaybackRate()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPlaybackRate()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPos()"
    },
    {
      "trigger": "GetPoseParameter",
      "contents": "GetPoseParameter(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPoseParameter(name)"
    },
    {
      "trigger": "GetPoseParameterName",
      "contents": "GetPoseParameterName(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPoseParameterName(id)"
    },
    {
      "trigger": "GetPoseParameterRange",
      "contents": "GetPoseParameterRange(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPoseParameterRange(id)"
    },
    {
      "trigger": "GetPredictable",
      "contents": "GetPredictable()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPredictable()"
    },
    {
      "trigger": "GetPreferredCarryAngles",
      "contents": "GetPreferredCarryAngles(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetPreferredCarryAngles(ply)"
    },
    {
      "trigger": "GetRagdollOwner",
      "contents": "GetRagdollOwner()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRagdollOwner()"
    },
    {
      "trigger": "GetRenderAngles",
      "contents": "GetRenderAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderAngles()"
    },
    {
      "trigger": "GetRenderBounds",
      "contents": "GetRenderBounds()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderBounds()"
    },
    {
      "trigger": "GetRenderFX",
      "contents": "GetRenderFX()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderFX()"
    },
    {
      "trigger": "GetRenderGroup",
      "contents": "GetRenderGroup()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderGroup()"
    },
    {
      "trigger": "GetRenderMode",
      "contents": "GetRenderMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderMode()"
    },
    {
      "trigger": "GetRenderOrigin",
      "contents": "GetRenderOrigin()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRenderOrigin()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRight()"
    },
    {
      "trigger": "GetRotatedAABB",
      "contents": "GetRotatedAABB(${1:Vector min}, ${2:Vector max})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetRotatedAABB(min, max)"
    },
    {
      "trigger": "GetSaveTable",
      "contents": "GetSaveTable(${1:boolean showAll})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSaveTable(showAll)"
    },
    {
      "trigger": "GetSequence",
      "contents": "GetSequence()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequence()"
    },
    {
      "trigger": "GetSequenceActivity",
      "contents": "GetSequenceActivity(${1:number seq})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceActivity(seq)"
    },
    {
      "trigger": "GetSequenceActivityName",
      "contents": "GetSequenceActivityName(${1:number sequenceId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceActivityName(sequenceId)"
    },
    {
      "trigger": "GetSequenceCount",
      "contents": "GetSequenceCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceCount()"
    },
    {
      "trigger": "GetSequenceGroundSpeed",
      "contents": "GetSequenceGroundSpeed(${1:number sequenceId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceGroundSpeed(sequenceId)"
    },
    {
      "trigger": "GetSequenceInfo",
      "contents": "GetSequenceInfo(${1:number sequenceId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceInfo(sequenceId)"
    },
    {
      "trigger": "GetSequenceList",
      "contents": "GetSequenceList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceList()"
    },
    {
      "trigger": "GetSequenceMoveDist",
      "contents": "GetSequenceMoveDist(${1:number sequenceId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceMoveDist(sequenceId)"
    },
    {
      "trigger": "GetSequenceMovement",
      "contents": "GetSequenceMovement(${1:number sequenceId}, ${2:number startCycle = 0}, ${3:number endCyclnde = 1})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceMovement(sequenceId, startCycle, endCyclnde)"
    },
    {
      "trigger": "GetSequenceMoveYaw",
      "contents": "GetSequenceMoveYaw(${1:number seq})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceMoveYaw(seq)"
    },
    {
      "trigger": "GetSequenceName",
      "contents": "GetSequenceName(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceName(index)"
    },
    {
      "trigger": "GetSequenceVelocity",
      "contents": "GetSequenceVelocity(${1:number sequenceId}, ${2:number cycle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSequenceVelocity(sequenceId, cycle)"
    },
    {
      "trigger": "GetShouldPlayPickupSound",
      "contents": "GetShouldPlayPickupSound()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetShouldPlayPickupSound()"
    },
    {
      "trigger": "GetShouldServerRagdoll",
      "contents": "GetShouldServerRagdoll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetShouldServerRagdoll()"
    },
    {
      "trigger": "GetSkin",
      "contents": "GetSkin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSkin()"
    },
    {
      "trigger": "GetSolid",
      "contents": "GetSolid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSolid()"
    },
    {
      "trigger": "GetSolidFlags",
      "contents": "GetSolidFlags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSolidFlags()"
    },
    {
      "trigger": "GetSpawnEffect",
      "contents": "GetSpawnEffect()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSpawnEffect()"
    },
    {
      "trigger": "GetSpawnFlags",
      "contents": "GetSpawnFlags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSpawnFlags()"
    },
    {
      "trigger": "GetSubMaterial",
      "contents": "GetSubMaterial(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSubMaterial(index)"
    },
    {
      "trigger": "GetSubModels",
      "contents": "GetSubModels()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSubModels()"
    },
    {
      "trigger": "GetSurroundingBounds",
      "contents": "GetSurroundingBounds()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetSurroundingBounds()"
    },
    {
      "trigger": "GetTable",
      "contents": "GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetTable()"
    },
    {
      "trigger": "GetTouchTrace",
      "contents": "GetTouchTrace()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetTouchTrace()"
    },
    {
      "trigger": "GetTransmitWithParent",
      "contents": "GetTransmitWithParent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetTransmitWithParent()"
    },
    {
      "trigger": "GetUnFreezable",
      "contents": "GetUnFreezable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetUnFreezable()"
    },
    {
      "trigger": "GetUp",
      "contents": "GetUp()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetUp()"
    },
    {
      "trigger": "GetVar",
      "contents": "GetVar(${1:any key}, ${2:any default = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetVar(key, default)"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetVelocity()"
    },
    {
      "trigger": "GetWorkshopID",
      "contents": "GetWorkshopID()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetWorkshopID()"
    },
    {
      "trigger": "GetWorldTransformMatrix",
      "contents": "GetWorldTransformMatrix()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GetWorldTransformMatrix()"
    },
    {
      "trigger": "GibBreakClient",
      "contents": "GibBreakClient(${1:Vector force}, ${2:table clr = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GibBreakClient(force, clr)"
    },
    {
      "trigger": "GibBreakServer",
      "contents": "GibBreakServer(${1:Vector force})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:GibBreakServer(force)"
    },
    {
      "trigger": "HasBoneManipulations",
      "contents": "HasBoneManipulations()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:HasBoneManipulations()"
    },
    {
      "trigger": "HasFlexManipulatior",
      "contents": "HasFlexManipulatior()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:HasFlexManipulatior()"
    },
    {
      "trigger": "HasSpawnFlags",
      "contents": "HasSpawnFlags(${1:number spawnFlags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:HasSpawnFlags(spawnFlags)"
    },
    {
      "trigger": "HeadTarget",
      "contents": "HeadTarget(${1:Vector origin})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:HeadTarget(origin)"
    },
    {
      "trigger": "Health",
      "contents": "Health()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Health()"
    },
    {
      "trigger": "Ignite",
      "contents": "Ignite(${1:number length}, ${2:number radius = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Ignite(length, radius)"
    },
    {
      "trigger": "InitializeAsClientEntity",
      "contents": "InitializeAsClientEntity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:InitializeAsClientEntity()"
    },
    {
      "trigger": "Input",
      "contents": "Input(${1:string input}, ${2:Entity activator = nil}, ${3:Entity caller = nil}, ${4:any param = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Input(input, activator, caller, param)"
    },
    {
      "trigger": "InstallDataTable",
      "contents": "InstallDataTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:InstallDataTable()"
    },
    {
      "trigger": "InvalidateBoneCache",
      "contents": "InvalidateBoneCache()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:InvalidateBoneCache()"
    },
    {
      "trigger": "IsConstrained",
      "contents": "IsConstrained()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsConstrained()"
    },
    {
      "trigger": "IsConstraint",
      "contents": "IsConstraint()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsConstraint()"
    },
    {
      "trigger": "IsDormant",
      "contents": "IsDormant()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsDormant()"
    },
    {
      "trigger": "IsEffectActive",
      "contents": "IsEffectActive(${1:number effect})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsEffectActive(effect)"
    },
    {
      "trigger": "IsEFlagSet",
      "contents": "IsEFlagSet(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsEFlagSet(flag)"
    },
    {
      "trigger": "IsFlagSet",
      "contents": "IsFlagSet(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsFlagSet(flag)"
    },
    {
      "trigger": "IsInWorld",
      "contents": "IsInWorld()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsInWorld()"
    },
    {
      "trigger": "IsLagCompensated",
      "contents": "IsLagCompensated()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsLagCompensated()"
    },
    {
      "trigger": "IsLineOfSightClear",
      "contents": "IsLineOfSightClear(${1:Vector target})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsLineOfSightClear(target)"
    },
    {
      "trigger": "IsMarkedForDeletion",
      "contents": "IsMarkedForDeletion()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsMarkedForDeletion()"
    },
    {
      "trigger": "IsNextBot",
      "contents": "IsNextBot()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsNextBot()"
    },
    {
      "trigger": "IsNPC",
      "contents": "IsNPC()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsNPC()"
    },
    {
      "trigger": "IsOnFire",
      "contents": "IsOnFire()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsOnFire()"
    },
    {
      "trigger": "IsOnGround",
      "contents": "IsOnGround()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsOnGround()"
    },
    {
      "trigger": "IsPlayer",
      "contents": "IsPlayer()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsPlayer()"
    },
    {
      "trigger": "IsPlayerHolding",
      "contents": "IsPlayerHolding()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsPlayerHolding()"
    },
    {
      "trigger": "IsPlayingGesture",
      "contents": "IsPlayingGesture(${1:number activity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsPlayingGesture(activity)"
    },
    {
      "trigger": "IsPointInBounds",
      "contents": "IsPointInBounds(${1:Vector point})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsPointInBounds(point)"
    },
    {
      "trigger": "IsRagdoll",
      "contents": "IsRagdoll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsRagdoll()"
    },
    {
      "trigger": "IsScripted",
      "contents": "IsScripted()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsScripted()"
    },
    {
      "trigger": "IsSequenceFinished",
      "contents": "IsSequenceFinished()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsSequenceFinished()"
    },
    {
      "trigger": "IsSolid",
      "contents": "IsSolid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsSolid()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsValid()"
    },
    {
      "trigger": "IsValidLayer",
      "contents": "IsValidLayer(${1:number layerID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsValidLayer(layerID)"
    },
    {
      "trigger": "IsVehicle",
      "contents": "IsVehicle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsVehicle()"
    },
    {
      "trigger": "IsWeapon",
      "contents": "IsWeapon()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsWeapon()"
    },
    {
      "trigger": "IsWidget",
      "contents": "IsWidget()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsWidget()"
    },
    {
      "trigger": "IsWorld",
      "contents": "IsWorld()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:IsWorld()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector lpos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LocalToWorld(lpos)"
    },
    {
      "trigger": "LocalToWorldAngles",
      "contents": "LocalToWorldAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LocalToWorldAngles(ang)"
    },
    {
      "trigger": "LookupAttachment",
      "contents": "LookupAttachment(${1:string attachmentName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LookupAttachment(attachmentName)"
    },
    {
      "trigger": "LookupBone",
      "contents": "LookupBone(${1:string boneName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LookupBone(boneName)"
    },
    {
      "trigger": "LookupPoseParameter",
      "contents": "LookupPoseParameter(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LookupPoseParameter(name)"
    },
    {
      "trigger": "LookupSequence",
      "contents": "LookupSequence(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:LookupSequence(name)"
    },
    {
      "trigger": "MakePhysicsObjectAShadow",
      "contents": "MakePhysicsObjectAShadow(${1:boolean allowPhysicsMovement = true}, ${2:boolean allowPhysicsRotation = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:MakePhysicsObjectAShadow(allowPhysicsMovement, allowPhysicsRotation)"
    },
    {
      "trigger": "ManipulateBoneAngles",
      "contents": "ManipulateBoneAngles(${1:number boneID}, ${2:Angle ang}, ${3:boolean networking = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ManipulateBoneAngles(boneID, ang, networking)"
    },
    {
      "trigger": "ManipulateBoneJiggle",
      "contents": "ManipulateBoneJiggle(${1:number boneID}, ${2:number enabled})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ManipulateBoneJiggle(boneID, enabled)"
    },
    {
      "trigger": "ManipulateBonePosition",
      "contents": "ManipulateBonePosition(${1:number boneID}, ${2:Vector pos}, ${3:boolean networking = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ManipulateBonePosition(boneID, pos, networking)"
    },
    {
      "trigger": "ManipulateBoneScale",
      "contents": "ManipulateBoneScale(${1:number boneID}, ${2:Vector scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ManipulateBoneScale(boneID, scale)"
    },
    {
      "trigger": "MapCreationID",
      "contents": "MapCreationID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:MapCreationID()"
    },
    {
      "trigger": "MarkShadowAsDirty",
      "contents": "MarkShadowAsDirty()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:MarkShadowAsDirty()"
    },
    {
      "trigger": "MuzzleFlash",
      "contents": "MuzzleFlash()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:MuzzleFlash()"
    },
    {
      "trigger": "NearestPoint",
      "contents": "NearestPoint(${1:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:NearestPoint(position)"
    },
    {
      "trigger": "NetworkVar",
      "contents": "NetworkVar(${1:string type}, ${2:number slot}, ${3:string name}, ${4:table extended = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:NetworkVar(type, slot, name, extended)"
    },
    {
      "trigger": "NetworkVarElement",
      "contents": "NetworkVarElement(${1:string type}, ${2:number slot}, ${3:string element}, ${4:string name}, ${5:table extended = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:NetworkVarElement(type, slot, element, name, extended)"
    },
    {
      "trigger": "NetworkVarNotify",
      "contents": "NetworkVarNotify(${1:string name}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:NetworkVarNotify(name, callback)"
    },
    {
      "trigger": "NextThink",
      "contents": "NextThink(${1:number timestamp})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:NextThink(timestamp)"
    },
    {
      "trigger": "OBBCenter",
      "contents": "OBBCenter()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:OBBCenter()"
    },
    {
      "trigger": "OBBMaxs",
      "contents": "OBBMaxs()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:OBBMaxs()"
    },
    {
      "trigger": "OBBMins",
      "contents": "OBBMins()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:OBBMins()"
    },
    {
      "trigger": "ObjectCaps",
      "contents": "ObjectCaps()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ObjectCaps()"
    },
    {
      "trigger": "OnGround",
      "contents": "OnGround()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:OnGround()"
    },
    {
      "trigger": "PassesDamageFilter",
      "contents": "PassesDamageFilter(${1:CTakeDamageInfo dmg})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PassesDamageFilter(dmg)"
    },
    {
      "trigger": "PassesFilter",
      "contents": "PassesFilter(${1:Entity caller}, ${2:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PassesFilter(caller, ent)"
    },
    {
      "trigger": "PhysicsDestroy",
      "contents": "PhysicsDestroy()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsDestroy()"
    },
    {
      "trigger": "PhysicsFromMesh",
      "contents": "PhysicsFromMesh(${1:table vertices}, ${2:string surfaceprop = default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsFromMesh(vertices, surfaceprop)"
    },
    {
      "trigger": "PhysicsInit",
      "contents": "PhysicsInit(${1:number solidType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInit(solidType)"
    },
    {
      "trigger": "PhysicsInitBox",
      "contents": "PhysicsInitBox(${1:Vector mins}, ${2:Vector maxs}, ${3:string surfaceprop = default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitBox(mins, maxs, surfaceprop)"
    },
    {
      "trigger": "PhysicsInitConvex",
      "contents": "PhysicsInitConvex(${1:table points}, ${2:string surfaceprop = default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitConvex(points, surfaceprop)"
    },
    {
      "trigger": "PhysicsInitMultiConvex",
      "contents": "PhysicsInitMultiConvex(${1:table vertices}, ${2:string surfaceprop = default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitMultiConvex(vertices, surfaceprop)"
    },
    {
      "trigger": "PhysicsInitShadow",
      "contents": "PhysicsInitShadow(${1:boolean allowPhysicsMovement = true}, ${2:boolean allowPhysicsRotation = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitShadow(allowPhysicsMovement, allowPhysicsRotation)"
    },
    {
      "trigger": "PhysicsInitSphere",
      "contents": "PhysicsInitSphere(${1:number radius}, ${2:string physmat = default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitSphere(radius, physmat)"
    },
    {
      "trigger": "PhysicsInitStatic",
      "contents": "PhysicsInitStatic(${1:number solidType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysicsInitStatic(solidType)"
    },
    {
      "trigger": "PhysWake",
      "contents": "PhysWake()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PhysWake()"
    },
    {
      "trigger": "PlayScene",
      "contents": "PlayScene(${1:string scene}, ${2:number delay = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PlayScene(scene, delay)"
    },
    {
      "trigger": "PointAtEntity",
      "contents": "PointAtEntity(${1:Entity target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PointAtEntity(target)"
    },
    {
      "trigger": "PrecacheGibs",
      "contents": "PrecacheGibs()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:PrecacheGibs()"
    },
    {
      "trigger": "RagdollSolve",
      "contents": "RagdollSolve()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RagdollSolve()"
    },
    {
      "trigger": "RagdollStopControlling",
      "contents": "RagdollStopControlling()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RagdollStopControlling()"
    },
    {
      "trigger": "RagdollUpdatePhysics",
      "contents": "RagdollUpdatePhysics()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RagdollUpdatePhysics()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Remove()"
    },
    {
      "trigger": "RemoveAllDecals",
      "contents": "RemoveAllDecals()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveAllDecals()"
    },
    {
      "trigger": "RemoveAllGestures",
      "contents": "RemoveAllGestures()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveAllGestures()"
    },
    {
      "trigger": "RemoveCallback",
      "contents": "RemoveCallback(${1:string hook}, ${2:number callbackid})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveCallback(hook, callbackid)"
    },
    {
      "trigger": "RemoveCallOnRemove",
      "contents": "RemoveCallOnRemove(${1:string identifier})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveCallOnRemove(identifier)"
    },
    {
      "trigger": "RemoveEffects",
      "contents": "RemoveEffects(${1:number effect})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveEffects(effect)"
    },
    {
      "trigger": "RemoveEFlags",
      "contents": "RemoveEFlags(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveEFlags(flag)"
    },
    {
      "trigger": "RemoveFlags",
      "contents": "RemoveFlags(${1:number flag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveFlags(flag)"
    },
    {
      "trigger": "RemoveFromMotionController",
      "contents": "RemoveFromMotionController(${1:PhysObj physObj})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveFromMotionController(physObj)"
    },
    {
      "trigger": "RemoveGesture",
      "contents": "RemoveGesture(${1:number activity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveGesture(activity)"
    },
    {
      "trigger": "RemoveInternalConstraint",
      "contents": "RemoveInternalConstraint(${1:number num = -1})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveInternalConstraint(num)"
    },
    {
      "trigger": "RemoveSolidFlags",
      "contents": "RemoveSolidFlags(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RemoveSolidFlags(flags)"
    },
    {
      "trigger": "ResetSequence",
      "contents": "ResetSequence(${1:number sequence})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ResetSequence(sequence)"
    },
    {
      "trigger": "ResetSequenceInfo",
      "contents": "ResetSequenceInfo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ResetSequenceInfo()"
    },
    {
      "trigger": "Respawn",
      "contents": "Respawn()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Respawn()"
    },
    {
      "trigger": "RestartGesture",
      "contents": "RestartGesture(${1:number activity}, ${2:boolean addIfMissing = true}, ${3:boolean autokill = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:RestartGesture(activity, addIfMissing, autokill)"
    },
    {
      "trigger": "SelectWeightedSequence",
      "contents": "SelectWeightedSequence(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SelectWeightedSequence(act)"
    },
    {
      "trigger": "SelectWeightedSequenceSeeded",
      "contents": "SelectWeightedSequenceSeeded(${1:number act}, ${2:number seed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SelectWeightedSequenceSeeded(act, seed)"
    },
    {
      "trigger": "SendViewModelMatchingSequence",
      "contents": "SendViewModelMatchingSequence(${1:number seq})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SendViewModelMatchingSequence(seq)"
    },
    {
      "trigger": "SequenceDuration",
      "contents": "SequenceDuration(${1:number seqid = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SequenceDuration(seqid)"
    },
    {
      "trigger": "SetAbsVelocity",
      "contents": "SetAbsVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetAbsVelocity(velocity)"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angles})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetAngles(angles)"
    },
    {
      "trigger": "SetAnimation",
      "contents": "SetAnimation(${1:number playerAnim})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetAnimation(playerAnim)"
    },
    {
      "trigger": "SetAnimTime",
      "contents": "SetAnimTime(${1:number time})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetAnimTime(time)"
    },
    {
      "trigger": "SetAttachment",
      "contents": "SetAttachment(${1:Entity ent}, ${2:number attachment})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetAttachment(ent, attachment)"
    },
    {
      "trigger": "SetBloodColor",
      "contents": "SetBloodColor(${1:number bloodColor})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBloodColor(bloodColor)"
    },
    {
      "trigger": "SetBodygroup",
      "contents": "SetBodygroup(${1:number bodygroup}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBodygroup(bodygroup, value)"
    },
    {
      "trigger": "SetBodyGroups",
      "contents": "SetBodyGroups(${1:string bodygroups})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBodyGroups(bodygroups)"
    },
    {
      "trigger": "SetBoneController",
      "contents": "SetBoneController(${1:number boneControllerID}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBoneController(boneControllerID, value)"
    },
    {
      "trigger": "SetBoneMatrix",
      "contents": "SetBoneMatrix(${1:number boneid}, ${2:VMatrix matrix})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBoneMatrix(boneid, matrix)"
    },
    {
      "trigger": "SetBonePosition",
      "contents": "SetBonePosition(${1:number bone}, ${2:Vector pos}, ${3:Angle ang})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetBonePosition(bone, pos, ang)"
    },
    {
      "trigger": "SetCollisionBounds",
      "contents": "SetCollisionBounds(${1:Vector mins}, ${2:Vector maxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCollisionBounds(mins, maxs)"
    },
    {
      "trigger": "SetCollisionBoundsWS",
      "contents": "SetCollisionBoundsWS(${1:Vector vec1}, ${2:Vector vec2})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCollisionBoundsWS(vec1, vec2)"
    },
    {
      "trigger": "SetCollisionGroup",
      "contents": "SetCollisionGroup(${1:number group})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCollisionGroup(group)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color = Color(255, 0, 255, 255)})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetColor(color)"
    },
    {
      "trigger": "SetColor4Part",
      "contents": "SetColor4Part(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetColor4Part(r, g, b, a)"
    },
    {
      "trigger": "SetCreator",
      "contents": "SetCreator(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCreator(ply)"
    },
    {
      "trigger": "SetCustomCollisionCheck",
      "contents": "SetCustomCollisionCheck(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCustomCollisionCheck(enable)"
    },
    {
      "trigger": "SetCycle",
      "contents": "SetCycle(${1:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetCycle(value)"
    },
    {
      "trigger": "SetDTAngle",
      "contents": "SetDTAngle(${1:number key}, ${2:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTAngle(key, ang)"
    },
    {
      "trigger": "SetDTBool",
      "contents": "SetDTBool(${1:number key}, ${2:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTBool(key, bool)"
    },
    {
      "trigger": "SetDTEntity",
      "contents": "SetDTEntity(${1:number key}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTEntity(key, ent)"
    },
    {
      "trigger": "SetDTFloat",
      "contents": "SetDTFloat(${1:number key}, ${2:number float})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTFloat(key, float)"
    },
    {
      "trigger": "SetDTInt",
      "contents": "SetDTInt(${1:number key}, ${2:number integer})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTInt(key, integer)"
    },
    {
      "trigger": "SetDTString",
      "contents": "SetDTString(${1:number key}, ${2:string str})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTString(key, str)"
    },
    {
      "trigger": "SetDTVector",
      "contents": "SetDTVector(${1:number key}, ${2:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetDTVector(key, vec)"
    },
    {
      "trigger": "SetElasticity",
      "contents": "SetElasticity(${1:number elasticity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetElasticity(elasticity)"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:string name}, ${2:Entity entity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetEntity(name, entity)"
    },
    {
      "trigger": "SetEyeTarget",
      "contents": "SetEyeTarget(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetEyeTarget(pos)"
    },
    {
      "trigger": "SetFlexScale",
      "contents": "SetFlexScale(${1:number scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetFlexScale(scale)"
    },
    {
      "trigger": "SetFlexWeight",
      "contents": "SetFlexWeight(${1:number flex}, ${2:number weight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetFlexWeight(flex, weight)"
    },
    {
      "trigger": "SetFriction",
      "contents": "SetFriction(${1:number friction})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetFriction(friction)"
    },
    {
      "trigger": "SetGravity",
      "contents": "SetGravity(${1:number gravityMultiplier})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetGravity(gravityMultiplier)"
    },
    {
      "trigger": "SetGroundEntity",
      "contents": "SetGroundEntity(${1:Entity ground})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetGroundEntity(ground)"
    },
    {
      "trigger": "SetHealth",
      "contents": "SetHealth(${1:number newHealth})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetHealth(newHealth)"
    },
    {
      "trigger": "SetHitboxSet",
      "contents": "SetHitboxSet(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetHitboxSet(id)"
    },
    {
      "trigger": "SetIK",
      "contents": "SetIK(${1:boolean useIK = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetIK(useIK)"
    },
    {
      "trigger": "SetKeyValue",
      "contents": "SetKeyValue(${1:string key}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetKeyValue(key, value)"
    },
    {
      "trigger": "SetLagCompensated",
      "contents": "SetLagCompensated(${1:boolean enable})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLagCompensated(enable)"
    },
    {
      "trigger": "SetLayerBlendIn",
      "contents": "SetLayerBlendIn(${1:number layerID}, ${2:number blendIn})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerBlendIn(layerID, blendIn)"
    },
    {
      "trigger": "SetLayerBlendOut",
      "contents": "SetLayerBlendOut(${1:number layerID}, ${2:number blendOut})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerBlendOut(layerID, blendOut)"
    },
    {
      "trigger": "SetLayerCycle",
      "contents": "SetLayerCycle(${1:number layerID}, ${2:number cycle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerCycle(layerID, cycle)"
    },
    {
      "trigger": "SetLayerDuration",
      "contents": "SetLayerDuration(${1:number layerID}, ${2:number duration})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerDuration(layerID, duration)"
    },
    {
      "trigger": "SetLayerLooping",
      "contents": "SetLayerLooping(${1:number layerID}, ${2:boolean loop})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerLooping(layerID, loop)"
    },
    {
      "trigger": "SetLayerPlaybackRate",
      "contents": "SetLayerPlaybackRate(${1:number layerID}, ${2:number rate})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerPlaybackRate(layerID, rate)"
    },
    {
      "trigger": "SetLayerPriority",
      "contents": "SetLayerPriority(${1:number layerID}, ${2:number priority})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerPriority(layerID, priority)"
    },
    {
      "trigger": "SetLayerSequence",
      "contents": "SetLayerSequence(${1:number layerID}, ${2:number seq})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerSequence(layerID, seq)"
    },
    {
      "trigger": "SetLayerWeight",
      "contents": "SetLayerWeight(${1:number layerID}, ${2:number weight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLayerWeight(layerID, weight)"
    },
    {
      "trigger": "SetLegacyTransform",
      "contents": "SetLegacyTransform(${1:boolean enabled})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLegacyTransform(enabled)"
    },
    {
      "trigger": "SetLightingOriginEntity",
      "contents": "SetLightingOriginEntity(${1:Entity lightOrigin})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLightingOriginEntity(lightOrigin)"
    },
    {
      "trigger": "SetLocalAngles",
      "contents": "SetLocalAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLocalAngles(ang)"
    },
    {
      "trigger": "SetLocalAngularVelocity",
      "contents": "SetLocalAngularVelocity(${1:Angle angVel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLocalAngularVelocity(angVel)"
    },
    {
      "trigger": "SetLocalPos",
      "contents": "SetLocalPos(${1:Vector pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLocalPos(pos)"
    },
    {
      "trigger": "SetLocalVelocity",
      "contents": "SetLocalVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLocalVelocity(velocity)"
    },
    {
      "trigger": "SetLOD",
      "contents": "SetLOD(${1:number lod = -1})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetLOD(lod)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string materialName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetMaterial(materialName)"
    },
    {
      "trigger": "SetMaxHealth",
      "contents": "SetMaxHealth(${1:number maxhealth})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetMaxHealth(maxhealth)"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetModel(modelName)"
    },
    {
      "trigger": "SetModelName",
      "contents": "SetModelName(${1:string modelname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetModelName(modelname)"
    },
    {
      "trigger": "SetModelScale",
      "contents": "SetModelScale(${1:number scale}, ${2:number deltaTime = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetModelScale(scale, deltaTime)"
    },
    {
      "trigger": "SetMoveCollide",
      "contents": "SetMoveCollide(${1:number moveCollideType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetMoveCollide(moveCollideType)"
    },
    {
      "trigger": "SetMoveParent",
      "contents": "SetMoveParent(${1:Entity Parent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetMoveParent(Parent)"
    },
    {
      "trigger": "SetMoveType",
      "contents": "SetMoveType(${1:number movetype})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetMoveType(movetype)"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string mappingName})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetName(mappingName)"
    },
    {
      "trigger": "SetNetworkAngles",
      "contents": "SetNetworkAngles(${1:Angle angle})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkAngles(angle)"
    },
    {
      "trigger": "SetNetworked2Angle",
      "contents": "SetNetworked2Angle(${1:string key}, ${2:Angle value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Angle(key, value)"
    },
    {
      "trigger": "SetNetworked2Bool",
      "contents": "SetNetworked2Bool(${1:string key}, ${2:boolean value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Bool(key, value)"
    },
    {
      "trigger": "SetNetworked2Entity",
      "contents": "SetNetworked2Entity(${1:string key}, ${2:Entity value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Entity(key, value)"
    },
    {
      "trigger": "SetNetworked2Float",
      "contents": "SetNetworked2Float(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Float(key, value)"
    },
    {
      "trigger": "SetNetworked2Int",
      "contents": "SetNetworked2Int(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Int(key, value)"
    },
    {
      "trigger": "SetNetworked2String",
      "contents": "SetNetworked2String(${1:string key}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2String(key, value)"
    },
    {
      "trigger": "SetNetworked2Var",
      "contents": "SetNetworked2Var(${1:string key}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Var(key, value)"
    },
    {
      "trigger": "SetNetworked2VarProxy",
      "contents": "SetNetworked2VarProxy(${1:string name}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2VarProxy(name, callback)"
    },
    {
      "trigger": "SetNetworked2Vector",
      "contents": "SetNetworked2Vector(${1:string key}, ${2:Vector value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworked2Vector(key, value)"
    },
    {
      "trigger": "SetNetworkedAngle",
      "contents": "SetNetworkedAngle(${1:string key}, ${2:Angle value = Angle( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedAngle(key, value)"
    },
    {
      "trigger": "SetNetworkedBool",
      "contents": "SetNetworkedBool(${1:string key}, ${2:boolean value = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedBool(key, value)"
    },
    {
      "trigger": "SetNetworkedEntity",
      "contents": "SetNetworkedEntity(${1:string key}, ${2:Entity value = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedEntity(key, value)"
    },
    {
      "trigger": "SetNetworkedFloat",
      "contents": "SetNetworkedFloat(${1:string key}, ${2:number value = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedFloat(key, value)"
    },
    {
      "trigger": "SetNetworkedInt",
      "contents": "SetNetworkedInt(${1:string key}, ${2:number value = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedInt(key, value)"
    },
    {
      "trigger": "SetNetworkedNumber",
      "contents": "SetNetworkedNumber(${1:any index}, ${2:number number})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedNumber(index, number)"
    },
    {
      "trigger": "SetNetworkedString",
      "contents": "SetNetworkedString(${1:string key}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedString(key, value)"
    },
    {
      "trigger": "SetNetworkedVar",
      "contents": "SetNetworkedVar(${1:string key}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedVar(key, value)"
    },
    {
      "trigger": "SetNetworkedVarProxy",
      "contents": "SetNetworkedVarProxy(${1:string name}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedVarProxy(name, callback)"
    },
    {
      "trigger": "SetNetworkedVector",
      "contents": "SetNetworkedVector(${1:string key}, ${2:Vector value = Vector( 0, 0, 0 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkedVector(key, value)"
    },
    {
      "trigger": "SetNetworkOrigin",
      "contents": "SetNetworkOrigin(${1:Vector origin})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNetworkOrigin(origin)"
    },
    {
      "trigger": "SetNextClientThink",
      "contents": "SetNextClientThink(${1:number nextthink})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNextClientThink(nextthink)"
    },
    {
      "trigger": "SetNoDraw",
      "contents": "SetNoDraw(${1:boolean shouldNotDraw})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNoDraw(shouldNotDraw)"
    },
    {
      "trigger": "SetNotSolid",
      "contents": "SetNotSolid(${1:boolean IsNotSolid})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNotSolid(IsNotSolid)"
    },
    {
      "trigger": "SetNW2Angle",
      "contents": "SetNW2Angle(${1:string key}, ${2:Angle value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Angle(key, value)"
    },
    {
      "trigger": "SetNW2Bool",
      "contents": "SetNW2Bool(${1:string key}, ${2:boolean value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Bool(key, value)"
    },
    {
      "trigger": "SetNW2Entity",
      "contents": "SetNW2Entity(${1:string key}, ${2:Entity value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Entity(key, value)"
    },
    {
      "trigger": "SetNW2Float",
      "contents": "SetNW2Float(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Float(key, value)"
    },
    {
      "trigger": "SetNW2Int",
      "contents": "SetNW2Int(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Int(key, value)"
    },
    {
      "trigger": "SetNW2String",
      "contents": "SetNW2String(${1:string key}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2String(key, value)"
    },
    {
      "trigger": "SetNW2Var",
      "contents": "SetNW2Var(${1:string key}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Var(key, value)"
    },
    {
      "trigger": "SetNW2VarProxy",
      "contents": "SetNW2VarProxy(${1:any key}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2VarProxy(key, callback)"
    },
    {
      "trigger": "SetNW2Vector",
      "contents": "SetNW2Vector(${1:string key}, ${2:Vector value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNW2Vector(key, value)"
    },
    {
      "trigger": "SetNWAngle",
      "contents": "SetNWAngle(${1:string key}, ${2:Angle value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWAngle(key, value)"
    },
    {
      "trigger": "SetNWBool",
      "contents": "SetNWBool(${1:string key}, ${2:boolean value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWBool(key, value)"
    },
    {
      "trigger": "SetNWEntity",
      "contents": "SetNWEntity(${1:string key}, ${2:Entity value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWEntity(key, value)"
    },
    {
      "trigger": "SetNWFloat",
      "contents": "SetNWFloat(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWFloat(key, value)"
    },
    {
      "trigger": "SetNWInt",
      "contents": "SetNWInt(${1:string key}, ${2:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWInt(key, value)"
    },
    {
      "trigger": "SetNWString",
      "contents": "SetNWString(${1:string key}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWString(key, value)"
    },
    {
      "trigger": "SetNWVarProxy",
      "contents": "SetNWVarProxy(${1:any key}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWVarProxy(key, callback)"
    },
    {
      "trigger": "SetNWVector",
      "contents": "SetNWVector(${1:string key}, ${2:Vector value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetNWVector(key, value)"
    },
    {
      "trigger": "SetOwner",
      "contents": "SetOwner(${1:Entity owner = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetOwner(owner)"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:Entity parent = NULL}, ${2:number attachmentId = -1})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetParent(parent, attachmentId)"
    },
    {
      "trigger": "SetParentPhysNum",
      "contents": "SetParentPhysNum(${1:number bone})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetParentPhysNum(bone)"
    },
    {
      "trigger": "SetPersistent",
      "contents": "SetPersistent(${1:boolean persist})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPersistent(persist)"
    },
    {
      "trigger": "SetPhysConstraintObjects",
      "contents": "SetPhysConstraintObjects(${1:PhysObj Phys1}, ${2:PhysObj Phys2})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPhysConstraintObjects(Phys1, Phys2)"
    },
    {
      "trigger": "SetPhysicsAttacker",
      "contents": "SetPhysicsAttacker(${1:Player ent}, ${2:number timeLimit = 5})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPhysicsAttacker(ent, timeLimit)"
    },
    {
      "trigger": "SetPlaybackRate",
      "contents": "SetPlaybackRate(${1:number fSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPlaybackRate(fSpeed)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPos(position)"
    },
    {
      "trigger": "SetPoseParameter",
      "contents": "SetPoseParameter(${1:string poseName}, ${2:number poseValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPoseParameter(poseName, poseValue)"
    },
    {
      "trigger": "SetPredictable",
      "contents": "SetPredictable(${1:boolean setPredictable})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPredictable(setPredictable)"
    },
    {
      "trigger": "SetPreventTransmit",
      "contents": "SetPreventTransmit(${1:Player player}, ${2:boolean stopTransmitting})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetPreventTransmit(player, stopTransmitting)"
    },
    {
      "trigger": "SetRagdollAng",
      "contents": "SetRagdollAng(${1:number boneid}, ${2:Angle pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRagdollAng(boneid, pos)"
    },
    {
      "trigger": "SetRagdollBuildFunction",
      "contents": "SetRagdollBuildFunction(${1:function func})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRagdollBuildFunction(func)"
    },
    {
      "trigger": "SetRagdollPos",
      "contents": "SetRagdollPos(${1:number boneid}, ${2:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRagdollPos(boneid, pos)"
    },
    {
      "trigger": "SetRenderAngles",
      "contents": "SetRenderAngles(${1:Angle newAngles = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderAngles(newAngles)"
    },
    {
      "trigger": "SetRenderBounds",
      "contents": "SetRenderBounds(${1:Vector mins}, ${2:Vector maxs}, ${3:Vector add = Vector( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderBounds(mins, maxs, add)"
    },
    {
      "trigger": "SetRenderBoundsWS",
      "contents": "SetRenderBoundsWS(${1:Vector mins}, ${2:Vector maxs}, ${3:Vector add = Vector( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderBoundsWS(mins, maxs, add)"
    },
    {
      "trigger": "SetRenderClipPlane",
      "contents": "SetRenderClipPlane(${1:Vector planeNormal}, ${2:number planePosition})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderClipPlane(planeNormal, planePosition)"
    },
    {
      "trigger": "SetRenderClipPlaneEnabled",
      "contents": "SetRenderClipPlaneEnabled(${1:boolean enabled})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderClipPlaneEnabled(enabled)"
    },
    {
      "trigger": "SetRenderFX",
      "contents": "SetRenderFX(${1:number renderFX})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderFX(renderFX)"
    },
    {
      "trigger": "SetRenderMode",
      "contents": "SetRenderMode(${1:number renderMode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderMode(renderMode)"
    },
    {
      "trigger": "SetRenderOrigin",
      "contents": "SetRenderOrigin(${1:Vector newOrigin = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetRenderOrigin(newOrigin)"
    },
    {
      "trigger": "SetSaveValue",
      "contents": "SetSaveValue(${1:string name}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSaveValue(name, value)"
    },
    {
      "trigger": "SetSequence",
      "contents": "SetSequence(${1:number sequenceId})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSequence(sequenceId)"
    },
    {
      "trigger": "SetShouldPlayPickupSound",
      "contents": "SetShouldPlayPickupSound(${1:boolean playsound = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetShouldPlayPickupSound(playsound)"
    },
    {
      "trigger": "SetShouldServerRagdoll",
      "contents": "SetShouldServerRagdoll(${1:boolean serverragdoll})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetShouldServerRagdoll(serverragdoll)"
    },
    {
      "trigger": "SetSkin",
      "contents": "SetSkin(${1:number skinIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSkin(skinIndex)"
    },
    {
      "trigger": "SetSolid",
      "contents": "SetSolid(${1:number solid_type})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSolid(solid_type)"
    },
    {
      "trigger": "SetSolidFlags",
      "contents": "SetSolidFlags(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSolidFlags(flags)"
    },
    {
      "trigger": "SetSpawnEffect",
      "contents": "SetSpawnEffect(${1:boolean spawnEffect})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSpawnEffect(spawnEffect)"
    },
    {
      "trigger": "SetSubMaterial",
      "contents": "SetSubMaterial(${1:number index = nil}, ${2:string material = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSubMaterial(index, material)"
    },
    {
      "trigger": "SetSurroundingBounds",
      "contents": "SetSurroundingBounds(${1:Vector min}, ${2:Vector max})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSurroundingBounds(min, max)"
    },
    {
      "trigger": "SetSurroundingBoundsType",
      "contents": "SetSurroundingBoundsType(${1:number bounds})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetSurroundingBoundsType(bounds)"
    },
    {
      "trigger": "SetTable",
      "contents": "SetTable(${1:table tab})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetTable(tab)"
    },
    {
      "trigger": "SetTransmitWithParent",
      "contents": "SetTransmitWithParent(${1:boolean onoff})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetTransmitWithParent(onoff)"
    },
    {
      "trigger": "SetTrigger",
      "contents": "SetTrigger(${1:boolean maketrigger})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetTrigger(maketrigger)"
    },
    {
      "trigger": "SetUnFreezable",
      "contents": "SetUnFreezable(${1:boolean freezable = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetUnFreezable(freezable)"
    },
    {
      "trigger": "SetupBones",
      "contents": "SetupBones()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetupBones()"
    },
    {
      "trigger": "SetupPhonemeMappings",
      "contents": "SetupPhonemeMappings(${1:string fileRoot})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetupPhonemeMappings(fileRoot)"
    },
    {
      "trigger": "SetUseType",
      "contents": "SetUseType(${1:number useType})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetUseType(useType)"
    },
    {
      "trigger": "SetVar",
      "contents": "SetVar(${1:any key}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetVar(key, value)"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetVelocity(velocity)"
    },
    {
      "trigger": "SetWeaponModel",
      "contents": "SetWeaponModel(${1:string viewModel}, ${2:Weapon weapon = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SetWeaponModel(viewModel, weapon)"
    },
    {
      "trigger": "SkinCount",
      "contents": "SkinCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SkinCount()"
    },
    {
      "trigger": "SnatchModelInstance",
      "contents": "SnatchModelInstance(${1:Entity srcEntity})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:SnatchModelInstance(srcEntity)"
    },
    {
      "trigger": "Spawn",
      "contents": "Spawn()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Spawn()"
    },
    {
      "trigger": "StartLoopingSound",
      "contents": "StartLoopingSound(${1:string sound})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StartLoopingSound(sound)"
    },
    {
      "trigger": "StartMotionController",
      "contents": "StartMotionController()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StartMotionController()"
    },
    {
      "trigger": "StopAndDestroyParticles",
      "contents": "StopAndDestroyParticles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopAndDestroyParticles()"
    },
    {
      "trigger": "StopLoopingSound",
      "contents": "StopLoopingSound(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopLoopingSound(id)"
    },
    {
      "trigger": "StopMotionController",
      "contents": "StopMotionController()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopMotionController()"
    },
    {
      "trigger": "StopParticleEmission",
      "contents": "StopParticleEmission()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopParticleEmission()"
    },
    {
      "trigger": "StopParticles",
      "contents": "StopParticles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopParticles()"
    },
    {
      "trigger": "StopParticlesNamed",
      "contents": "StopParticlesNamed(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopParticlesNamed(name)"
    },
    {
      "trigger": "StopParticlesWithNameAndAttachment",
      "contents": "StopParticlesWithNameAndAttachment(${1:string name}, ${2:number attachment})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopParticlesWithNameAndAttachment(name, attachment)"
    },
    {
      "trigger": "StopSound",
      "contents": "StopSound(${1:string sound})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:StopSound(sound)"
    },
    {
      "trigger": "TakeDamage",
      "contents": "TakeDamage(${1:number damageAmount}, ${2:Entity attacker}, ${3:Entity inflictor})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TakeDamage(damageAmount, attacker, inflictor)"
    },
    {
      "trigger": "TakeDamageInfo",
      "contents": "TakeDamageInfo(${1:CTakeDamageInfo damageInfo})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TakeDamageInfo(damageInfo)"
    },
    {
      "trigger": "TakePhysicsDamage",
      "contents": "TakePhysicsDamage(${1:CTakeDamageInfo dmginfo})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TakePhysicsDamage(dmginfo)"
    },
    {
      "trigger": "TestPVS",
      "contents": "TestPVS(${1:any testPoint})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TestPVS(testPoint)"
    },
    {
      "trigger": "TranslateBoneToPhysBone",
      "contents": "TranslateBoneToPhysBone(${1:number boneID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TranslateBoneToPhysBone(boneID)"
    },
    {
      "trigger": "TranslatePhysBoneToBone",
      "contents": "TranslatePhysBoneToBone(${1:number physNum})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:TranslatePhysBoneToBone(physNum)"
    },
    {
      "trigger": "UpdateBoneFollowers",
      "contents": "UpdateBoneFollowers()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:UpdateBoneFollowers()"
    },
    {
      "trigger": "UpdateShadow",
      "contents": "UpdateShadow()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:UpdateShadow()"
    },
    {
      "trigger": "Use",
      "contents": "Use(${1:Entity activator}, ${2:Entity caller = NULL}, ${3:number useType = USE_ON}, ${4:number value = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Use(activator, caller, useType, value)"
    },
    {
      "trigger": "UseClientSideAnimation",
      "contents": "UseClientSideAnimation()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:UseClientSideAnimation()"
    },
    {
      "trigger": "UseTriggerBounds",
      "contents": "UseTriggerBounds(${1:boolean enable}, ${2:number boundSize = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:UseTriggerBounds(enable, boundSize)"
    },
    {
      "trigger": "ViewModelIndex",
      "contents": "ViewModelIndex()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:ViewModelIndex()"
    },
    {
      "trigger": "Visible",
      "contents": "Visible(${1:Entity target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Visible(target)"
    },
    {
      "trigger": "VisibleVec",
      "contents": "VisibleVec(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:VisibleVec(pos)"
    },
    {
      "trigger": "WaterLevel",
      "contents": "WaterLevel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:WaterLevel()"
    },
    {
      "trigger": "Weapon_SetActivity",
      "contents": "Weapon_SetActivity(${1:number act}, ${2:number duration})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Weapon_SetActivity(act, duration)"
    },
    {
      "trigger": "Weapon_TranslateActivity",
      "contents": "Weapon_TranslateActivity(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:Weapon_TranslateActivity(act)"
    },
    {
      "trigger": "WorldSpaceAABB",
      "contents": "WorldSpaceAABB()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:WorldSpaceAABB()"
    },
    {
      "trigger": "WorldSpaceCenter",
      "contents": "WorldSpaceCenter()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:WorldSpaceCenter()"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector wpos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:WorldToLocal(wpos)"
    },
    {
      "trigger": "WorldToLocalAngles",
      "contents": "WorldToLocalAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Entity:WorldToLocalAngles(ang)"
    },
    {
      "trigger": "SetMaxYawSpeed",
      "contents": "SetMaxYawSpeed(${1:number maxyaw})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ENTITY:SetMaxYawSpeed(maxyaw)"
    },
    {
      "trigger": "SetNPCClass",
      "contents": "SetNPCClass(${1:number classification})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ENTITY:SetNPCClass(classification)"
    },
    {
      "trigger": "Close",
      "contents": "Close()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Close()"
    },
    {
      "trigger": "EndOfFile",
      "contents": "EndOfFile()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:EndOfFile()"
    },
    {
      "trigger": "Flush",
      "contents": "Flush()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Flush()"
    },
    {
      "trigger": "Read",
      "contents": "Read(${1:number length = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Read(length)"
    },
    {
      "trigger": "ReadBool",
      "contents": "ReadBool()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadBool()"
    },
    {
      "trigger": "ReadByte",
      "contents": "ReadByte()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadByte()"
    },
    {
      "trigger": "ReadDouble",
      "contents": "ReadDouble()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadDouble()"
    },
    {
      "trigger": "ReadFloat",
      "contents": "ReadFloat()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadFloat()"
    },
    {
      "trigger": "ReadLine",
      "contents": "ReadLine()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadLine()"
    },
    {
      "trigger": "ReadLong",
      "contents": "ReadLong()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadLong()"
    },
    {
      "trigger": "ReadShort",
      "contents": "ReadShort()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadShort()"
    },
    {
      "trigger": "ReadUInt64",
      "contents": "ReadUInt64()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadUInt64()"
    },
    {
      "trigger": "ReadULong",
      "contents": "ReadULong()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadULong()"
    },
    {
      "trigger": "ReadUShort",
      "contents": "ReadUShort()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:ReadUShort()"
    },
    {
      "trigger": "Seek",
      "contents": "Seek(${1:number pos})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Seek(pos)"
    },
    {
      "trigger": "Size",
      "contents": "Size()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Size()"
    },
    {
      "trigger": "Skip",
      "contents": "Skip(${1:number amount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Skip(amount)"
    },
    {
      "trigger": "Tell",
      "contents": "Tell()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Tell()"
    },
    {
      "trigger": "Write",
      "contents": "Write(${1:string data})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:Write(data)"
    },
    {
      "trigger": "WriteBool",
      "contents": "WriteBool(${1:boolean bool})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteBool(bool)"
    },
    {
      "trigger": "WriteByte",
      "contents": "WriteByte(${1:number uint8})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteByte(uint8)"
    },
    {
      "trigger": "WriteDouble",
      "contents": "WriteDouble(${1:number double})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteDouble(double)"
    },
    {
      "trigger": "WriteFloat",
      "contents": "WriteFloat(${1:number float})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteFloat(float)"
    },
    {
      "trigger": "WriteLong",
      "contents": "WriteLong(${1:number int32})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteLong(int32)"
    },
    {
      "trigger": "WriteShort",
      "contents": "WriteShort(${1:number int16})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteShort(int16)"
    },
    {
      "trigger": "WriteUInt64",
      "contents": "WriteUInt64(${1:string uint64})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteUInt64(uint64)"
    },
    {
      "trigger": "WriteULong",
      "contents": "WriteULong(${1:number uint32})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteULong(uint32)"
    },
    {
      "trigger": "WriteUShort",
      "contents": "WriteUShort(${1:number uint16})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "File:WriteUShort(uint16)"
    },
    {
      "trigger": "EnableLooping",
      "contents": "EnableLooping(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:EnableLooping(enable)"
    },
    {
      "trigger": "FFT",
      "contents": "FFT(${1:table tbl}, ${2:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:FFT(tbl, size)"
    },
    {
      "trigger": "Get3DCone",
      "contents": "Get3DCone()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Get3DCone()"
    },
    {
      "trigger": "Get3DEnabled",
      "contents": "Get3DEnabled()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Get3DEnabled()"
    },
    {
      "trigger": "Get3DFadeDistance",
      "contents": "Get3DFadeDistance()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Get3DFadeDistance()"
    },
    {
      "trigger": "GetAverageBitRate",
      "contents": "GetAverageBitRate()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetAverageBitRate()"
    },
    {
      "trigger": "GetBitsPerSample",
      "contents": "GetBitsPerSample()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetBitsPerSample()"
    },
    {
      "trigger": "GetBufferedTime",
      "contents": "GetBufferedTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetBufferedTime()"
    },
    {
      "trigger": "GetFileName",
      "contents": "GetFileName()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetFileName()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetLength()"
    },
    {
      "trigger": "GetLevel",
      "contents": "GetLevel()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetLevel()"
    },
    {
      "trigger": "GetPan",
      "contents": "GetPan()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetPan()"
    },
    {
      "trigger": "GetPlaybackRate",
      "contents": "GetPlaybackRate()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetPlaybackRate()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetPos()"
    },
    {
      "trigger": "GetSamplingRate",
      "contents": "GetSamplingRate()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetSamplingRate()"
    },
    {
      "trigger": "GetState",
      "contents": "GetState()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetState()"
    },
    {
      "trigger": "GetTagsHTTP",
      "contents": "GetTagsHTTP()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTagsHTTP()"
    },
    {
      "trigger": "GetTagsID3",
      "contents": "GetTagsID3()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTagsID3()"
    },
    {
      "trigger": "GetTagsMeta",
      "contents": "GetTagsMeta()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTagsMeta()"
    },
    {
      "trigger": "GetTagsOGG",
      "contents": "GetTagsOGG()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTagsOGG()"
    },
    {
      "trigger": "GetTagsVendor",
      "contents": "GetTagsVendor()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTagsVendor()"
    },
    {
      "trigger": "GetTime",
      "contents": "GetTime()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetTime()"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:GetVolume()"
    },
    {
      "trigger": "Is3D",
      "contents": "Is3D()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Is3D()"
    },
    {
      "trigger": "IsBlockStreamed",
      "contents": "IsBlockStreamed()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:IsBlockStreamed()"
    },
    {
      "trigger": "IsLooping",
      "contents": "IsLooping()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:IsLooping()"
    },
    {
      "trigger": "IsOnline",
      "contents": "IsOnline()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:IsOnline()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:IsValid()"
    },
    {
      "trigger": "Pause",
      "contents": "Pause()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Pause()"
    },
    {
      "trigger": "Play",
      "contents": "Play()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Play()"
    },
    {
      "trigger": "Set3DCone",
      "contents": "Set3DCone(${1:number innerAngle}, ${2:number outerAngle}, ${3:number outerVolume})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Set3DCone(innerAngle, outerAngle, outerVolume)"
    },
    {
      "trigger": "Set3DEnabled",
      "contents": "Set3DEnabled(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Set3DEnabled(enable)"
    },
    {
      "trigger": "Set3DFadeDistance",
      "contents": "Set3DFadeDistance(${1:number min}, ${2:number max})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Set3DFadeDistance(min, max)"
    },
    {
      "trigger": "SetPan",
      "contents": "SetPan(${1:number pan})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:SetPan(pan)"
    },
    {
      "trigger": "SetPlaybackRate",
      "contents": "SetPlaybackRate(${1:number rate})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:SetPlaybackRate(rate)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector pos}, ${2:Vector dir = Vector( 0, 0, 0 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:SetPos(pos, dir)"
    },
    {
      "trigger": "SetTime",
      "contents": "SetTime(${1:number secs}, ${2:boolean dont_decode = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:SetTime(secs, dont_decode)"
    },
    {
      "trigger": "SetVolume",
      "contents": "SetVolume(${1:number volume})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:SetVolume(volume)"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IGModAudioChannel:Stop()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor(${1:number x}, ${2:number y})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetColor(x, y)"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat(${1:string materialFloat})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetFloat(materialFloat)"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt(${1:string materialInt})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetInt(materialInt)"
    },
    {
      "trigger": "GetKeyValues",
      "contents": "GetKeyValues()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetKeyValues()"
    },
    {
      "trigger": "GetMatrix",
      "contents": "GetMatrix(${1:string materialMatrix})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetMatrix(materialMatrix)"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetName()"
    },
    {
      "trigger": "GetShader",
      "contents": "GetShader()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetShader()"
    },
    {
      "trigger": "GetString",
      "contents": "GetString(${1:string materialString})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetString(materialString)"
    },
    {
      "trigger": "GetTexture",
      "contents": "GetTexture(${1:string param})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetTexture(param)"
    },
    {
      "trigger": "GetVector",
      "contents": "GetVector(${1:string materialVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetVector(materialVector)"
    },
    {
      "trigger": "GetVector4D",
      "contents": "GetVector4D(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetVector4D(name)"
    },
    {
      "trigger": "GetVectorLinear",
      "contents": "GetVectorLinear(${1:string materialVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:GetVectorLinear(materialVector)"
    },
    {
      "trigger": "Height",
      "contents": "Height()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:Height()"
    },
    {
      "trigger": "IsError",
      "contents": "IsError()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:IsError()"
    },
    {
      "trigger": "Recompute",
      "contents": "Recompute()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:Recompute()"
    },
    {
      "trigger": "SetDynamicImage",
      "contents": "SetDynamicImage(${1:string path})",
      "annotation": "Menu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetDynamicImage(path)"
    },
    {
      "trigger": "SetFloat",
      "contents": "SetFloat(${1:string materialFloat}, ${2:number float})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetFloat(materialFloat, float)"
    },
    {
      "trigger": "SetInt",
      "contents": "SetInt(${1:string materialInt}, ${2:number int})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetInt(materialInt, int)"
    },
    {
      "trigger": "SetMatrix",
      "contents": "SetMatrix(${1:string materialMatrix}, ${2:VMatrix matrix})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetMatrix(materialMatrix, matrix)"
    },
    {
      "trigger": "SetShader",
      "contents": "SetShader(${1:string shaderName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetShader(shaderName)"
    },
    {
      "trigger": "SetString",
      "contents": "SetString(${1:string materialString}, ${2:string string})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetString(materialString, string)"
    },
    {
      "trigger": "SetTexture",
      "contents": "SetTexture(${1:string materialTexture}, ${2:ITexture texture})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetTexture(materialTexture, texture)"
    },
    {
      "trigger": "SetUndefined",
      "contents": "SetUndefined(${1:string materialValueName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetUndefined(materialValueName)"
    },
    {
      "trigger": "SetVector",
      "contents": "SetVector(${1:string MaterialVector}, ${2:Vector vec})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetVector(MaterialVector, vec)"
    },
    {
      "trigger": "SetVector4D",
      "contents": "SetVector4D(${1:string name}, ${2:number x}, ${3:number y}, ${4:number z}, ${5:number w})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:SetVector4D(name, x, y, z, w)"
    },
    {
      "trigger": "Width",
      "contents": "Width()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMaterial:Width()"
    },
    {
      "trigger": "BuildFromTriangles",
      "contents": "BuildFromTriangles(${1:table vertexes})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMesh:BuildFromTriangles(vertexes)"
    },
    {
      "trigger": "Destroy",
      "contents": "Destroy()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMesh:Destroy()"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMesh:Draw()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IMesh:IsValid()"
    },
    {
      "trigger": "EndBlock",
      "contents": "EndBlock()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:EndBlock()"
    },
    {
      "trigger": "ReadAngle",
      "contents": "ReadAngle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadAngle()"
    },
    {
      "trigger": "ReadBool",
      "contents": "ReadBool()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadBool()"
    },
    {
      "trigger": "ReadEntity",
      "contents": "ReadEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadEntity()"
    },
    {
      "trigger": "ReadFloat",
      "contents": "ReadFloat()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadFloat()"
    },
    {
      "trigger": "ReadInt",
      "contents": "ReadInt()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadInt()"
    },
    {
      "trigger": "ReadString",
      "contents": "ReadString()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadString()"
    },
    {
      "trigger": "ReadVector",
      "contents": "ReadVector()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:ReadVector()"
    },
    {
      "trigger": "StartBlock",
      "contents": "StartBlock()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IRestore:StartBlock()"
    },
    {
      "trigger": "EndBlock",
      "contents": "EndBlock()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:EndBlock()"
    },
    {
      "trigger": "StartBlock",
      "contents": "StartBlock(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:StartBlock(name)"
    },
    {
      "trigger": "WriteAngle",
      "contents": "WriteAngle(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteAngle(ang)"
    },
    {
      "trigger": "WriteBool",
      "contents": "WriteBool(${1:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteBool(bool)"
    },
    {
      "trigger": "WriteEntity",
      "contents": "WriteEntity(${1:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteEntity(ent)"
    },
    {
      "trigger": "WriteFloat",
      "contents": "WriteFloat(${1:number float})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteFloat(float)"
    },
    {
      "trigger": "WriteInt",
      "contents": "WriteInt(${1:number int})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteInt(int)"
    },
    {
      "trigger": "WriteString",
      "contents": "WriteString(${1:string str})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteString(str)"
    },
    {
      "trigger": "WriteVector",
      "contents": "WriteVector(${1:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ISave:WriteVector(vec)"
    },
    {
      "trigger": "Download",
      "contents": "Download()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:Download()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor(${1:number x}, ${2:number y})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:GetColor(x, y)"
    },
    {
      "trigger": "GetMappingHeight",
      "contents": "GetMappingHeight()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:GetMappingHeight()"
    },
    {
      "trigger": "GetMappingWidth",
      "contents": "GetMappingWidth()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:GetMappingWidth()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:GetName()"
    },
    {
      "trigger": "GetNumAnimationFrames",
      "contents": "GetNumAnimationFrames()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:GetNumAnimationFrames()"
    },
    {
      "trigger": "Height",
      "contents": "Height()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:Height()"
    },
    {
      "trigger": "IsError",
      "contents": "IsError()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:IsError()"
    },
    {
      "trigger": "IsErrorTexture",
      "contents": "IsErrorTexture()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:IsErrorTexture()"
    },
    {
      "trigger": "Width",
      "contents": "Width()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ITexture:Width()"
    },
    {
      "trigger": "AddFrame",
      "contents": "AddFrame(${1:number frameTime}, ${2:boolean downsample})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IVideoWriter:AddFrame(frameTime, downsample)"
    },
    {
      "trigger": "Finish",
      "contents": "Finish()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IVideoWriter:Finish()"
    },
    {
      "trigger": "Height",
      "contents": "Height()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IVideoWriter:Height()"
    },
    {
      "trigger": "SetRecordSound",
      "contents": "SetRecordSound(${1:boolean record})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IVideoWriter:SetRecordSound(record)"
    },
    {
      "trigger": "Width",
      "contents": "Width()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "IVideoWriter:Width()"
    },
    {
      "trigger": "Draw",
      "contents": "Draw(${1:number xOffset}, ${2:number yOffset}, ${3:number xAlign = TEXT_ALIGN_LEFT}, ${4:number yAlign = TEXT_ALIGN_TOP}, ${5:number alphaoverride = 255}, ${6:number textAlign = TEXT_ALIGN_LEFT})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "MarkupObject:Draw(xOffset, yOffset, xAlign, yAlign, alphaoverride, textAlign)"
    },
    {
      "trigger": "GetHeight",
      "contents": "GetHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "MarkupObject:GetHeight()"
    },
    {
      "trigger": "GetMaxWidth",
      "contents": "GetMaxWidth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "MarkupObject:GetMaxWidth()"
    },
    {
      "trigger": "GetWidth",
      "contents": "GetWidth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "MarkupObject:GetWidth()"
    },
    {
      "trigger": "Size",
      "contents": "Size()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "MarkupObject:Size()"
    },
    {
      "trigger": "BecomeRagdoll",
      "contents": "BecomeRagdoll(${1:CTakeDamageInfo info})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:BecomeRagdoll(info)"
    },
    {
      "trigger": "BodyMoveXY",
      "contents": "BodyMoveXY()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:BodyMoveXY()"
    },
    {
      "trigger": "ClearLastKnownArea",
      "contents": "ClearLastKnownArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:ClearLastKnownArea()"
    },
    {
      "trigger": "FindSpot",
      "contents": "FindSpot(${1:string type}, ${2:table options})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:FindSpot(type, options)"
    },
    {
      "trigger": "FindSpots",
      "contents": "FindSpots(${1:table specs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:FindSpots(specs)"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetActivity()"
    },
    {
      "trigger": "GetFOV",
      "contents": "GetFOV()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetFOV()"
    },
    {
      "trigger": "GetLastKnownArea",
      "contents": "GetLastKnownArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetLastKnownArea()"
    },
    {
      "trigger": "GetMaxVisionRange",
      "contents": "GetMaxVisionRange()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetMaxVisionRange()"
    },
    {
      "trigger": "GetRangeSquaredTo",
      "contents": "GetRangeSquaredTo(${1:Vector to})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetRangeSquaredTo(to)"
    },
    {
      "trigger": "GetRangeTo",
      "contents": "GetRangeTo(${1:Vector to})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetRangeTo(to)"
    },
    {
      "trigger": "GetSolidMask",
      "contents": "GetSolidMask()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:GetSolidMask()"
    },
    {
      "trigger": "HandleStuck",
      "contents": "HandleStuck()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:HandleStuck()"
    },
    {
      "trigger": "IsAbleToSee",
      "contents": "IsAbleToSee(${1:Entity ent}, ${2:number useFOV = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:IsAbleToSee(ent, useFOV)"
    },
    {
      "trigger": "MoveToPos",
      "contents": "MoveToPos(${1:Vector pos}, ${2:table options})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:MoveToPos(pos, options)"
    },
    {
      "trigger": "PlaySequenceAndWait",
      "contents": "PlaySequenceAndWait(${1:string name}, ${2:number speed = 1})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:PlaySequenceAndWait(name, speed)"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:SetFOV(fov)"
    },
    {
      "trigger": "SetMaxVisionRange",
      "contents": "SetMaxVisionRange(${1:number range})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:SetMaxVisionRange(range)"
    },
    {
      "trigger": "SetSolidMask",
      "contents": "SetSolidMask(${1:number mask})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:SetSolidMask(mask)"
    },
    {
      "trigger": "StartActivity",
      "contents": "StartActivity(${1:number activity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NextBot:StartActivity(activity)"
    },
    {
      "trigger": "AddEntityRelationship",
      "contents": "AddEntityRelationship(${1:Entity target}, ${2:number disposition}, ${3:number priority = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:AddEntityRelationship(target, disposition, priority)"
    },
    {
      "trigger": "AddRelationship",
      "contents": "AddRelationship(${1:string relationstring})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:AddRelationship(relationstring)"
    },
    {
      "trigger": "AlertSound",
      "contents": "AlertSound()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:AlertSound()"
    },
    {
      "trigger": "AutoMovement",
      "contents": "AutoMovement(${1:number interval}, ${2:Entity target = NULL})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:AutoMovement(interval, target)"
    },
    {
      "trigger": "CapabilitiesAdd",
      "contents": "CapabilitiesAdd(${1:number capabilities})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:CapabilitiesAdd(capabilities)"
    },
    {
      "trigger": "CapabilitiesClear",
      "contents": "CapabilitiesClear()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:CapabilitiesClear()"
    },
    {
      "trigger": "CapabilitiesGet",
      "contents": "CapabilitiesGet()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:CapabilitiesGet()"
    },
    {
      "trigger": "CapabilitiesRemove",
      "contents": "CapabilitiesRemove(${1:number capabilities})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:CapabilitiesRemove(capabilities)"
    },
    {
      "trigger": "Classify",
      "contents": "Classify()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:Classify()"
    },
    {
      "trigger": "ClearBlockingEntity",
      "contents": "ClearBlockingEntity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearBlockingEntity()"
    },
    {
      "trigger": "ClearCondition",
      "contents": "ClearCondition(${1:number condition})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearCondition(condition)"
    },
    {
      "trigger": "ClearEnemyMemory",
      "contents": "ClearEnemyMemory(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearEnemyMemory(enemy)"
    },
    {
      "trigger": "ClearExpression",
      "contents": "ClearExpression()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearExpression()"
    },
    {
      "trigger": "ClearGoal",
      "contents": "ClearGoal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearGoal()"
    },
    {
      "trigger": "ClearSchedule",
      "contents": "ClearSchedule()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ClearSchedule()"
    },
    {
      "trigger": "ConditionName",
      "contents": "ConditionName(${1:number cond})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ConditionName(cond)"
    },
    {
      "trigger": "Disposition",
      "contents": "Disposition(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:Disposition(ent)"
    },
    {
      "trigger": "DropWeapon",
      "contents": "DropWeapon(${1:Weapon weapon = nil}, ${2:Vector target = nil}, ${3:Vector velocity = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:DropWeapon(weapon, target, velocity)"
    },
    {
      "trigger": "ExitScriptedSequence",
      "contents": "ExitScriptedSequence()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ExitScriptedSequence()"
    },
    {
      "trigger": "FearSound",
      "contents": "FearSound()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:FearSound()"
    },
    {
      "trigger": "FoundEnemySound",
      "contents": "FoundEnemySound()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:FoundEnemySound()"
    },
    {
      "trigger": "GetActiveWeapon",
      "contents": "GetActiveWeapon()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetActiveWeapon()"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetActivity()"
    },
    {
      "trigger": "GetAimVector",
      "contents": "GetAimVector()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetAimVector()"
    },
    {
      "trigger": "GetArrivalActivity",
      "contents": "GetArrivalActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetArrivalActivity()"
    },
    {
      "trigger": "GetArrivalDirection",
      "contents": "GetArrivalDirection()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetArrivalDirection()"
    },
    {
      "trigger": "GetArrivalSequence",
      "contents": "GetArrivalSequence()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetArrivalSequence()"
    },
    {
      "trigger": "GetBestSoundHint",
      "contents": "GetBestSoundHint(${1:number types})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetBestSoundHint(types)"
    },
    {
      "trigger": "GetBlockingEntity",
      "contents": "GetBlockingEntity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetBlockingEntity()"
    },
    {
      "trigger": "GetCurGoalType",
      "contents": "GetCurGoalType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetCurGoalType()"
    },
    {
      "trigger": "GetCurrentSchedule",
      "contents": "GetCurrentSchedule()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetCurrentSchedule()"
    },
    {
      "trigger": "GetCurrentWeaponProficiency",
      "contents": "GetCurrentWeaponProficiency()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetCurrentWeaponProficiency()"
    },
    {
      "trigger": "GetCurWaypointPos",
      "contents": "GetCurWaypointPos()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetCurWaypointPos()"
    },
    {
      "trigger": "GetEnemy",
      "contents": "GetEnemy()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetEnemy()"
    },
    {
      "trigger": "GetEnemyFirstTimeSeen",
      "contents": "GetEnemyFirstTimeSeen(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetEnemyFirstTimeSeen(enemy)"
    },
    {
      "trigger": "GetEnemyLastKnownPos",
      "contents": "GetEnemyLastKnownPos(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetEnemyLastKnownPos(enemy)"
    },
    {
      "trigger": "GetEnemyLastSeenPos",
      "contents": "GetEnemyLastSeenPos(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetEnemyLastSeenPos(enemy)"
    },
    {
      "trigger": "GetEnemyLastTimeSeen",
      "contents": "GetEnemyLastTimeSeen(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetEnemyLastTimeSeen(enemy)"
    },
    {
      "trigger": "GetExpression",
      "contents": "GetExpression()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetExpression()"
    },
    {
      "trigger": "GetGoalPos",
      "contents": "GetGoalPos()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetGoalPos()"
    },
    {
      "trigger": "GetGoalTarget",
      "contents": "GetGoalTarget()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetGoalTarget()"
    },
    {
      "trigger": "GetHullType",
      "contents": "GetHullType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetHullType()"
    },
    {
      "trigger": "GetIdealActivity",
      "contents": "GetIdealActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetIdealActivity()"
    },
    {
      "trigger": "GetIdealMoveAcceleration",
      "contents": "GetIdealMoveAcceleration()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetIdealMoveAcceleration()"
    },
    {
      "trigger": "GetIdealMoveSpeed",
      "contents": "GetIdealMoveSpeed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetIdealMoveSpeed()"
    },
    {
      "trigger": "GetIdealYaw",
      "contents": "GetIdealYaw()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetIdealYaw()"
    },
    {
      "trigger": "GetKnownEnemies",
      "contents": "GetKnownEnemies()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetKnownEnemies()"
    },
    {
      "trigger": "GetKnownEnemyCount",
      "contents": "GetKnownEnemyCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetKnownEnemyCount()"
    },
    {
      "trigger": "GetLastTimeTookDamageFromEnemy",
      "contents": "GetLastTimeTookDamageFromEnemy(${1:Entity enemy = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetLastTimeTookDamageFromEnemy(enemy)"
    },
    {
      "trigger": "GetMaxLookDistance",
      "contents": "GetMaxLookDistance()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMaxLookDistance()"
    },
    {
      "trigger": "GetMinMoveCheckDist",
      "contents": "GetMinMoveCheckDist()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMinMoveCheckDist()"
    },
    {
      "trigger": "GetMinMoveStopDist",
      "contents": "GetMinMoveStopDist(${1:number minResult  = 10})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMinMoveStopDist(minResult )"
    },
    {
      "trigger": "GetMoveInterval",
      "contents": "GetMoveInterval()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMoveInterval()"
    },
    {
      "trigger": "GetMovementActivity",
      "contents": "GetMovementActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMovementActivity()"
    },
    {
      "trigger": "GetMovementSequence",
      "contents": "GetMovementSequence()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMovementSequence()"
    },
    {
      "trigger": "GetMoveVelocity",
      "contents": "GetMoveVelocity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetMoveVelocity()"
    },
    {
      "trigger": "GetNavType",
      "contents": "GetNavType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetNavType()"
    },
    {
      "trigger": "GetNearestSquadMember",
      "contents": "GetNearestSquadMember()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetNearestSquadMember()"
    },
    {
      "trigger": "GetNextWaypointPos",
      "contents": "GetNextWaypointPos()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetNextWaypointPos()"
    },
    {
      "trigger": "GetNPCState",
      "contents": "GetNPCState()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetNPCState()"
    },
    {
      "trigger": "GetPathDistanceToGoal",
      "contents": "GetPathDistanceToGoal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetPathDistanceToGoal()"
    },
    {
      "trigger": "GetPathTimeToGoal",
      "contents": "GetPathTimeToGoal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetPathTimeToGoal()"
    },
    {
      "trigger": "GetShootPos",
      "contents": "GetShootPos()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetShootPos()"
    },
    {
      "trigger": "GetSquad",
      "contents": "GetSquad()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetSquad()"
    },
    {
      "trigger": "GetTarget",
      "contents": "GetTarget()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetTarget()"
    },
    {
      "trigger": "GetTaskStatus",
      "contents": "GetTaskStatus()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetTaskStatus()"
    },
    {
      "trigger": "GetTimeEnemyLastReacquired",
      "contents": "GetTimeEnemyLastReacquired(${1:Entity enemy = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetTimeEnemyLastReacquired(enemy)"
    },
    {
      "trigger": "GetViewOffset",
      "contents": "GetViewOffset()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetViewOffset()"
    },
    {
      "trigger": "GetWeapon",
      "contents": "GetWeapon(${1:string class})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetWeapon(class)"
    },
    {
      "trigger": "GetWeapons",
      "contents": "GetWeapons()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:GetWeapons()"
    },
    {
      "trigger": "Give",
      "contents": "Give(${1:string weapon})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:Give(weapon)"
    },
    {
      "trigger": "HasCondition",
      "contents": "HasCondition(${1:number condition})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:HasCondition(condition)"
    },
    {
      "trigger": "HasEnemyEluded",
      "contents": "HasEnemyEluded(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:HasEnemyEluded(enemy)"
    },
    {
      "trigger": "HasEnemyMemory",
      "contents": "HasEnemyMemory(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:HasEnemyMemory(enemy)"
    },
    {
      "trigger": "HasObstacles",
      "contents": "HasObstacles()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:HasObstacles()"
    },
    {
      "trigger": "IdleSound",
      "contents": "IdleSound()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IdleSound()"
    },
    {
      "trigger": "IgnoreEnemyUntil",
      "contents": "IgnoreEnemyUntil(${1:Entity enemy}, ${2:number until})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IgnoreEnemyUntil(enemy, until)"
    },
    {
      "trigger": "IsCurrentSchedule",
      "contents": "IsCurrentSchedule(${1:number schedule})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsCurrentSchedule(schedule)"
    },
    {
      "trigger": "IsCurWaypointGoal",
      "contents": "IsCurWaypointGoal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsCurWaypointGoal()"
    },
    {
      "trigger": "IsFacingIdealYaw",
      "contents": "IsFacingIdealYaw()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsFacingIdealYaw()"
    },
    {
      "trigger": "IsGoalActive",
      "contents": "IsGoalActive()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsGoalActive()"
    },
    {
      "trigger": "IsMoveYawLocked",
      "contents": "IsMoveYawLocked()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsMoveYawLocked()"
    },
    {
      "trigger": "IsMoving",
      "contents": "IsMoving()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsMoving()"
    },
    {
      "trigger": "IsRunningBehavior",
      "contents": "IsRunningBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsRunningBehavior()"
    },
    {
      "trigger": "IsSquadLeader",
      "contents": "IsSquadLeader()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsSquadLeader()"
    },
    {
      "trigger": "IsUnreachable",
      "contents": "IsUnreachable(${1:Entity testEntity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:IsUnreachable(testEntity)"
    },
    {
      "trigger": "LostEnemySound",
      "contents": "LostEnemySound()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:LostEnemySound()"
    },
    {
      "trigger": "MaintainActivity",
      "contents": "MaintainActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MaintainActivity()"
    },
    {
      "trigger": "MarkEnemyAsEluded",
      "contents": "MarkEnemyAsEluded(${1:Entity enemy = GetEnemy()})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MarkEnemyAsEluded(enemy)"
    },
    {
      "trigger": "MarkTookDamageFromEnemy",
      "contents": "MarkTookDamageFromEnemy(${1:Entity enemy = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MarkTookDamageFromEnemy(enemy)"
    },
    {
      "trigger": "MoveClimbExec",
      "contents": "MoveClimbExec(${1:Vector destination}, ${2:Vector dir}, ${3:number distance}, ${4:number yaw}, ${5:number left})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveClimbExec(destination, dir, distance, yaw, left)"
    },
    {
      "trigger": "MoveClimbStart",
      "contents": "MoveClimbStart(${1:Vector destination}, ${2:Vector dir}, ${3:number distance}, ${4:number yaw})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveClimbStart(destination, dir, distance, yaw)"
    },
    {
      "trigger": "MoveClimbStop",
      "contents": "MoveClimbStop()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveClimbStop()"
    },
    {
      "trigger": "MoveJumpExec",
      "contents": "MoveJumpExec()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveJumpExec()"
    },
    {
      "trigger": "MoveJumpStart",
      "contents": "MoveJumpStart(${1:Vector vel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveJumpStart(vel)"
    },
    {
      "trigger": "MoveJumpStop",
      "contents": "MoveJumpStop()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveJumpStop()"
    },
    {
      "trigger": "MoveOrder",
      "contents": "MoveOrder(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveOrder(position)"
    },
    {
      "trigger": "MovePause",
      "contents": "MovePause()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MovePause()"
    },
    {
      "trigger": "MoveStart",
      "contents": "MoveStart()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveStart()"
    },
    {
      "trigger": "MoveStop",
      "contents": "MoveStop()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:MoveStop()"
    },
    {
      "trigger": "NavSetGoal",
      "contents": "NavSetGoal(${1:Vector pos}, ${2:number length}, ${3:Vector dir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:NavSetGoal(pos, length, dir)"
    },
    {
      "trigger": "NavSetGoalPos",
      "contents": "NavSetGoalPos(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:NavSetGoalPos(pos)"
    },
    {
      "trigger": "NavSetGoalTarget",
      "contents": "NavSetGoalTarget(${1:Entity target}, ${2:Vector offset = Vector( 0, 0, 0 )})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:NavSetGoalTarget(target, offset)"
    },
    {
      "trigger": "NavSetRandomGoal",
      "contents": "NavSetRandomGoal(${1:number minPathLength}, ${2:Vector dir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:NavSetRandomGoal(minPathLength, dir)"
    },
    {
      "trigger": "NavSetWanderGoal",
      "contents": "NavSetWanderGoal(${1:number xOffset}, ${2:number yOffset})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:NavSetWanderGoal(xOffset, yOffset)"
    },
    {
      "trigger": "PickupWeapon",
      "contents": "PickupWeapon(${1:Weapon wep})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:PickupWeapon(wep)"
    },
    {
      "trigger": "PlaySentence",
      "contents": "PlaySentence(${1:string sentence}, ${2:number delay}, ${3:number volume})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:PlaySentence(sentence, delay, volume)"
    },
    {
      "trigger": "RememberUnreachable",
      "contents": "RememberUnreachable(${1:Entity ent}, ${2:number time = 3})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:RememberUnreachable(ent, time)"
    },
    {
      "trigger": "RemoveIgnoreConditions",
      "contents": "RemoveIgnoreConditions(${1:number conditions = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:RemoveIgnoreConditions(conditions)"
    },
    {
      "trigger": "ResetIdealActivity",
      "contents": "ResetIdealActivity(${1:number act})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ResetIdealActivity(act)"
    },
    {
      "trigger": "ResetMoveCalc",
      "contents": "ResetMoveCalc()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:ResetMoveCalc()"
    },
    {
      "trigger": "RunEngineTask",
      "contents": "RunEngineTask(${1:number taskID}, ${2:number taskData})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:RunEngineTask(taskID, taskData)"
    },
    {
      "trigger": "SelectWeapon",
      "contents": "SelectWeapon(${1:string class})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SelectWeapon(class)"
    },
    {
      "trigger": "SentenceStop",
      "contents": "SentenceStop()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SentenceStop()"
    },
    {
      "trigger": "SetActivity",
      "contents": "SetActivity(${1:number act})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetActivity(act)"
    },
    {
      "trigger": "SetArrivalActivity",
      "contents": "SetArrivalActivity(${1:number act})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetArrivalActivity(act)"
    },
    {
      "trigger": "SetArrivalDirection",
      "contents": "SetArrivalDirection(${1:Vector dir})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetArrivalDirection(dir)"
    },
    {
      "trigger": "SetArrivalDistance",
      "contents": "SetArrivalDistance(${1:number dist})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetArrivalDistance(dist)"
    },
    {
      "trigger": "SetArrivalSequence",
      "contents": "SetArrivalSequence(${1:number seq})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetArrivalSequence(seq)"
    },
    {
      "trigger": "SetArrivalSpeed",
      "contents": "SetArrivalSpeed(${1:number speed})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetArrivalSpeed(speed)"
    },
    {
      "trigger": "SetCondition",
      "contents": "SetCondition(${1:number condition})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetCondition(condition)"
    },
    {
      "trigger": "SetCurrentWeaponProficiency",
      "contents": "SetCurrentWeaponProficiency(${1:number proficiency})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetCurrentWeaponProficiency(proficiency)"
    },
    {
      "trigger": "SetEnemy",
      "contents": "SetEnemy(${1:Entity enemy}, ${2:boolean newenemy = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetEnemy(enemy, newenemy)"
    },
    {
      "trigger": "SetExpression",
      "contents": "SetExpression(${1:string expression})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetExpression(expression)"
    },
    {
      "trigger": "SetHullSizeNormal",
      "contents": "SetHullSizeNormal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetHullSizeNormal()"
    },
    {
      "trigger": "SetHullType",
      "contents": "SetHullType(${1:number hullType})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetHullType(hullType)"
    },
    {
      "trigger": "SetIdealActivity",
      "contents": "SetIdealActivity(${1:number })",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetIdealActivity()"
    },
    {
      "trigger": "SetIdealYaw",
      "contents": "SetIdealYaw(${1:number angle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetIdealYaw(angle)"
    },
    {
      "trigger": "SetIdealYawAndUpdate",
      "contents": "SetIdealYawAndUpdate(${1:number angle}, ${2:number speed = -1})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetIdealYawAndUpdate(angle, speed)"
    },
    {
      "trigger": "SetIgnoreConditions",
      "contents": "SetIgnoreConditions(${1:number conditions})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetIgnoreConditions(conditions)"
    },
    {
      "trigger": "SetLastPosition",
      "contents": "SetLastPosition(${1:Vector Position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetLastPosition(Position)"
    },
    {
      "trigger": "SetMaxLookDistance",
      "contents": "SetMaxLookDistance(${1:number dist})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMaxLookDistance(dist)"
    },
    {
      "trigger": "SetMaxRouteRebuildTime",
      "contents": "SetMaxRouteRebuildTime(${1:number time})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMaxRouteRebuildTime(time)"
    },
    {
      "trigger": "SetMoveInterval",
      "contents": "SetMoveInterval(${1:number time})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMoveInterval(time)"
    },
    {
      "trigger": "SetMovementActivity",
      "contents": "SetMovementActivity(${1:number activity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMovementActivity(activity)"
    },
    {
      "trigger": "SetMovementSequence",
      "contents": "SetMovementSequence(${1:number sequenceId})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMovementSequence(sequenceId)"
    },
    {
      "trigger": "SetMoveVelocity",
      "contents": "SetMoveVelocity(${1:Vector vel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMoveVelocity(vel)"
    },
    {
      "trigger": "SetMoveYawLocked",
      "contents": "SetMoveYawLocked(${1:boolean lock})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetMoveYawLocked(lock)"
    },
    {
      "trigger": "SetNavType",
      "contents": "SetNavType(${1:number navtype})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetNavType(navtype)"
    },
    {
      "trigger": "SetNPCState",
      "contents": "SetNPCState(${1:number state})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetNPCState(state)"
    },
    {
      "trigger": "SetSchedule",
      "contents": "SetSchedule(${1:number schedule})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetSchedule(schedule)"
    },
    {
      "trigger": "SetSquad",
      "contents": "SetSquad(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetSquad(name)"
    },
    {
      "trigger": "SetTarget",
      "contents": "SetTarget(${1:Entity entity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetTarget(entity)"
    },
    {
      "trigger": "SetTaskStatus",
      "contents": "SetTaskStatus(${1:number status})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetTaskStatus(status)"
    },
    {
      "trigger": "SetUnforgettable",
      "contents": "SetUnforgettable(${1:Entity enemy}, ${2:boolean set = true})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetUnforgettable(enemy, set)"
    },
    {
      "trigger": "SetViewOffset",
      "contents": "SetViewOffset(${1:Vector })",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:SetViewOffset()"
    },
    {
      "trigger": "StartEngineTask",
      "contents": "StartEngineTask(${1:number task}, ${2:number taskData})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:StartEngineTask(task, taskData)"
    },
    {
      "trigger": "StopMoving",
      "contents": "StopMoving()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:StopMoving()"
    },
    {
      "trigger": "TargetOrder",
      "contents": "TargetOrder(${1:Entity target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:TargetOrder(target)"
    },
    {
      "trigger": "TaskComplete",
      "contents": "TaskComplete()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:TaskComplete()"
    },
    {
      "trigger": "TaskFail",
      "contents": "TaskFail(${1:string task})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:TaskFail(task)"
    },
    {
      "trigger": "UpdateEnemyMemory",
      "contents": "UpdateEnemyMemory(${1:Entity enemy}, ${2:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UpdateEnemyMemory(enemy, pos)"
    },
    {
      "trigger": "UpdateTurnActivity",
      "contents": "UpdateTurnActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UpdateTurnActivity()"
    },
    {
      "trigger": "UpdateYaw",
      "contents": "UpdateYaw(${1:number speed = -1})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UpdateYaw(speed)"
    },
    {
      "trigger": "UseActBusyBehavior",
      "contents": "UseActBusyBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseActBusyBehavior()"
    },
    {
      "trigger": "UseAssaultBehavior",
      "contents": "UseAssaultBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseAssaultBehavior()"
    },
    {
      "trigger": "UseFollowBehavior",
      "contents": "UseFollowBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseFollowBehavior()"
    },
    {
      "trigger": "UseFuncTankBehavior",
      "contents": "UseFuncTankBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseFuncTankBehavior()"
    },
    {
      "trigger": "UseLeadBehavior",
      "contents": "UseLeadBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseLeadBehavior()"
    },
    {
      "trigger": "UseNoBehavior",
      "contents": "UseNoBehavior()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "NPC:UseNoBehavior()"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Panel object})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Add(object)"
    },
    {
      "trigger": "AddText",
      "contents": "AddText()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AddText()"
    },
    {
      "trigger": "AlignBottom",
      "contents": "AlignBottom(${1:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AlignBottom(offset)"
    },
    {
      "trigger": "AlignLeft",
      "contents": "AlignLeft(${1:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AlignLeft(offset)"
    },
    {
      "trigger": "AlignRight",
      "contents": "AlignRight(${1:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AlignRight(offset)"
    },
    {
      "trigger": "AlignTop",
      "contents": "AlignTop(${1:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AlignTop(offset)"
    },
    {
      "trigger": "AlphaTo",
      "contents": "AlphaTo(${1:number alpha}, ${2:number duration}, ${3:number delay = 0}, ${4:function callback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AlphaTo(alpha, duration, delay, callback)"
    },
    {
      "trigger": "AnimationThinkInternal",
      "contents": "AnimationThinkInternal()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AnimationThinkInternal()"
    },
    {
      "trigger": "AnimTail",
      "contents": "AnimTail()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AnimTail()"
    },
    {
      "trigger": "AppendText",
      "contents": "AppendText(${1:string txt})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AppendText(txt)"
    },
    {
      "trigger": "AppendTextWithURLs",
      "contents": "AppendTextWithURLs(${1:string txt})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:AppendTextWithURLs(txt)"
    },
    {
      "trigger": "ApplyGWEN",
      "contents": "ApplyGWEN(${1:table GWENTable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ApplyGWEN(GWENTable)"
    },
    {
      "trigger": "Center",
      "contents": "Center()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Center()"
    },
    {
      "trigger": "CenterHorizontal",
      "contents": "CenterHorizontal(${1:number fraction = 0.5})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CenterHorizontal(fraction)"
    },
    {
      "trigger": "CenterVertical",
      "contents": "CenterVertical(${1:number fraction = 0.5})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CenterVertical(fraction)"
    },
    {
      "trigger": "ChildCount",
      "contents": "ChildCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ChildCount()"
    },
    {
      "trigger": "ChildrenSize",
      "contents": "ChildrenSize()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ChildrenSize()"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Clear()"
    },
    {
      "trigger": "ColorTo",
      "contents": "ColorTo(${1:table color}, ${2:number length}, ${3:number delay}, ${4:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ColorTo(color, length, delay, callback)"
    },
    {
      "trigger": "Command",
      "contents": "Command(${1:string command})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Command(command)"
    },
    {
      "trigger": "ConVarChanged",
      "contents": "ConVarChanged(${1:string newValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ConVarChanged(newValue)"
    },
    {
      "trigger": "ConVarNumberThink",
      "contents": "ConVarNumberThink()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ConVarNumberThink()"
    },
    {
      "trigger": "ConVarStringThink",
      "contents": "ConVarStringThink()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ConVarStringThink()"
    },
    {
      "trigger": "CopyBase",
      "contents": "CopyBase(${1:Panel srcPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopyBase(srcPanel)"
    },
    {
      "trigger": "CopyBounds",
      "contents": "CopyBounds(${1:Panel base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopyBounds(base)"
    },
    {
      "trigger": "CopyHeight",
      "contents": "CopyHeight(${1:Panel base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopyHeight(base)"
    },
    {
      "trigger": "CopyPos",
      "contents": "CopyPos(${1:Panel base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopyPos(base)"
    },
    {
      "trigger": "CopySelected",
      "contents": "CopySelected()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopySelected()"
    },
    {
      "trigger": "CopyWidth",
      "contents": "CopyWidth(${1:Panel base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CopyWidth(base)"
    },
    {
      "trigger": "CursorPos",
      "contents": "CursorPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CursorPos()"
    },
    {
      "trigger": "CutSelected",
      "contents": "CutSelected()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:CutSelected()"
    },
    {
      "trigger": "DeleteCookie",
      "contents": "DeleteCookie(${1:string cookieName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DeleteCookie(cookieName)"
    },
    {
      "trigger": "DisableLerp",
      "contents": "DisableLerp()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DisableLerp()"
    },
    {
      "trigger": "Distance",
      "contents": "Distance(${1:Panel tgtPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Distance(tgtPanel)"
    },
    {
      "trigger": "DistanceFrom",
      "contents": "DistanceFrom(${1:number posX}, ${2:number posY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DistanceFrom(posX, posY)"
    },
    {
      "trigger": "Dock",
      "contents": "Dock(${1:number dockType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Dock(dockType)"
    },
    {
      "trigger": "DockMargin",
      "contents": "DockMargin(${1:number marginLeft}, ${2:number marginTop}, ${3:number marginRight}, ${4:number marginBottom})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DockMargin(marginLeft, marginTop, marginRight, marginBottom)"
    },
    {
      "trigger": "DockPadding",
      "contents": "DockPadding(${1:number paddingLeft}, ${2:number paddingTop}, ${3:number paddingRight}, ${4:number paddingBottom})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DockPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)"
    },
    {
      "trigger": "DoModal",
      "contents": "DoModal()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DoModal()"
    },
    {
      "trigger": "DragClick",
      "contents": "DragClick()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DragClick()"
    },
    {
      "trigger": "DragHover",
      "contents": "DragHover(${1:number HoverTime})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DragHover(HoverTime)"
    },
    {
      "trigger": "DragHoverEnd",
      "contents": "DragHoverEnd()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DragHoverEnd()"
    },
    {
      "trigger": "DragMousePress",
      "contents": "DragMousePress(${1:number mouseCode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DragMousePress(mouseCode)"
    },
    {
      "trigger": "DragMouseRelease",
      "contents": "DragMouseRelease(${1:number mouseCode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DragMouseRelease(mouseCode)"
    },
    {
      "trigger": "DrawDragHover",
      "contents": "DrawDragHover(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawDragHover(x, y, width, height)"
    },
    {
      "trigger": "DrawFilledRect",
      "contents": "DrawFilledRect()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawFilledRect()"
    },
    {
      "trigger": "DrawOutlinedRect",
      "contents": "DrawOutlinedRect()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawOutlinedRect()"
    },
    {
      "trigger": "DrawSelections",
      "contents": "DrawSelections()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawSelections()"
    },
    {
      "trigger": "DrawTextEntryText",
      "contents": "DrawTextEntryText(${1:table textCol}, ${2:table highlightCol}, ${3:table cursorCol})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawTextEntryText(textCol, highlightCol, cursorCol)"
    },
    {
      "trigger": "DrawTexturedRect",
      "contents": "DrawTexturedRect()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:DrawTexturedRect()"
    },
    {
      "trigger": "Droppable",
      "contents": "Droppable(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Droppable(name)"
    },
    {
      "trigger": "EndBoxSelection",
      "contents": "EndBoxSelection()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:EndBoxSelection()"
    },
    {
      "trigger": "Exec",
      "contents": "Exec(${1:string cmd})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Exec(cmd)"
    },
    {
      "trigger": "Find",
      "contents": "Find(${1:string panelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Find(panelName)"
    },
    {
      "trigger": "FocusNext",
      "contents": "FocusNext()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:FocusNext()"
    },
    {
      "trigger": "FocusPrevious",
      "contents": "FocusPrevious()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:FocusPrevious()"
    },
    {
      "trigger": "GetAlpha",
      "contents": "GetAlpha()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetAlpha()"
    },
    {
      "trigger": "GetBGColor",
      "contents": "GetBGColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetBGColor()"
    },
    {
      "trigger": "GetBounds",
      "contents": "GetBounds()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetBounds()"
    },
    {
      "trigger": "GetCaretPos",
      "contents": "GetCaretPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetCaretPos()"
    },
    {
      "trigger": "GetChild",
      "contents": "GetChild(${1:number childIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetChild(childIndex)"
    },
    {
      "trigger": "GetChildPosition",
      "contents": "GetChildPosition(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetChildPosition(pnl)"
    },
    {
      "trigger": "GetChildren",
      "contents": "GetChildren()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetChildren()"
    },
    {
      "trigger": "GetChildrenInRect",
      "contents": "GetChildrenInRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetChildrenInRect(x, y, w, h)"
    },
    {
      "trigger": "GetClassName",
      "contents": "GetClassName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetClassName()"
    },
    {
      "trigger": "GetClosestChild",
      "contents": "GetClosestChild(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetClosestChild(x, y)"
    },
    {
      "trigger": "GetContentSize",
      "contents": "GetContentSize()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetContentSize()"
    },
    {
      "trigger": "GetCookie",
      "contents": "GetCookie(${1:string cookieName}, ${2:string default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetCookie(cookieName, default)"
    },
    {
      "trigger": "GetCookieName",
      "contents": "GetCookieName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetCookieName()"
    },
    {
      "trigger": "GetCookieNumber",
      "contents": "GetCookieNumber(${1:string cookieName}, ${2:number default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetCookieNumber(cookieName, default)"
    },
    {
      "trigger": "GetDock",
      "contents": "GetDock()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetDock()"
    },
    {
      "trigger": "GetDockMargin",
      "contents": "GetDockMargin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetDockMargin()"
    },
    {
      "trigger": "GetDockPadding",
      "contents": "GetDockPadding()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetDockPadding()"
    },
    {
      "trigger": "GetFGColor",
      "contents": "GetFGColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetFGColor()"
    },
    {
      "trigger": "GetFont",
      "contents": "GetFont()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetFont()"
    },
    {
      "trigger": "GetHTMLMaterial",
      "contents": "GetHTMLMaterial()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetHTMLMaterial()"
    },
    {
      "trigger": "GetLineHeight",
      "contents": "GetLineHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetLineHeight()"
    },
    {
      "trigger": "GetMaximumCharCount",
      "contents": "GetMaximumCharCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetMaximumCharCount()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetName()"
    },
    {
      "trigger": "GetNumLines",
      "contents": "GetNumLines()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetNumLines()"
    },
    {
      "trigger": "GetParent",
      "contents": "GetParent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetParent()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetPos()"
    },
    {
      "trigger": "GetScrollStartIndexes",
      "contents": "GetScrollStartIndexes()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetScrollStartIndexes()"
    },
    {
      "trigger": "GetSelectedChildren",
      "contents": "GetSelectedChildren()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetSelectedChildren()"
    },
    {
      "trigger": "GetSelectedTextRange",
      "contents": "GetSelectedTextRange()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetSelectedTextRange()"
    },
    {
      "trigger": "GetSelectionCanvas",
      "contents": "GetSelectionCanvas()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetSelectionCanvas()"
    },
    {
      "trigger": "GetSize",
      "contents": "GetSize()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetSize()"
    },
    {
      "trigger": "GetSkin",
      "contents": "GetSkin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetSkin()"
    },
    {
      "trigger": "GetTable",
      "contents": "GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTable()"
    },
    {
      "trigger": "GetTall",
      "contents": "GetTall()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTall()"
    },
    {
      "trigger": "GetText",
      "contents": "GetText()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetText()"
    },
    {
      "trigger": "GetTextInset",
      "contents": "GetTextInset()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTextInset()"
    },
    {
      "trigger": "GetTextSize",
      "contents": "GetTextSize()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTextSize()"
    },
    {
      "trigger": "GetTooltip",
      "contents": "GetTooltip()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTooltip()"
    },
    {
      "trigger": "GetTooltipDelay",
      "contents": "GetTooltipDelay()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTooltipDelay()"
    },
    {
      "trigger": "GetTooltipPanel",
      "contents": "GetTooltipPanel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetTooltipPanel()"
    },
    {
      "trigger": "GetValidReceiverSlot",
      "contents": "GetValidReceiverSlot()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetValidReceiverSlot()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetValue()"
    },
    {
      "trigger": "GetWide",
      "contents": "GetWide()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetWide()"
    },
    {
      "trigger": "GetX",
      "contents": "GetX()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetX()"
    },
    {
      "trigger": "GetY",
      "contents": "GetY()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetY()"
    },
    {
      "trigger": "GetZPos",
      "contents": "GetZPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GetZPos()"
    },
    {
      "trigger": "GoBack",
      "contents": "GoBack()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GoBack()"
    },
    {
      "trigger": "GoForward",
      "contents": "GoForward()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GoForward()"
    },
    {
      "trigger": "GoToHistoryOffset",
      "contents": "GoToHistoryOffset(${1:number offset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GoToHistoryOffset(offset)"
    },
    {
      "trigger": "GotoTextEnd",
      "contents": "GotoTextEnd()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GotoTextEnd()"
    },
    {
      "trigger": "GotoTextStart",
      "contents": "GotoTextStart()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GotoTextStart()"
    },
    {
      "trigger": "GWEN_SetCheckboxText",
      "contents": "GWEN_SetCheckboxText(${1:string txt})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetCheckboxText(txt)"
    },
    {
      "trigger": "GWEN_SetControlName",
      "contents": "GWEN_SetControlName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetControlName(name)"
    },
    {
      "trigger": "GWEN_SetDock",
      "contents": "GWEN_SetDock(${1:string dockState})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetDock(dockState)"
    },
    {
      "trigger": "GWEN_SetHorizontalAlign",
      "contents": "GWEN_SetHorizontalAlign(${1:string hAlign})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetHorizontalAlign(hAlign)"
    },
    {
      "trigger": "GWEN_SetMargin",
      "contents": "GWEN_SetMargin(${1:table margins})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetMargin(margins)"
    },
    {
      "trigger": "GWEN_SetMax",
      "contents": "GWEN_SetMax(${1:number maxValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetMax(maxValue)"
    },
    {
      "trigger": "GWEN_SetMin",
      "contents": "GWEN_SetMin(${1:number minValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetMin(minValue)"
    },
    {
      "trigger": "GWEN_SetPosition",
      "contents": "GWEN_SetPosition(${1:table pos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetPosition(pos)"
    },
    {
      "trigger": "GWEN_SetSize",
      "contents": "GWEN_SetSize(${1:table size})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetSize(size)"
    },
    {
      "trigger": "GWEN_SetText",
      "contents": "GWEN_SetText(${1:string txt})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:GWEN_SetText(txt)"
    },
    {
      "trigger": "HasChildren",
      "contents": "HasChildren()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:HasChildren()"
    },
    {
      "trigger": "HasFocus",
      "contents": "HasFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:HasFocus()"
    },
    {
      "trigger": "HasHierarchicalFocus",
      "contents": "HasHierarchicalFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:HasHierarchicalFocus()"
    },
    {
      "trigger": "HasParent",
      "contents": "HasParent(${1:Panel parentPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:HasParent(parentPanel)"
    },
    {
      "trigger": "Hide",
      "contents": "Hide()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Hide()"
    },
    {
      "trigger": "InsertClickableTextEnd",
      "contents": "InsertClickableTextEnd()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InsertClickableTextEnd()"
    },
    {
      "trigger": "InsertClickableTextStart",
      "contents": "InsertClickableTextStart(${1:string signalValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InsertClickableTextStart(signalValue)"
    },
    {
      "trigger": "InsertColorChange",
      "contents": "InsertColorChange(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InsertColorChange(r, g, b, a)"
    },
    {
      "trigger": "InsertFade",
      "contents": "InsertFade(${1:number sustain}, ${2:number length})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InsertFade(sustain, length)"
    },
    {
      "trigger": "InvalidateChildren",
      "contents": "InvalidateChildren(${1:boolean recursive = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InvalidateChildren(recursive)"
    },
    {
      "trigger": "InvalidateLayout",
      "contents": "InvalidateLayout(${1:boolean layoutNow = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InvalidateLayout(layoutNow)"
    },
    {
      "trigger": "InvalidateParent",
      "contents": "InvalidateParent(${1:boolean layoutNow = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:InvalidateParent(layoutNow)"
    },
    {
      "trigger": "IsChildHovered",
      "contents": "IsChildHovered(${1:boolean immediate = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsChildHovered(immediate)"
    },
    {
      "trigger": "IsDraggable",
      "contents": "IsDraggable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsDraggable()"
    },
    {
      "trigger": "IsDragging",
      "contents": "IsDragging()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsDragging()"
    },
    {
      "trigger": "IsEnabled",
      "contents": "IsEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsEnabled()"
    },
    {
      "trigger": "IsHovered",
      "contents": "IsHovered()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsHovered()"
    },
    {
      "trigger": "IsKeyboardInputEnabled",
      "contents": "IsKeyboardInputEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsKeyboardInputEnabled()"
    },
    {
      "trigger": "IsLoading",
      "contents": "IsLoading()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsLoading()"
    },
    {
      "trigger": "IsMarkedForDeletion",
      "contents": "IsMarkedForDeletion()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsMarkedForDeletion()"
    },
    {
      "trigger": "IsModal",
      "contents": "IsModal()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsModal()"
    },
    {
      "trigger": "IsMouseInputEnabled",
      "contents": "IsMouseInputEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsMouseInputEnabled()"
    },
    {
      "trigger": "IsMultiline",
      "contents": "IsMultiline()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsMultiline()"
    },
    {
      "trigger": "IsOurChild",
      "contents": "IsOurChild(${1:Panel childPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsOurChild(childPanel)"
    },
    {
      "trigger": "IsPopup",
      "contents": "IsPopup()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsPopup()"
    },
    {
      "trigger": "IsSelectable",
      "contents": "IsSelectable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsSelectable()"
    },
    {
      "trigger": "IsSelected",
      "contents": "IsSelected()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsSelected()"
    },
    {
      "trigger": "IsSelectionCanvas",
      "contents": "IsSelectionCanvas()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsSelectionCanvas()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsValid()"
    },
    {
      "trigger": "IsVisible",
      "contents": "IsVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsVisible()"
    },
    {
      "trigger": "IsWorldClicker",
      "contents": "IsWorldClicker()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:IsWorldClicker()"
    },
    {
      "trigger": "KillFocus",
      "contents": "KillFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:KillFocus()"
    },
    {
      "trigger": "LerpPositions",
      "contents": "LerpPositions(${1:number speed}, ${2:boolean easeOut})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LerpPositions(speed, easeOut)"
    },
    {
      "trigger": "LoadControlsFromFile",
      "contents": "LoadControlsFromFile(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LoadControlsFromFile(path)"
    },
    {
      "trigger": "LoadControlsFromString",
      "contents": "LoadControlsFromString(${1:string data})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LoadControlsFromString(data)"
    },
    {
      "trigger": "LoadGWENFile",
      "contents": "LoadGWENFile(${1:string filename}, ${2:string path = GAME})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LoadGWENFile(filename, path)"
    },
    {
      "trigger": "LoadGWENString",
      "contents": "LoadGWENString(${1:string str})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LoadGWENString(str)"
    },
    {
      "trigger": "LoadTGAImage",
      "contents": "LoadTGAImage(${1:string imageName}, ${2:string strPath})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LoadTGAImage(imageName, strPath)"
    },
    {
      "trigger": "LocalCursorPos",
      "contents": "LocalCursorPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LocalCursorPos()"
    },
    {
      "trigger": "LocalToScreen",
      "contents": "LocalToScreen(${1:number posX}, ${2:number posY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:LocalToScreen(posX, posY)"
    },
    {
      "trigger": "MakePopup",
      "contents": "MakePopup()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MakePopup()"
    },
    {
      "trigger": "MouseCapture",
      "contents": "MouseCapture(${1:boolean doCapture})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MouseCapture(doCapture)"
    },
    {
      "trigger": "MoveAbove",
      "contents": "MoveAbove(${1:Panel panel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveAbove(panel, offset)"
    },
    {
      "trigger": "MoveBelow",
      "contents": "MoveBelow(${1:Panel panel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveBelow(panel, offset)"
    },
    {
      "trigger": "MoveBy",
      "contents": "MoveBy(${1:number moveX}, ${2:number moveY}, ${3:number time}, ${4:number delay = 0}, ${5:number ease = -1}, ${6:function callback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveBy(moveX, moveY, time, delay, ease, callback)"
    },
    {
      "trigger": "MoveLeftOf",
      "contents": "MoveLeftOf(${1:Panel panel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveLeftOf(panel, offset)"
    },
    {
      "trigger": "MoveRightOf",
      "contents": "MoveRightOf(${1:Panel panel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveRightOf(panel, offset)"
    },
    {
      "trigger": "MoveTo",
      "contents": "MoveTo(${1:number posX}, ${2:number posY}, ${3:number time}, ${4:number delay = 0}, ${5:number ease = -1}, ${6:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveTo(posX, posY, time, delay, ease, callback)"
    },
    {
      "trigger": "MoveToAfter",
      "contents": "MoveToAfter(${1:Panel siblingPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveToAfter(siblingPanel)"
    },
    {
      "trigger": "MoveToBack",
      "contents": "MoveToBack()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveToBack()"
    },
    {
      "trigger": "MoveToBefore",
      "contents": "MoveToBefore(${1:Panel siblingPanel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveToBefore(siblingPanel)"
    },
    {
      "trigger": "MoveToFront",
      "contents": "MoveToFront()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:MoveToFront()"
    },
    {
      "trigger": "NewAnimation",
      "contents": "NewAnimation(${1:number length}, ${2:number delay = 0}, ${3:number ease = -1}, ${4:function callback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:NewAnimation(length, delay, ease, callback)"
    },
    {
      "trigger": "NewObject",
      "contents": "NewObject(${1:string objectName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:NewObject(objectName)"
    },
    {
      "trigger": "NewObjectCallback",
      "contents": "NewObjectCallback(${1:string objectName}, ${2:string callbackName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:NewObjectCallback(objectName, callbackName)"
    },
    {
      "trigger": "NoClipping",
      "contents": "NoClipping(${1:boolean clip})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:NoClipping(clip)"
    },
    {
      "trigger": "NumSelectedChildren",
      "contents": "NumSelectedChildren()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:NumSelectedChildren()"
    },
    {
      "trigger": "OpenURL",
      "contents": "OpenURL(${1:string URL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:OpenURL(URL)"
    },
    {
      "trigger": "PaintAt",
      "contents": "PaintAt(${1:number posX}, ${2:number posY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:PaintAt(posX, posY)"
    },
    {
      "trigger": "PaintManual",
      "contents": "PaintManual(${1:boolean unclamp = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:PaintManual(unclamp)"
    },
    {
      "trigger": "ParentToHUD",
      "contents": "ParentToHUD()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ParentToHUD()"
    },
    {
      "trigger": "Paste",
      "contents": "Paste()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Paste()"
    },
    {
      "trigger": "PositionLabel",
      "contents": "PositionLabel(${1:number lblWidth}, ${2:number x}, ${3:number y}, ${4:Panel lbl}, ${5:Panel panelObj})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:PositionLabel(lblWidth, x, y, lbl, panelObj)"
    },
    {
      "trigger": "PostMessage",
      "contents": "PostMessage(${1:string messageName}, ${2:string valueType}, ${3:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:PostMessage(messageName, valueType, value)"
    },
    {
      "trigger": "Prepare",
      "contents": "Prepare()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Prepare()"
    },
    {
      "trigger": "Queue",
      "contents": "Queue()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Queue()"
    },
    {
      "trigger": "RebuildSpawnIcon",
      "contents": "RebuildSpawnIcon()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:RebuildSpawnIcon()"
    },
    {
      "trigger": "RebuildSpawnIconEx",
      "contents": "RebuildSpawnIconEx(${1:table data})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:RebuildSpawnIconEx(data)"
    },
    {
      "trigger": "Receiver",
      "contents": "Receiver(${1:string name}, ${2:function func}, ${3:table menu})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Receiver(name, func, menu)"
    },
    {
      "trigger": "Refresh",
      "contents": "Refresh(${1:boolean ignoreCache = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Refresh(ignoreCache)"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Remove()"
    },
    {
      "trigger": "RequestFocus",
      "contents": "RequestFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:RequestFocus()"
    },
    {
      "trigger": "ResetAllFades",
      "contents": "ResetAllFades(${1:boolean hold}, ${2:boolean expiredOnly}, ${3:number newSustain})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ResetAllFades(hold, expiredOnly, newSustain)"
    },
    {
      "trigger": "RunJavascript",
      "contents": "RunJavascript(${1:string js})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:RunJavascript(js)"
    },
    {
      "trigger": "SaveUndoState",
      "contents": "SaveUndoState()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SaveUndoState()"
    },
    {
      "trigger": "ScreenToLocal",
      "contents": "ScreenToLocal(${1:number screenX}, ${2:number screenY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ScreenToLocal(screenX, screenY)"
    },
    {
      "trigger": "SelectAll",
      "contents": "SelectAll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SelectAll()"
    },
    {
      "trigger": "SelectAllOnFocus",
      "contents": "SelectAllOnFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SelectAllOnFocus()"
    },
    {
      "trigger": "SelectAllText",
      "contents": "SelectAllText(${1:boolean resetCursorPos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SelectAllText(resetCursorPos)"
    },
    {
      "trigger": "SelectNone",
      "contents": "SelectNone()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SelectNone()"
    },
    {
      "trigger": "SetAchievement",
      "contents": "SetAchievement(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetAchievement(id)"
    },
    {
      "trigger": "SetActionFunction",
      "contents": "SetActionFunction(${1:function func})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetActionFunction(func)"
    },
    {
      "trigger": "SetAllowNonAsciiCharacters",
      "contents": "SetAllowNonAsciiCharacters(${1:boolean allowed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetAllowNonAsciiCharacters(allowed)"
    },
    {
      "trigger": "SetAlpha",
      "contents": "SetAlpha(${1:number alpha})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetAlpha(alpha)"
    },
    {
      "trigger": "SetAnimationEnabled",
      "contents": "SetAnimationEnabled(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetAnimationEnabled(enable)"
    },
    {
      "trigger": "SetAutoDelete",
      "contents": "SetAutoDelete(${1:boolean autoDelete})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetAutoDelete(autoDelete)"
    },
    {
      "trigger": "SetBGColor",
      "contents": "SetBGColor(${1:number r or color}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetBGColor(r or color, g, b, a)"
    },
    {
      "trigger": "SetBGColorEx",
      "contents": "SetBGColorEx(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetBGColorEx(r, g, b, a)"
    },
    {
      "trigger": "SetCaretPos",
      "contents": "SetCaretPos(${1:number offset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetCaretPos(offset)"
    },
    {
      "trigger": "SetCommand",
      "contents": "SetCommand()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetCommand()"
    },
    {
      "trigger": "SetContentAlignment",
      "contents": "SetContentAlignment(${1:number alignment})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetContentAlignment(alignment)"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetConVar(convar)"
    },
    {
      "trigger": "SetCookie",
      "contents": "SetCookie(${1:string cookieName}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetCookie(cookieName, value)"
    },
    {
      "trigger": "SetCookieName",
      "contents": "SetCookieName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetCookieName(name)"
    },
    {
      "trigger": "SetCursor",
      "contents": "SetCursor(${1:string cursor})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetCursor(cursor)"
    },
    {
      "trigger": "SetDragParent",
      "contents": "SetDragParent(${1:Panel parent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetDragParent(parent)"
    },
    {
      "trigger": "SetDrawLanguageID",
      "contents": "SetDrawLanguageID(${1:boolean visible})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetDrawLanguageID(visible)"
    },
    {
      "trigger": "SetDrawLanguageIDAtLeft",
      "contents": "SetDrawLanguageIDAtLeft(${1:boolean left})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetDrawLanguageIDAtLeft(left)"
    },
    {
      "trigger": "SetDrawOnTop",
      "contents": "SetDrawOnTop(${1:boolean drawOnTop = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetDrawOnTop(drawOnTop)"
    },
    {
      "trigger": "SetDropTarget",
      "contents": "SetDropTarget(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetDropTarget(x, y, width, height)"
    },
    {
      "trigger": "SetEnabled",
      "contents": "SetEnabled(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetEnabled(enable)"
    },
    {
      "trigger": "SetExpensiveShadow",
      "contents": "SetExpensiveShadow(${1:number distance}, ${2:table Color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetExpensiveShadow(distance, Color)"
    },
    {
      "trigger": "SetFGColor",
      "contents": "SetFGColor(${1:number r or color}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetFGColor(r or color, g, b, a)"
    },
    {
      "trigger": "SetFGColorEx",
      "contents": "SetFGColorEx(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetFGColorEx(r, g, b, a)"
    },
    {
      "trigger": "SetFocusTopLevel",
      "contents": "SetFocusTopLevel(${1:boolean state})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetFocusTopLevel(state)"
    },
    {
      "trigger": "SetFontInternal",
      "contents": "SetFontInternal(${1:string fontName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetFontInternal(fontName)"
    },
    {
      "trigger": "SetHeight",
      "contents": "SetHeight(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetHeight(height)"
    },
    {
      "trigger": "SetHTML",
      "contents": "SetHTML(${1:string HTML code})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetHTML(HTML code)"
    },
    {
      "trigger": "SetKeyboardInputEnabled",
      "contents": "SetKeyboardInputEnabled(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetKeyboardInputEnabled(enable)"
    },
    {
      "trigger": "SetKeyBoardInputEnabled",
      "contents": "SetKeyBoardInputEnabled(${1:boolean keyboardInput})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetKeyBoardInputEnabled(keyboardInput)"
    },
    {
      "trigger": "SetLineHeight",
      "contents": "SetLineHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetLineHeight()"
    },
    {
      "trigger": "SetMaximumCharCount",
      "contents": "SetMaximumCharCount(${1:number maxChar})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetMaximumCharCount(maxChar)"
    },
    {
      "trigger": "SetMinimumSize",
      "contents": "SetMinimumSize(${1:number minW = nil}, ${2:number minH = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetMinimumSize(minW, minH)"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string ModelPath}, ${2:number skin = 0}, ${3:string bodygroups})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetModel(ModelPath, skin, bodygroups)"
    },
    {
      "trigger": "SetMouseInputEnabled",
      "contents": "SetMouseInputEnabled(${1:boolean mouseInput})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetMouseInputEnabled(mouseInput)"
    },
    {
      "trigger": "SetMultiline",
      "contents": "SetMultiline(${1:boolean multiline})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetMultiline(multiline)"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetName(name)"
    },
    {
      "trigger": "SetOpenLinksExternally",
      "contents": "SetOpenLinksExternally(${1:boolean openExternally})",
      "annotation": "Menu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetOpenLinksExternally(openExternally)"
    },
    {
      "trigger": "SetPaintBackgroundEnabled",
      "contents": "SetPaintBackgroundEnabled(${1:boolean paintBackground})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPaintBackgroundEnabled(paintBackground)"
    },
    {
      "trigger": "SetPaintBorderEnabled",
      "contents": "SetPaintBorderEnabled(${1:boolean paintBorder})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPaintBorderEnabled(paintBorder)"
    },
    {
      "trigger": "SetPaintedManually",
      "contents": "SetPaintedManually(${1:boolean paintedManually})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPaintedManually(paintedManually)"
    },
    {
      "trigger": "SetPaintFunction",
      "contents": "SetPaintFunction()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPaintFunction()"
    },
    {
      "trigger": "SetParent",
      "contents": "SetParent(${1:Panel parent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetParent(parent)"
    },
    {
      "trigger": "SetPlayer",
      "contents": "SetPlayer(${1:Player player}, ${2:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPlayer(player, size)"
    },
    {
      "trigger": "SetPopupStayAtBack",
      "contents": "SetPopupStayAtBack(${1:boolean stayAtBack})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPopupStayAtBack(stayAtBack)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:number posX}, ${2:number posY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetPos(posX, posY)"
    },
    {
      "trigger": "SetRenderInScreenshots",
      "contents": "SetRenderInScreenshots(${1:boolean renderInScreenshot})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetRenderInScreenshots(renderInScreenshot)"
    },
    {
      "trigger": "SetSelectable",
      "contents": "SetSelectable(${1:boolean selectable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSelectable(selectable)"
    },
    {
      "trigger": "SetSelected",
      "contents": "SetSelected(${1:boolean selected = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSelected(selected)"
    },
    {
      "trigger": "SetSelectionCanvas",
      "contents": "SetSelectionCanvas(${1:boolean set})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSelectionCanvas(set)"
    },
    {
      "trigger": "SetSize",
      "contents": "SetSize(${1:number width}, ${2:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSize(width, height)"
    },
    {
      "trigger": "SetSkin",
      "contents": "SetSkin(${1:string skinName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSkin(skinName)"
    },
    {
      "trigger": "SetSpawnIcon",
      "contents": "SetSpawnIcon(${1:string icon})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSpawnIcon(icon)"
    },
    {
      "trigger": "SetSteamID",
      "contents": "SetSteamID(${1:string steamid}, ${2:number size})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetSteamID(steamid, size)"
    },
    {
      "trigger": "SetTabPosition",
      "contents": "SetTabPosition(${1:number position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTabPosition(position)"
    },
    {
      "trigger": "SetTall",
      "contents": "SetTall(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTall(height)"
    },
    {
      "trigger": "SetTerm",
      "contents": "SetTerm(${1:number delay})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTerm(delay)"
    },
    {
      "trigger": "SetText",
      "contents": "SetText(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetText(text)"
    },
    {
      "trigger": "SetTextInset",
      "contents": "SetTextInset(${1:number insetX}, ${2:number insetY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTextInset(insetX, insetY)"
    },
    {
      "trigger": "SetTextSelectionColors",
      "contents": "SetTextSelectionColors(${1:table textColor}, ${2:table backgroundColor})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTextSelectionColors(textColor, backgroundColor)"
    },
    {
      "trigger": "SetToFullHeight",
      "contents": "SetToFullHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetToFullHeight()"
    },
    {
      "trigger": "SetTooltip",
      "contents": "SetTooltip(${1:string str})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTooltip(str)"
    },
    {
      "trigger": "SetTooltipDelay",
      "contents": "SetTooltipDelay(${1:number tooltip})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTooltipDelay(tooltip)"
    },
    {
      "trigger": "SetTooltipPanel",
      "contents": "SetTooltipPanel(${1:Panel tooltipPanel = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTooltipPanel(tooltipPanel)"
    },
    {
      "trigger": "SetTooltipPanelOverride",
      "contents": "SetTooltipPanelOverride(${1:string override})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetTooltipPanelOverride(override)"
    },
    {
      "trigger": "SetUnderlineFont",
      "contents": "SetUnderlineFont(${1:string fontName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetUnderlineFont(fontName)"
    },
    {
      "trigger": "SetURL",
      "contents": "SetURL(${1:string url})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetURL(url)"
    },
    {
      "trigger": "SetVerticalScrollbarEnabled",
      "contents": "SetVerticalScrollbarEnabled(${1:boolean display = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetVerticalScrollbarEnabled(display)"
    },
    {
      "trigger": "SetVisible",
      "contents": "SetVisible(${1:boolean visible})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetVisible(visible)"
    },
    {
      "trigger": "SetWide",
      "contents": "SetWide(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetWide(width)"
    },
    {
      "trigger": "SetWidth",
      "contents": "SetWidth(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetWidth(width)"
    },
    {
      "trigger": "SetWorldClicker",
      "contents": "SetWorldClicker(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetWorldClicker(enable)"
    },
    {
      "trigger": "SetWrap",
      "contents": "SetWrap(${1:boolean wrap})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetWrap(wrap)"
    },
    {
      "trigger": "SetX",
      "contents": "SetX(${1:number x})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetX(x)"
    },
    {
      "trigger": "SetY",
      "contents": "SetY(${1:number y})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetY(y)"
    },
    {
      "trigger": "SetZPos",
      "contents": "SetZPos(${1:number zIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SetZPos(zIndex)"
    },
    {
      "trigger": "Show",
      "contents": "Show()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Show()"
    },
    {
      "trigger": "SizeTo",
      "contents": "SizeTo(${1:number sizeW = 0}, ${2:number sizeH = 0}, ${3:number time}, ${4:number delay = 0}, ${5:number ease = -1}, ${6:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SizeTo(sizeW, sizeH, time, delay, ease, callback)"
    },
    {
      "trigger": "SizeToChildren",
      "contents": "SizeToChildren(${1:boolean sizeW = false}, ${2:boolean sizeH = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SizeToChildren(sizeW, sizeH)"
    },
    {
      "trigger": "SizeToContents",
      "contents": "SizeToContents()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SizeToContents()"
    },
    {
      "trigger": "SizeToContentsX",
      "contents": "SizeToContentsX(${1:number addVal = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SizeToContentsX(addVal)"
    },
    {
      "trigger": "SizeToContentsY",
      "contents": "SizeToContentsY(${1:number addVal = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SizeToContentsY(addVal)"
    },
    {
      "trigger": "SlideDown",
      "contents": "SlideDown(${1:number Length})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SlideDown(Length)"
    },
    {
      "trigger": "SlideUp",
      "contents": "SlideUp(${1:number Length})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:SlideUp(Length)"
    },
    {
      "trigger": "StartBoxSelection",
      "contents": "StartBoxSelection()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:StartBoxSelection()"
    },
    {
      "trigger": "Stop",
      "contents": "Stop()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Stop()"
    },
    {
      "trigger": "StopLoading",
      "contents": "StopLoading()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:StopLoading()"
    },
    {
      "trigger": "StretchBottomTo",
      "contents": "StretchBottomTo(${1:Panel tgtPanel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:StretchBottomTo(tgtPanel, offset)"
    },
    {
      "trigger": "StretchRightTo",
      "contents": "StretchRightTo(${1:Panel tgtPanel}, ${2:number offset = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:StretchRightTo(tgtPanel, offset)"
    },
    {
      "trigger": "StretchToParent",
      "contents": "StretchToParent(${1:number offsetLeft}, ${2:number offsetTop}, ${3:number offsetRight}, ${4:number offsetBottom})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:StretchToParent(offsetLeft, offsetTop, offsetRight, offsetBottom)"
    },
    {
      "trigger": "ToggleSelection",
      "contents": "ToggleSelection()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ToggleSelection()"
    },
    {
      "trigger": "ToggleVisible",
      "contents": "ToggleVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:ToggleVisible()"
    },
    {
      "trigger": "Undo",
      "contents": "Undo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Undo()"
    },
    {
      "trigger": "UnselectAll",
      "contents": "UnselectAll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:UnselectAll()"
    },
    {
      "trigger": "UpdateHTMLTexture",
      "contents": "UpdateHTMLTexture()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:UpdateHTMLTexture()"
    },
    {
      "trigger": "Valid",
      "contents": "Valid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:Valid()"
    },
    {
      "trigger": "PaintingDragging",
      "contents": "PaintingDragging()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Panel:PaintingDragging()"
    },
    {
      "trigger": "Chase",
      "contents": "Chase(${1:NextBot bot}, ${2:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:Chase(bot, ent)"
    },
    {
      "trigger": "Compute",
      "contents": "Compute(${1:NextBot from}, ${2:Vector to}, ${3:function generator = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:Compute(from, to, generator)"
    },
    {
      "trigger": "Draw",
      "contents": "Draw()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:Draw()"
    },
    {
      "trigger": "FirstSegment",
      "contents": "FirstSegment()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:FirstSegment()"
    },
    {
      "trigger": "GetAge",
      "contents": "GetAge()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetAge()"
    },
    {
      "trigger": "GetAllSegments",
      "contents": "GetAllSegments()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetAllSegments()"
    },
    {
      "trigger": "GetClosestPosition",
      "contents": "GetClosestPosition(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetClosestPosition(position)"
    },
    {
      "trigger": "GetCurrentGoal",
      "contents": "GetCurrentGoal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetCurrentGoal()"
    },
    {
      "trigger": "GetCursorData",
      "contents": "GetCursorData()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetCursorData()"
    },
    {
      "trigger": "GetCursorPosition",
      "contents": "GetCursorPosition()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetCursorPosition()"
    },
    {
      "trigger": "GetEnd",
      "contents": "GetEnd()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetEnd()"
    },
    {
      "trigger": "GetGoalTolerance",
      "contents": "GetGoalTolerance()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetGoalTolerance()"
    },
    {
      "trigger": "GetHindrance",
      "contents": "GetHindrance()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetHindrance()"
    },
    {
      "trigger": "GetLength",
      "contents": "GetLength()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetLength()"
    },
    {
      "trigger": "GetMinLookAheadDistance",
      "contents": "GetMinLookAheadDistance()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetMinLookAheadDistance()"
    },
    {
      "trigger": "GetPositionOnPath",
      "contents": "GetPositionOnPath(${1:number distance})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetPositionOnPath(distance)"
    },
    {
      "trigger": "GetStart",
      "contents": "GetStart()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:GetStart()"
    },
    {
      "trigger": "Invalidate",
      "contents": "Invalidate()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:Invalidate()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:IsValid()"
    },
    {
      "trigger": "LastSegment",
      "contents": "LastSegment()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:LastSegment()"
    },
    {
      "trigger": "MoveCursor",
      "contents": "MoveCursor(${1:number distance})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:MoveCursor(distance)"
    },
    {
      "trigger": "MoveCursorTo",
      "contents": "MoveCursorTo(${1:number distance})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:MoveCursorTo(distance)"
    },
    {
      "trigger": "MoveCursorToClosestPosition",
      "contents": "MoveCursorToClosestPosition(${1:Vector pos}, ${2:number type = 0}, ${3:number alongLimit = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:MoveCursorToClosestPosition(pos, type, alongLimit)"
    },
    {
      "trigger": "MoveCursorToEnd",
      "contents": "MoveCursorToEnd()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:MoveCursorToEnd()"
    },
    {
      "trigger": "MoveCursorToStart",
      "contents": "MoveCursorToStart()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:MoveCursorToStart()"
    },
    {
      "trigger": "NextSegment",
      "contents": "NextSegment()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:NextSegment()"
    },
    {
      "trigger": "PriorSegment",
      "contents": "PriorSegment()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:PriorSegment()"
    },
    {
      "trigger": "ResetAge",
      "contents": "ResetAge()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:ResetAge()"
    },
    {
      "trigger": "SetGoalTolerance",
      "contents": "SetGoalTolerance(${1:number distance})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:SetGoalTolerance(distance)"
    },
    {
      "trigger": "SetMinLookAheadDistance",
      "contents": "SetMinLookAheadDistance(${1:number mindist})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:SetMinLookAheadDistance(mindist)"
    },
    {
      "trigger": "Update",
      "contents": "Update(${1:NextBot bot})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PathFollower:Update(bot)"
    },
    {
      "trigger": "Destroy",
      "contents": "Destroy()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysCollide:Destroy()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysCollide:IsValid()"
    },
    {
      "trigger": "TraceBox",
      "contents": "TraceBox(${1:Vector origin}, ${2:Angle angles}, ${3:Vector rayStart}, ${4:Vector rayEnd}, ${5:Vector rayMins}, ${6:Vector rayMaxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysCollide:TraceBox(origin, angles, rayStart, rayEnd, rayMins, rayMaxs)"
    },
    {
      "trigger": "AddAngleVelocity",
      "contents": "AddAngleVelocity(${1:Vector angularVelocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:AddAngleVelocity(angularVelocity)"
    },
    {
      "trigger": "AddGameFlag",
      "contents": "AddGameFlag(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:AddGameFlag(flags)"
    },
    {
      "trigger": "AddVelocity",
      "contents": "AddVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:AddVelocity(velocity)"
    },
    {
      "trigger": "AlignAngles",
      "contents": "AlignAngles(${1:Angle from}, ${2:Angle to})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:AlignAngles(from, to)"
    },
    {
      "trigger": "ApplyForceCenter",
      "contents": "ApplyForceCenter(${1:Vector impulse})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:ApplyForceCenter(impulse)"
    },
    {
      "trigger": "ApplyForceOffset",
      "contents": "ApplyForceOffset(${1:Vector impulse}, ${2:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:ApplyForceOffset(impulse, position)"
    },
    {
      "trigger": "ApplyTorqueCenter",
      "contents": "ApplyTorqueCenter(${1:Vector angularImpulse})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:ApplyTorqueCenter(angularImpulse)"
    },
    {
      "trigger": "CalculateForceOffset",
      "contents": "CalculateForceOffset(${1:Vector impulse}, ${2:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:CalculateForceOffset(impulse, position)"
    },
    {
      "trigger": "CalculateVelocityOffset",
      "contents": "CalculateVelocityOffset(${1:Vector impulse}, ${2:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:CalculateVelocityOffset(impulse, position)"
    },
    {
      "trigger": "ClearGameFlag",
      "contents": "ClearGameFlag(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:ClearGameFlag(flags)"
    },
    {
      "trigger": "ComputeShadowControl",
      "contents": "ComputeShadowControl(${1:table shadowparams})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:ComputeShadowControl(shadowparams)"
    },
    {
      "trigger": "EnableCollisions",
      "contents": "EnableCollisions(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:EnableCollisions(enable)"
    },
    {
      "trigger": "EnableDrag",
      "contents": "EnableDrag(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:EnableDrag(enable)"
    },
    {
      "trigger": "EnableGravity",
      "contents": "EnableGravity(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:EnableGravity(enable)"
    },
    {
      "trigger": "EnableMotion",
      "contents": "EnableMotion(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:EnableMotion(enable)"
    },
    {
      "trigger": "GetAABB",
      "contents": "GetAABB()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetAABB()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetAngles()"
    },
    {
      "trigger": "GetAngleVelocity",
      "contents": "GetAngleVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetAngleVelocity()"
    },
    {
      "trigger": "GetContents",
      "contents": "GetContents()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetContents()"
    },
    {
      "trigger": "GetDamping",
      "contents": "GetDamping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetDamping()"
    },
    {
      "trigger": "GetEnergy",
      "contents": "GetEnergy()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetEnergy()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetEntity()"
    },
    {
      "trigger": "GetFrictionSnapshot",
      "contents": "GetFrictionSnapshot()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetFrictionSnapshot()"
    },
    {
      "trigger": "GetInertia",
      "contents": "GetInertia()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetInertia()"
    },
    {
      "trigger": "GetInvInertia",
      "contents": "GetInvInertia()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetInvInertia()"
    },
    {
      "trigger": "GetInvMass",
      "contents": "GetInvMass()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetInvMass()"
    },
    {
      "trigger": "GetMass",
      "contents": "GetMass()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetMass()"
    },
    {
      "trigger": "GetMassCenter",
      "contents": "GetMassCenter()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetMassCenter()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetMaterial()"
    },
    {
      "trigger": "GetMesh",
      "contents": "GetMesh()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetMesh()"
    },
    {
      "trigger": "GetMeshConvexes",
      "contents": "GetMeshConvexes()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetMeshConvexes()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetName()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetPos()"
    },
    {
      "trigger": "GetPositionMatrix",
      "contents": "GetPositionMatrix()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetPositionMatrix()"
    },
    {
      "trigger": "GetRotDamping",
      "contents": "GetRotDamping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetRotDamping()"
    },
    {
      "trigger": "GetShadowAngles",
      "contents": "GetShadowAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetShadowAngles()"
    },
    {
      "trigger": "GetShadowPos",
      "contents": "GetShadowPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetShadowPos()"
    },
    {
      "trigger": "GetSpeedDamping",
      "contents": "GetSpeedDamping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetSpeedDamping()"
    },
    {
      "trigger": "GetStress",
      "contents": "GetStress()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetStress()"
    },
    {
      "trigger": "GetSurfaceArea",
      "contents": "GetSurfaceArea()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetSurfaceArea()"
    },
    {
      "trigger": "GetVelocity",
      "contents": "GetVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetVelocity()"
    },
    {
      "trigger": "GetVelocityAtPoint",
      "contents": "GetVelocityAtPoint(${1:Vector point})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetVelocityAtPoint(point)"
    },
    {
      "trigger": "GetVolume",
      "contents": "GetVolume()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:GetVolume()"
    },
    {
      "trigger": "HasGameFlag",
      "contents": "HasGameFlag(${1:number flags})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:HasGameFlag(flags)"
    },
    {
      "trigger": "IsAsleep",
      "contents": "IsAsleep()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsAsleep()"
    },
    {
      "trigger": "IsCollisionEnabled",
      "contents": "IsCollisionEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsCollisionEnabled()"
    },
    {
      "trigger": "IsDragEnabled",
      "contents": "IsDragEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsDragEnabled()"
    },
    {
      "trigger": "IsGravityEnabled",
      "contents": "IsGravityEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsGravityEnabled()"
    },
    {
      "trigger": "IsMotionEnabled",
      "contents": "IsMotionEnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsMotionEnabled()"
    },
    {
      "trigger": "IsMoveable",
      "contents": "IsMoveable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsMoveable()"
    },
    {
      "trigger": "IsPenetrating",
      "contents": "IsPenetrating()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsPenetrating()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:IsValid()"
    },
    {
      "trigger": "LocalToWorld",
      "contents": "LocalToWorld(${1:Vector LocalVec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:LocalToWorld(LocalVec)"
    },
    {
      "trigger": "LocalToWorldVector",
      "contents": "LocalToWorldVector(${1:Vector LocalVec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:LocalToWorldVector(LocalVec)"
    },
    {
      "trigger": "OutputDebugInfo",
      "contents": "OutputDebugInfo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:OutputDebugInfo()"
    },
    {
      "trigger": "RecheckCollisionFilter",
      "contents": "RecheckCollisionFilter()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:RecheckCollisionFilter()"
    },
    {
      "trigger": "RotateAroundAxis",
      "contents": "RotateAroundAxis(${1:Vector dir}, ${2:number ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:RotateAroundAxis(dir, ang)"
    },
    {
      "trigger": "SetAngleDragCoefficient",
      "contents": "SetAngleDragCoefficient(${1:number coefficient})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetAngleDragCoefficient(coefficient)"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angles})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetAngles(angles)"
    },
    {
      "trigger": "SetAngleVelocity",
      "contents": "SetAngleVelocity(${1:Vector angularVelocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetAngleVelocity(angularVelocity)"
    },
    {
      "trigger": "SetAngleVelocityInstantaneous",
      "contents": "SetAngleVelocityInstantaneous(${1:Vector angularVelocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetAngleVelocityInstantaneous(angularVelocity)"
    },
    {
      "trigger": "SetBuoyancyRatio",
      "contents": "SetBuoyancyRatio(${1:number buoyancy})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetBuoyancyRatio(buoyancy)"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents(${1:number contents})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetContents(contents)"
    },
    {
      "trigger": "SetDamping",
      "contents": "SetDamping(${1:number linearDamping}, ${2:number angularDamping})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetDamping(linearDamping, angularDamping)"
    },
    {
      "trigger": "SetDragCoefficient",
      "contents": "SetDragCoefficient(${1:number drag})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetDragCoefficient(drag)"
    },
    {
      "trigger": "SetInertia",
      "contents": "SetInertia(${1:Vector angularInertia})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetInertia(angularInertia)"
    },
    {
      "trigger": "SetMass",
      "contents": "SetMass(${1:number mass})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetMass(mass)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string materialName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetMaterial(materialName)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position}, ${2:boolean teleport = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetPos(position, teleport)"
    },
    {
      "trigger": "SetVelocity",
      "contents": "SetVelocity(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetVelocity(velocity)"
    },
    {
      "trigger": "SetVelocityInstantaneous",
      "contents": "SetVelocityInstantaneous(${1:Vector velocity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:SetVelocityInstantaneous(velocity)"
    },
    {
      "trigger": "Sleep",
      "contents": "Sleep()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:Sleep()"
    },
    {
      "trigger": "UpdateShadow",
      "contents": "UpdateShadow(${1:Vector targetPosition}, ${2:Angle targetAngles}, ${3:number frameTime})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:UpdateShadow(targetPosition, targetAngles, frameTime)"
    },
    {
      "trigger": "Wake",
      "contents": "Wake()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:Wake()"
    },
    {
      "trigger": "WorldToLocal",
      "contents": "WorldToLocal(${1:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:WorldToLocal(vec)"
    },
    {
      "trigger": "WorldToLocalVector",
      "contents": "WorldToLocalVector(${1:Vector WorldVec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "PhysObj:WorldToLocalVector(WorldVec)"
    },
    {
      "trigger": "AccountID",
      "contents": "AccountID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AccountID()"
    },
    {
      "trigger": "AddCleanup",
      "contents": "AddCleanup(${1:string type}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddCleanup(type, ent)"
    },
    {
      "trigger": "AddCount",
      "contents": "AddCount(${1:string str}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddCount(str, ent)"
    },
    {
      "trigger": "AddDeaths",
      "contents": "AddDeaths(${1:number count})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddDeaths(count)"
    },
    {
      "trigger": "AddFrags",
      "contents": "AddFrags(${1:number count})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddFrags(count)"
    },
    {
      "trigger": "AddFrozenPhysicsObject",
      "contents": "AddFrozenPhysicsObject(${1:Entity ent}, ${2:PhysObj physobj})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddFrozenPhysicsObject(ent, physobj)"
    },
    {
      "trigger": "AddPlayerOption",
      "contents": "AddPlayerOption(${1:string name}, ${2:number timeout}, ${3:function vote_callback}, ${4:function draw_callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddPlayerOption(name, timeout, vote_callback, draw_callback)"
    },
    {
      "trigger": "AddVCDSequenceToGestureSlot",
      "contents": "AddVCDSequenceToGestureSlot(${1:number slot}, ${2:number sequenceId}, ${3:number cycle}, ${4:boolean autokill = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AddVCDSequenceToGestureSlot(slot, sequenceId, cycle, autokill)"
    },
    {
      "trigger": "Alive",
      "contents": "Alive()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Alive()"
    },
    {
      "trigger": "AllowFlashlight",
      "contents": "AllowFlashlight(${1:boolean canFlashlight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AllowFlashlight(canFlashlight)"
    },
    {
      "trigger": "AllowImmediateDecalPainting",
      "contents": "AllowImmediateDecalPainting(${1:boolean allow})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AllowImmediateDecalPainting(allow)"
    },
    {
      "trigger": "AnimResetGestureSlot",
      "contents": "AnimResetGestureSlot(${1:number slot})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AnimResetGestureSlot(slot)"
    },
    {
      "trigger": "AnimRestartGesture",
      "contents": "AnimRestartGesture(${1:number slot}, ${2:number activity}, ${3:boolean autokill = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AnimRestartGesture(slot, activity, autokill)"
    },
    {
      "trigger": "AnimRestartMainSequence",
      "contents": "AnimRestartMainSequence()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AnimRestartMainSequence()"
    },
    {
      "trigger": "AnimSetGestureSequence",
      "contents": "AnimSetGestureSequence(${1:number slot}, ${2:number sequenceID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AnimSetGestureSequence(slot, sequenceID)"
    },
    {
      "trigger": "AnimSetGestureWeight",
      "contents": "AnimSetGestureWeight(${1:number slot}, ${2:number weight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:AnimSetGestureWeight(slot, weight)"
    },
    {
      "trigger": "Armor",
      "contents": "Armor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Armor()"
    },
    {
      "trigger": "Ban",
      "contents": "Ban(${1:number minutes}, ${2:boolean kick = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Ban(minutes, kick)"
    },
    {
      "trigger": "CanUseFlashlight",
      "contents": "CanUseFlashlight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:CanUseFlashlight()"
    },
    {
      "trigger": "ChatPrint",
      "contents": "ChatPrint(${1:string message})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ChatPrint(message)"
    },
    {
      "trigger": "CheckLimit",
      "contents": "CheckLimit(${1:string limitType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:CheckLimit(limitType)"
    },
    {
      "trigger": "ConCommand",
      "contents": "ConCommand(${1:string command})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ConCommand(command)"
    },
    {
      "trigger": "CreateRagdoll",
      "contents": "CreateRagdoll()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:CreateRagdoll()"
    },
    {
      "trigger": "CrosshairDisable",
      "contents": "CrosshairDisable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:CrosshairDisable()"
    },
    {
      "trigger": "CrosshairEnable",
      "contents": "CrosshairEnable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:CrosshairEnable()"
    },
    {
      "trigger": "Crouching",
      "contents": "Crouching()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Crouching()"
    },
    {
      "trigger": "Deaths",
      "contents": "Deaths()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Deaths()"
    },
    {
      "trigger": "DebugInfo",
      "contents": "DebugInfo()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DebugInfo()"
    },
    {
      "trigger": "DetonateTripmines",
      "contents": "DetonateTripmines()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DetonateTripmines()"
    },
    {
      "trigger": "DisableWorldClicking",
      "contents": "DisableWorldClicking(${1:boolean disable})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DisableWorldClicking(disable)"
    },
    {
      "trigger": "DoAnimationEvent",
      "contents": "DoAnimationEvent(${1:number data})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DoAnimationEvent(data)"
    },
    {
      "trigger": "DoAttackEvent",
      "contents": "DoAttackEvent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DoAttackEvent()"
    },
    {
      "trigger": "DoCustomAnimEvent",
      "contents": "DoCustomAnimEvent(${1:number event}, ${2:number data})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DoCustomAnimEvent(event, data)"
    },
    {
      "trigger": "DoReloadEvent",
      "contents": "DoReloadEvent()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DoReloadEvent()"
    },
    {
      "trigger": "DoSecondaryAttack",
      "contents": "DoSecondaryAttack()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DoSecondaryAttack()"
    },
    {
      "trigger": "DrawViewModel",
      "contents": "DrawViewModel(${1:boolean draw}, ${2:number vm = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DrawViewModel(draw, vm)"
    },
    {
      "trigger": "DrawWorldModel",
      "contents": "DrawWorldModel(${1:boolean draw})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DrawWorldModel(draw)"
    },
    {
      "trigger": "DropNamedWeapon",
      "contents": "DropNamedWeapon(${1:string class}, ${2:Vector target = nil}, ${3:Vector velocity = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DropNamedWeapon(class, target, velocity)"
    },
    {
      "trigger": "DropObject",
      "contents": "DropObject()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DropObject()"
    },
    {
      "trigger": "DropWeapon",
      "contents": "DropWeapon(${1:Weapon weapon = nil}, ${2:Vector target = nil}, ${3:Vector velocity = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:DropWeapon(weapon, target, velocity)"
    },
    {
      "trigger": "EnterVehicle",
      "contents": "EnterVehicle(${1:Vehicle vehicle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:EnterVehicle(vehicle)"
    },
    {
      "trigger": "EquipSuit",
      "contents": "EquipSuit()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:EquipSuit()"
    },
    {
      "trigger": "ExitVehicle",
      "contents": "ExitVehicle()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ExitVehicle()"
    },
    {
      "trigger": "Flashlight",
      "contents": "Flashlight(${1:boolean isOn})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Flashlight(isOn)"
    },
    {
      "trigger": "FlashlightIsOn",
      "contents": "FlashlightIsOn()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:FlashlightIsOn()"
    },
    {
      "trigger": "Frags",
      "contents": "Frags()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Frags()"
    },
    {
      "trigger": "Freeze",
      "contents": "Freeze(${1:boolean frozen = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Freeze(frozen)"
    },
    {
      "trigger": "GetActiveWeapon",
      "contents": "GetActiveWeapon()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetActiveWeapon()"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetActivity()"
    },
    {
      "trigger": "GetAimVector",
      "contents": "GetAimVector()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAimVector()"
    },
    {
      "trigger": "GetAllowFullRotation",
      "contents": "GetAllowFullRotation()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAllowFullRotation()"
    },
    {
      "trigger": "GetAllowWeaponsInVehicle",
      "contents": "GetAllowWeaponsInVehicle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAllowWeaponsInVehicle()"
    },
    {
      "trigger": "GetAmmo",
      "contents": "GetAmmo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAmmo()"
    },
    {
      "trigger": "GetAmmoCount",
      "contents": "GetAmmoCount(${1:any ammotype})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAmmoCount(ammotype)"
    },
    {
      "trigger": "GetAvoidPlayers",
      "contents": "GetAvoidPlayers()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetAvoidPlayers()"
    },
    {
      "trigger": "GetCanWalk",
      "contents": "GetCanWalk()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCanWalk()"
    },
    {
      "trigger": "GetCanZoom",
      "contents": "GetCanZoom()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCanZoom()"
    },
    {
      "trigger": "GetClassID",
      "contents": "GetClassID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetClassID()"
    },
    {
      "trigger": "GetCount",
      "contents": "GetCount(${1:string type}, ${2:number minus = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCount(type, minus)"
    },
    {
      "trigger": "GetCrouchedWalkSpeed",
      "contents": "GetCrouchedWalkSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCrouchedWalkSpeed()"
    },
    {
      "trigger": "GetCurrentCommand",
      "contents": "GetCurrentCommand()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCurrentCommand()"
    },
    {
      "trigger": "GetCurrentViewOffset",
      "contents": "GetCurrentViewOffset()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetCurrentViewOffset()"
    },
    {
      "trigger": "GetDrivingEntity",
      "contents": "GetDrivingEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetDrivingEntity()"
    },
    {
      "trigger": "GetDrivingMode",
      "contents": "GetDrivingMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetDrivingMode()"
    },
    {
      "trigger": "GetDuckSpeed",
      "contents": "GetDuckSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetDuckSpeed()"
    },
    {
      "trigger": "GetEntityInUse",
      "contents": "GetEntityInUse()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetEntityInUse()"
    },
    {
      "trigger": "GetEyeTrace",
      "contents": "GetEyeTrace()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetEyeTrace()"
    },
    {
      "trigger": "GetEyeTraceNoCursor",
      "contents": "GetEyeTraceNoCursor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetEyeTraceNoCursor()"
    },
    {
      "trigger": "GetFOV",
      "contents": "GetFOV()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetFOV()"
    },
    {
      "trigger": "GetFriendStatus",
      "contents": "GetFriendStatus()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetFriendStatus()"
    },
    {
      "trigger": "GetHands",
      "contents": "GetHands()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetHands()"
    },
    {
      "trigger": "GetHoveredWidget",
      "contents": "GetHoveredWidget()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetHoveredWidget()"
    },
    {
      "trigger": "GetHull",
      "contents": "GetHull()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetHull()"
    },
    {
      "trigger": "GetHullDuck",
      "contents": "GetHullDuck()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetHullDuck()"
    },
    {
      "trigger": "GetInfo",
      "contents": "GetInfo(${1:string cVarName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetInfo(cVarName)"
    },
    {
      "trigger": "GetInfoNum",
      "contents": "GetInfoNum(${1:string cVarName}, ${2:number default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetInfoNum(cVarName, default)"
    },
    {
      "trigger": "GetJumpPower",
      "contents": "GetJumpPower()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetJumpPower()"
    },
    {
      "trigger": "GetLadderClimbSpeed",
      "contents": "GetLadderClimbSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetLadderClimbSpeed()"
    },
    {
      "trigger": "GetLaggedMovementValue",
      "contents": "GetLaggedMovementValue()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetLaggedMovementValue()"
    },
    {
      "trigger": "GetMaxArmor",
      "contents": "GetMaxArmor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetMaxArmor()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetMaxSpeed()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetName()"
    },
    {
      "trigger": "GetNoCollideWithTeammates",
      "contents": "GetNoCollideWithTeammates()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetNoCollideWithTeammates()"
    },
    {
      "trigger": "GetObserverMode",
      "contents": "GetObserverMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetObserverMode()"
    },
    {
      "trigger": "GetObserverTarget",
      "contents": "GetObserverTarget()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetObserverTarget()"
    },
    {
      "trigger": "GetPData",
      "contents": "GetPData(${1:string key}, ${2:any default = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPData(key, default)"
    },
    {
      "trigger": "GetPlayerColor",
      "contents": "GetPlayerColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPlayerColor()"
    },
    {
      "trigger": "GetPlayerInfo",
      "contents": "GetPlayerInfo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPlayerInfo()"
    },
    {
      "trigger": "GetPreferredCarryAngles",
      "contents": "GetPreferredCarryAngles(${1:Entity carryEnt})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPreferredCarryAngles(carryEnt)"
    },
    {
      "trigger": "GetPressedWidget",
      "contents": "GetPressedWidget()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPressedWidget()"
    },
    {
      "trigger": "GetPreviousWeapon",
      "contents": "GetPreviousWeapon()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPreviousWeapon()"
    },
    {
      "trigger": "GetPunchAngle",
      "contents": "GetPunchAngle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetPunchAngle()"
    },
    {
      "trigger": "GetRagdollEntity",
      "contents": "GetRagdollEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetRagdollEntity()"
    },
    {
      "trigger": "GetRenderAngles",
      "contents": "GetRenderAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetRenderAngles()"
    },
    {
      "trigger": "GetRunSpeed",
      "contents": "GetRunSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetRunSpeed()"
    },
    {
      "trigger": "GetShootPos",
      "contents": "GetShootPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetShootPos()"
    },
    {
      "trigger": "GetSlowWalkSpeed",
      "contents": "GetSlowWalkSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetSlowWalkSpeed()"
    },
    {
      "trigger": "GetStepSize",
      "contents": "GetStepSize()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetStepSize()"
    },
    {
      "trigger": "GetSuitPower",
      "contents": "GetSuitPower()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetSuitPower()"
    },
    {
      "trigger": "GetTimeoutSeconds",
      "contents": "GetTimeoutSeconds()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetTimeoutSeconds()"
    },
    {
      "trigger": "GetTool",
      "contents": "GetTool(${1:string mode = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetTool(mode)"
    },
    {
      "trigger": "GetUnDuckSpeed",
      "contents": "GetUnDuckSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetUnDuckSpeed()"
    },
    {
      "trigger": "GetUseEntity",
      "contents": "GetUseEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetUseEntity()"
    },
    {
      "trigger": "GetUserGroup",
      "contents": "GetUserGroup()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetUserGroup()"
    },
    {
      "trigger": "GetVehicle",
      "contents": "GetVehicle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetVehicle()"
    },
    {
      "trigger": "GetViewEntity",
      "contents": "GetViewEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewEntity()"
    },
    {
      "trigger": "GetViewModel",
      "contents": "GetViewModel(${1:number index = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewModel(index)"
    },
    {
      "trigger": "GetViewOffset",
      "contents": "GetViewOffset()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewOffset()"
    },
    {
      "trigger": "GetViewOffsetDucked",
      "contents": "GetViewOffsetDucked()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewOffsetDucked()"
    },
    {
      "trigger": "GetViewPunchAngles",
      "contents": "GetViewPunchAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewPunchAngles()"
    },
    {
      "trigger": "GetViewPunchVelocity",
      "contents": "GetViewPunchVelocity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetViewPunchVelocity()"
    },
    {
      "trigger": "GetVoiceVolumeScale",
      "contents": "GetVoiceVolumeScale()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetVoiceVolumeScale()"
    },
    {
      "trigger": "GetWalkSpeed",
      "contents": "GetWalkSpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetWalkSpeed()"
    },
    {
      "trigger": "GetWeapon",
      "contents": "GetWeapon(${1:string className})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetWeapon(className)"
    },
    {
      "trigger": "GetWeaponColor",
      "contents": "GetWeaponColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetWeaponColor()"
    },
    {
      "trigger": "GetWeapons",
      "contents": "GetWeapons()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GetWeapons()"
    },
    {
      "trigger": "Give",
      "contents": "Give(${1:string weaponClassName}, ${2:boolean bNoAmmo = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Give(weaponClassName, bNoAmmo)"
    },
    {
      "trigger": "GiveAmmo",
      "contents": "GiveAmmo(${1:number amount}, ${2:any type}, ${3:boolean hidePopup = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GiveAmmo(amount, type, hidePopup)"
    },
    {
      "trigger": "GodDisable",
      "contents": "GodDisable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GodDisable()"
    },
    {
      "trigger": "GodEnable",
      "contents": "GodEnable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:GodEnable()"
    },
    {
      "trigger": "HasGodMode",
      "contents": "HasGodMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:HasGodMode()"
    },
    {
      "trigger": "HasWeapon",
      "contents": "HasWeapon(${1:string className})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:HasWeapon(className)"
    },
    {
      "trigger": "InVehicle",
      "contents": "InVehicle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:InVehicle()"
    },
    {
      "trigger": "IPAddress",
      "contents": "IPAddress()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IPAddress()"
    },
    {
      "trigger": "IsAdmin",
      "contents": "IsAdmin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsAdmin()"
    },
    {
      "trigger": "IsBot",
      "contents": "IsBot()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsBot()"
    },
    {
      "trigger": "IsConnected",
      "contents": "IsConnected()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsConnected()"
    },
    {
      "trigger": "IsDrivingEntity",
      "contents": "IsDrivingEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsDrivingEntity()"
    },
    {
      "trigger": "IsFrozen",
      "contents": "IsFrozen()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsFrozen()"
    },
    {
      "trigger": "IsFullyAuthenticated",
      "contents": "IsFullyAuthenticated()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsFullyAuthenticated()"
    },
    {
      "trigger": "IsListenServerHost",
      "contents": "IsListenServerHost()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsListenServerHost()"
    },
    {
      "trigger": "IsMuted",
      "contents": "IsMuted()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsMuted()"
    },
    {
      "trigger": "IsPlayingTaunt",
      "contents": "IsPlayingTaunt()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsPlayingTaunt()"
    },
    {
      "trigger": "IsSpeaking",
      "contents": "IsSpeaking()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsSpeaking()"
    },
    {
      "trigger": "IsSprinting",
      "contents": "IsSprinting()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsSprinting()"
    },
    {
      "trigger": "IsSuitEquipped",
      "contents": "IsSuitEquipped()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsSuitEquipped()"
    },
    {
      "trigger": "IsSuperAdmin",
      "contents": "IsSuperAdmin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsSuperAdmin()"
    },
    {
      "trigger": "IsTimingOut",
      "contents": "IsTimingOut()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsTimingOut()"
    },
    {
      "trigger": "IsTyping",
      "contents": "IsTyping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsTyping()"
    },
    {
      "trigger": "IsUserGroup",
      "contents": "IsUserGroup(${1:string groupname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsUserGroup(groupname)"
    },
    {
      "trigger": "IsVoiceAudible",
      "contents": "IsVoiceAudible()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsVoiceAudible()"
    },
    {
      "trigger": "IsWalking",
      "contents": "IsWalking()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsWalking()"
    },
    {
      "trigger": "IsWorldClicking",
      "contents": "IsWorldClicking()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsWorldClicking()"
    },
    {
      "trigger": "IsWorldClickingDisabled",
      "contents": "IsWorldClickingDisabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:IsWorldClickingDisabled()"
    },
    {
      "trigger": "KeyDown",
      "contents": "KeyDown(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:KeyDown(key)"
    },
    {
      "trigger": "KeyDownLast",
      "contents": "KeyDownLast(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:KeyDownLast(key)"
    },
    {
      "trigger": "KeyPressed",
      "contents": "KeyPressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:KeyPressed(key)"
    },
    {
      "trigger": "KeyReleased",
      "contents": "KeyReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:KeyReleased(key)"
    },
    {
      "trigger": "Kick",
      "contents": "Kick(${1:string reason = No reason given})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Kick(reason)"
    },
    {
      "trigger": "Kill",
      "contents": "Kill()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Kill()"
    },
    {
      "trigger": "KillSilent",
      "contents": "KillSilent()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:KillSilent()"
    },
    {
      "trigger": "LagCompensation",
      "contents": "LagCompensation(${1:boolean lagCompensation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:LagCompensation(lagCompensation)"
    },
    {
      "trigger": "LastHitGroup",
      "contents": "LastHitGroup()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:LastHitGroup()"
    },
    {
      "trigger": "LimitHit",
      "contents": "LimitHit(${1:string type})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:LimitHit(type)"
    },
    {
      "trigger": "LocalEyeAngles",
      "contents": "LocalEyeAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:LocalEyeAngles()"
    },
    {
      "trigger": "Lock",
      "contents": "Lock()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Lock()"
    },
    {
      "trigger": "MotionSensorPos",
      "contents": "MotionSensorPos(${1:number bone})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:MotionSensorPos(bone)"
    },
    {
      "trigger": "Name",
      "contents": "Name()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Name()"
    },
    {
      "trigger": "Nick",
      "contents": "Nick()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Nick()"
    },
    {
      "trigger": "OwnerSteamID64",
      "contents": "OwnerSteamID64()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:OwnerSteamID64()"
    },
    {
      "trigger": "PacketLoss",
      "contents": "PacketLoss()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PacketLoss()"
    },
    {
      "trigger": "PhysgunUnfreeze",
      "contents": "PhysgunUnfreeze()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PhysgunUnfreeze()"
    },
    {
      "trigger": "PickupObject",
      "contents": "PickupObject(${1:Entity entity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PickupObject(entity)"
    },
    {
      "trigger": "PickupWeapon",
      "contents": "PickupWeapon(${1:Weapon wep}, ${2:boolean ammoOnly = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PickupWeapon(wep, ammoOnly)"
    },
    {
      "trigger": "Ping",
      "contents": "Ping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Ping()"
    },
    {
      "trigger": "PlayStepSound",
      "contents": "PlayStepSound(${1:number volume})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PlayStepSound(volume)"
    },
    {
      "trigger": "PrintMessage",
      "contents": "PrintMessage(${1:number type}, ${2:string message})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:PrintMessage(type, message)"
    },
    {
      "trigger": "RemoveAllAmmo",
      "contents": "RemoveAllAmmo()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:RemoveAllAmmo()"
    },
    {
      "trigger": "RemoveAllItems",
      "contents": "RemoveAllItems()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:RemoveAllItems()"
    },
    {
      "trigger": "RemoveAmmo",
      "contents": "RemoveAmmo(${1:number ammoCount}, ${2:string ammoName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:RemoveAmmo(ammoCount, ammoName)"
    },
    {
      "trigger": "RemovePData",
      "contents": "RemovePData(${1:string key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:RemovePData(key)"
    },
    {
      "trigger": "RemoveSuit",
      "contents": "RemoveSuit()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:RemoveSuit()"
    },
    {
      "trigger": "ResetHull",
      "contents": "ResetHull()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ResetHull()"
    },
    {
      "trigger": "Say",
      "contents": "Say(${1:string text}, ${2:boolean teamOnly = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Say(text, teamOnly)"
    },
    {
      "trigger": "ScreenFade",
      "contents": "ScreenFade(${1:number flags}, ${2:number clr = color_white}, ${3:number fadeTime}, ${4:number fadeHold})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ScreenFade(flags, clr, fadeTime, fadeHold)"
    },
    {
      "trigger": "SelectWeapon",
      "contents": "SelectWeapon(${1:string className})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SelectWeapon(className)"
    },
    {
      "trigger": "SendHint",
      "contents": "SendHint(${1:string name}, ${2:number delay})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SendHint(name, delay)"
    },
    {
      "trigger": "SendLua",
      "contents": "SendLua(${1:string script})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SendLua(script)"
    },
    {
      "trigger": "SetActiveWeapon",
      "contents": "SetActiveWeapon(${1:Weapon weapon})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetActiveWeapon(weapon)"
    },
    {
      "trigger": "SetActivity",
      "contents": "SetActivity(${1:number act})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetActivity(act)"
    },
    {
      "trigger": "SetAllowFullRotation",
      "contents": "SetAllowFullRotation(${1:boolean Allowed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetAllowFullRotation(Allowed)"
    },
    {
      "trigger": "SetAllowWeaponsInVehicle",
      "contents": "SetAllowWeaponsInVehicle(${1:boolean allow})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetAllowWeaponsInVehicle(allow)"
    },
    {
      "trigger": "SetAmmo",
      "contents": "SetAmmo(${1:number ammoCount}, ${2:any ammoType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetAmmo(ammoCount, ammoType)"
    },
    {
      "trigger": "SetArmor",
      "contents": "SetArmor(${1:number Amount})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetArmor(Amount)"
    },
    {
      "trigger": "SetAvoidPlayers",
      "contents": "SetAvoidPlayers(${1:boolean avoidPlayers})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetAvoidPlayers(avoidPlayers)"
    },
    {
      "trigger": "SetCanWalk",
      "contents": "SetCanWalk(${1:boolean abletowalk})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetCanWalk(abletowalk)"
    },
    {
      "trigger": "SetCanZoom",
      "contents": "SetCanZoom(${1:boolean canZoom})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetCanZoom(canZoom)"
    },
    {
      "trigger": "SetClassID",
      "contents": "SetClassID(${1:number classID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetClassID(classID)"
    },
    {
      "trigger": "SetCrouchedWalkSpeed",
      "contents": "SetCrouchedWalkSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetCrouchedWalkSpeed(speed)"
    },
    {
      "trigger": "SetCurrentViewOffset",
      "contents": "SetCurrentViewOffset(${1:Vector viewOffset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetCurrentViewOffset(viewOffset)"
    },
    {
      "trigger": "SetDeaths",
      "contents": "SetDeaths(${1:number deathcount})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetDeaths(deathcount)"
    },
    {
      "trigger": "SetDrivingEntity",
      "contents": "SetDrivingEntity(${1:Entity drivingEntity = NULL}, ${2:number drivingMode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetDrivingEntity(drivingEntity, drivingMode)"
    },
    {
      "trigger": "SetDSP",
      "contents": "SetDSP(${1:number soundFilter}, ${2:boolean fastReset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetDSP(soundFilter, fastReset)"
    },
    {
      "trigger": "SetDuckSpeed",
      "contents": "SetDuckSpeed(${1:number duckSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetDuckSpeed(duckSpeed)"
    },
    {
      "trigger": "SetEyeAngles",
      "contents": "SetEyeAngles(${1:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetEyeAngles(angle)"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov}, ${2:number time = 0}, ${3:Entity requester = self})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetFOV(fov, time, requester)"
    },
    {
      "trigger": "SetFrags",
      "contents": "SetFrags(${1:number fragcount})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetFrags(fragcount)"
    },
    {
      "trigger": "SetHands",
      "contents": "SetHands(${1:Entity hands})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetHands(hands)"
    },
    {
      "trigger": "SetHoveredWidget",
      "contents": "SetHoveredWidget(${1:Entity widget = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetHoveredWidget(widget)"
    },
    {
      "trigger": "SetHull",
      "contents": "SetHull(${1:Vector hullMins}, ${2:Vector hullMaxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetHull(hullMins, hullMaxs)"
    },
    {
      "trigger": "SetHullDuck",
      "contents": "SetHullDuck(${1:Vector hullMins}, ${2:Vector hullMaxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetHullDuck(hullMins, hullMaxs)"
    },
    {
      "trigger": "SetJumpPower",
      "contents": "SetJumpPower(${1:number jumpPower})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetJumpPower(jumpPower)"
    },
    {
      "trigger": "SetLadderClimbSpeed",
      "contents": "SetLadderClimbSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetLadderClimbSpeed(speed)"
    },
    {
      "trigger": "SetLaggedMovementValue",
      "contents": "SetLaggedMovementValue(${1:number timescale})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetLaggedMovementValue(timescale)"
    },
    {
      "trigger": "SetLastHitGroup",
      "contents": "SetLastHitGroup(${1:number hitgroup})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetLastHitGroup(hitgroup)"
    },
    {
      "trigger": "SetMaxArmor",
      "contents": "SetMaxArmor(${1:number maxarmor})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetMaxArmor(maxarmor)"
    },
    {
      "trigger": "SetMaxSpeed",
      "contents": "SetMaxSpeed(${1:number walkSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetMaxSpeed(walkSpeed)"
    },
    {
      "trigger": "SetMuted",
      "contents": "SetMuted(${1:boolean mute})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetMuted(mute)"
    },
    {
      "trigger": "SetNoCollideWithTeammates",
      "contents": "SetNoCollideWithTeammates(${1:boolean shouldNotCollide})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetNoCollideWithTeammates(shouldNotCollide)"
    },
    {
      "trigger": "SetNoTarget",
      "contents": "SetNoTarget(${1:boolean visibility})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetNoTarget(visibility)"
    },
    {
      "trigger": "SetObserverMode",
      "contents": "SetObserverMode(${1:number mode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetObserverMode(mode)"
    },
    {
      "trigger": "SetPData",
      "contents": "SetPData(${1:string key}, ${2:any value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetPData(key, value)"
    },
    {
      "trigger": "SetPlayerColor",
      "contents": "SetPlayerColor(${1:Vector Color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetPlayerColor(Color)"
    },
    {
      "trigger": "SetPressedWidget",
      "contents": "SetPressedWidget(${1:Entity pressedWidget = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetPressedWidget(pressedWidget)"
    },
    {
      "trigger": "SetRenderAngles",
      "contents": "SetRenderAngles(${1:Angle ang})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetRenderAngles(ang)"
    },
    {
      "trigger": "SetRunSpeed",
      "contents": "SetRunSpeed(${1:number runSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetRunSpeed(runSpeed)"
    },
    {
      "trigger": "SetSlowWalkSpeed",
      "contents": "SetSlowWalkSpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetSlowWalkSpeed(speed)"
    },
    {
      "trigger": "SetStepSize",
      "contents": "SetStepSize(${1:number stepHeight})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetStepSize(stepHeight)"
    },
    {
      "trigger": "SetSuitPower",
      "contents": "SetSuitPower(${1:number power})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetSuitPower(power)"
    },
    {
      "trigger": "SetSuppressPickupNotices",
      "contents": "SetSuppressPickupNotices(${1:boolean doSuppress})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetSuppressPickupNotices(doSuppress)"
    },
    {
      "trigger": "SetTeam",
      "contents": "SetTeam(${1:number Team})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetTeam(Team)"
    },
    {
      "trigger": "SetUnDuckSpeed",
      "contents": "SetUnDuckSpeed(${1:number UnDuckSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetUnDuckSpeed(UnDuckSpeed)"
    },
    {
      "trigger": "SetupHands",
      "contents": "SetupHands(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetupHands(ent)"
    },
    {
      "trigger": "SetUserGroup",
      "contents": "SetUserGroup(${1:string groupName})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetUserGroup(groupName)"
    },
    {
      "trigger": "SetViewEntity",
      "contents": "SetViewEntity(${1:Entity viewEntity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetViewEntity(viewEntity)"
    },
    {
      "trigger": "SetViewOffset",
      "contents": "SetViewOffset(${1:Vector viewOffset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetViewOffset(viewOffset)"
    },
    {
      "trigger": "SetViewOffsetDucked",
      "contents": "SetViewOffsetDucked(${1:Vector viewOffset})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetViewOffsetDucked(viewOffset)"
    },
    {
      "trigger": "SetViewPunchAngles",
      "contents": "SetViewPunchAngles(${1:Angle punchAngle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetViewPunchAngles(punchAngle)"
    },
    {
      "trigger": "SetViewPunchVelocity",
      "contents": "SetViewPunchVelocity(${1:Angle punchVel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetViewPunchVelocity(punchVel)"
    },
    {
      "trigger": "SetVoiceVolumeScale",
      "contents": "SetVoiceVolumeScale(${1:number })",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetVoiceVolumeScale()"
    },
    {
      "trigger": "SetWalkSpeed",
      "contents": "SetWalkSpeed(${1:number walkSpeed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetWalkSpeed(walkSpeed)"
    },
    {
      "trigger": "SetWeaponColor",
      "contents": "SetWeaponColor(${1:Vector Color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SetWeaponColor(Color)"
    },
    {
      "trigger": "ShouldDrawLocalPlayer",
      "contents": "ShouldDrawLocalPlayer()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ShouldDrawLocalPlayer()"
    },
    {
      "trigger": "ShouldDropWeapon",
      "contents": "ShouldDropWeapon(${1:boolean drop})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ShouldDropWeapon(drop)"
    },
    {
      "trigger": "ShowProfile",
      "contents": "ShowProfile()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ShowProfile()"
    },
    {
      "trigger": "SimulateGravGunDrop",
      "contents": "SimulateGravGunDrop(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SimulateGravGunDrop(ent)"
    },
    {
      "trigger": "SimulateGravGunPickup",
      "contents": "SimulateGravGunPickup(${1:Entity ent}, ${2:boolean lightning = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SimulateGravGunPickup(ent, lightning)"
    },
    {
      "trigger": "Spectate",
      "contents": "Spectate(${1:number mode})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Spectate(mode)"
    },
    {
      "trigger": "SpectateEntity",
      "contents": "SpectateEntity(${1:Entity entity})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SpectateEntity(entity)"
    },
    {
      "trigger": "SprayDecal",
      "contents": "SprayDecal(${1:Vector sprayOrigin}, ${2:Vector sprayEndPos})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SprayDecal(sprayOrigin, sprayEndPos)"
    },
    {
      "trigger": "SprintDisable",
      "contents": "SprintDisable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SprintDisable()"
    },
    {
      "trigger": "SprintEnable",
      "contents": "SprintEnable()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SprintEnable()"
    },
    {
      "trigger": "StartSprinting",
      "contents": "StartSprinting()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StartSprinting()"
    },
    {
      "trigger": "StartWalking",
      "contents": "StartWalking()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StartWalking()"
    },
    {
      "trigger": "SteamID",
      "contents": "SteamID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SteamID()"
    },
    {
      "trigger": "SteamID64",
      "contents": "SteamID64()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SteamID64()"
    },
    {
      "trigger": "StopSprinting",
      "contents": "StopSprinting()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StopSprinting()"
    },
    {
      "trigger": "StopWalking",
      "contents": "StopWalking()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StopWalking()"
    },
    {
      "trigger": "StopZooming",
      "contents": "StopZooming()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StopZooming()"
    },
    {
      "trigger": "StripAmmo",
      "contents": "StripAmmo()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StripAmmo()"
    },
    {
      "trigger": "StripWeapon",
      "contents": "StripWeapon(${1:string weapon})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StripWeapon(weapon)"
    },
    {
      "trigger": "StripWeapons",
      "contents": "StripWeapons()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:StripWeapons()"
    },
    {
      "trigger": "SuppressHint",
      "contents": "SuppressHint(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SuppressHint(name)"
    },
    {
      "trigger": "SwitchToDefaultWeapon",
      "contents": "SwitchToDefaultWeapon()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:SwitchToDefaultWeapon()"
    },
    {
      "trigger": "Team",
      "contents": "Team()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:Team()"
    },
    {
      "trigger": "TimeConnected",
      "contents": "TimeConnected()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:TimeConnected()"
    },
    {
      "trigger": "TraceHullAttack",
      "contents": "TraceHullAttack(${1:Vector startPos}, ${2:Vector endPos}, ${3:Vector mins}, ${4:Vector maxs}, ${5:number damage}, ${6:number damageFlags}, ${7:number damageForce}, ${8:boolean damageAllNPCs})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:TraceHullAttack(startPos, endPos, mins, maxs, damage, damageFlags, damageForce, damageAllNPCs)"
    },
    {
      "trigger": "TranslateWeaponActivity",
      "contents": "TranslateWeaponActivity(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:TranslateWeaponActivity(act)"
    },
    {
      "trigger": "UnfreezePhysicsObjects",
      "contents": "UnfreezePhysicsObjects()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UnfreezePhysicsObjects()"
    },
    {
      "trigger": "UniqueID",
      "contents": "UniqueID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UniqueID()"
    },
    {
      "trigger": "UniqueIDTable",
      "contents": "UniqueIDTable(${1:any key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UniqueIDTable(key)"
    },
    {
      "trigger": "UnLock",
      "contents": "UnLock()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UnLock()"
    },
    {
      "trigger": "UnSpectate",
      "contents": "UnSpectate()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UnSpectate()"
    },
    {
      "trigger": "UserID",
      "contents": "UserID()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:UserID()"
    },
    {
      "trigger": "ViewPunch",
      "contents": "ViewPunch(${1:Angle PunchAngle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ViewPunch(PunchAngle)"
    },
    {
      "trigger": "ViewPunchReset",
      "contents": "ViewPunchReset(${1:number tolerance = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:ViewPunchReset(tolerance)"
    },
    {
      "trigger": "VoiceVolume",
      "contents": "VoiceVolume()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Player:VoiceVolume()"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetAngles()"
    },
    {
      "trigger": "GetBrightness",
      "contents": "GetBrightness()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetBrightness()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetColor()"
    },
    {
      "trigger": "GetConstantAttenuation",
      "contents": "GetConstantAttenuation()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetConstantAttenuation()"
    },
    {
      "trigger": "GetEnableShadows",
      "contents": "GetEnableShadows()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetEnableShadows()"
    },
    {
      "trigger": "GetFarZ",
      "contents": "GetFarZ()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetFarZ()"
    },
    {
      "trigger": "GetHorizontalFOV",
      "contents": "GetHorizontalFOV()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetHorizontalFOV()"
    },
    {
      "trigger": "GetLightWorld",
      "contents": "GetLightWorld()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetLightWorld()"
    },
    {
      "trigger": "GetLinearAttenuation",
      "contents": "GetLinearAttenuation()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetLinearAttenuation()"
    },
    {
      "trigger": "GetNearZ",
      "contents": "GetNearZ()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetNearZ()"
    },
    {
      "trigger": "GetOrthographic",
      "contents": "GetOrthographic()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetOrthographic()"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetPos()"
    },
    {
      "trigger": "GetQuadraticAttenuation",
      "contents": "GetQuadraticAttenuation()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetQuadraticAttenuation()"
    },
    {
      "trigger": "GetShadowDepthBias",
      "contents": "GetShadowDepthBias()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetShadowDepthBias()"
    },
    {
      "trigger": "GetShadowFilter",
      "contents": "GetShadowFilter()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetShadowFilter()"
    },
    {
      "trigger": "GetShadowSlopeScaleDepthBias",
      "contents": "GetShadowSlopeScaleDepthBias()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetShadowSlopeScaleDepthBias()"
    },
    {
      "trigger": "GetTargetEntity",
      "contents": "GetTargetEntity()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetTargetEntity()"
    },
    {
      "trigger": "GetTexture",
      "contents": "GetTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetTexture()"
    },
    {
      "trigger": "GetTextureFrame",
      "contents": "GetTextureFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetTextureFrame()"
    },
    {
      "trigger": "GetVerticalFOV",
      "contents": "GetVerticalFOV()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:GetVerticalFOV()"
    },
    {
      "trigger": "IsValid",
      "contents": "IsValid()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:IsValid()"
    },
    {
      "trigger": "Remove",
      "contents": "Remove()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:Remove()"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angle})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetAngles(angle)"
    },
    {
      "trigger": "SetBrightness",
      "contents": "SetBrightness(${1:number brightness})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetBrightness(brightness)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetColor(color)"
    },
    {
      "trigger": "SetConstantAttenuation",
      "contents": "SetConstantAttenuation(${1:number constAtten})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetConstantAttenuation(constAtten)"
    },
    {
      "trigger": "SetEnableShadows",
      "contents": "SetEnableShadows(${1:boolean newState})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetEnableShadows(newState)"
    },
    {
      "trigger": "SetFarZ",
      "contents": "SetFarZ(${1:number farZ})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetFarZ(farZ)"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetFOV(fov)"
    },
    {
      "trigger": "SetHorizontalFOV",
      "contents": "SetHorizontalFOV(${1:number hFOV})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetHorizontalFOV(hFOV)"
    },
    {
      "trigger": "SetLightWorld",
      "contents": "SetLightWorld(${1:boolean lightworld})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetLightWorld(lightworld)"
    },
    {
      "trigger": "SetLinearAttenuation",
      "contents": "SetLinearAttenuation(${1:number linearAtten})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetLinearAttenuation(linearAtten)"
    },
    {
      "trigger": "SetNearZ",
      "contents": "SetNearZ(${1:number nearZ})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetNearZ(nearZ)"
    },
    {
      "trigger": "SetOrthographic",
      "contents": "SetOrthographic(${1:boolean orthographic}, ${2:number left}, ${3:number top}, ${4:number right}, ${5:number bottom})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetOrthographic(orthographic, left, top, right, bottom)"
    },
    {
      "trigger": "SetPos",
      "contents": "SetPos(${1:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetPos(position)"
    },
    {
      "trigger": "SetQuadraticAttenuation",
      "contents": "SetQuadraticAttenuation(${1:number quadAtten})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetQuadraticAttenuation(quadAtten)"
    },
    {
      "trigger": "SetShadowDepthBias",
      "contents": "SetShadowDepthBias(${1:number bias})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetShadowDepthBias(bias)"
    },
    {
      "trigger": "SetShadowFilter",
      "contents": "SetShadowFilter(${1:number filter})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetShadowFilter(filter)"
    },
    {
      "trigger": "SetShadowSlopeScaleDepthBias",
      "contents": "SetShadowSlopeScaleDepthBias(${1:number bias})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetShadowSlopeScaleDepthBias(bias)"
    },
    {
      "trigger": "SetTargetEntity",
      "contents": "SetTargetEntity(${1:Entity target = NULL})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetTargetEntity(target)"
    },
    {
      "trigger": "SetTexture",
      "contents": "SetTexture(${1:string texture})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetTexture(texture)"
    },
    {
      "trigger": "SetTextureFrame",
      "contents": "SetTextureFrame(${1:number frame})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetTextureFrame(frame)"
    },
    {
      "trigger": "SetVerticalFOV",
      "contents": "SetVerticalFOV(${1:number vFOV})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:SetVerticalFOV(vFOV)"
    },
    {
      "trigger": "Update",
      "contents": "Update()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "ProjectedTexture:Update()"
    },
    {
      "trigger": "AddTask",
      "contents": "AddTask(${1:string taskname}, ${2:any taskdata})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:AddTask(taskname, taskdata)"
    },
    {
      "trigger": "AddTaskEx",
      "contents": "AddTaskEx(${1:string start}, ${2:string run}, ${3:number data})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:AddTaskEx(start, run, data)"
    },
    {
      "trigger": "EngTask",
      "contents": "EngTask(${1:string taskname}, ${2:number taskdata})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:EngTask(taskname, taskdata)"
    },
    {
      "trigger": "GetTask",
      "contents": "GetTask(${1:number num})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:GetTask(num)"
    },
    {
      "trigger": "Init",
      "contents": "Init(${1:string debugName})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:Init(debugName)"
    },
    {
      "trigger": "NumTasks",
      "contents": "NumTasks()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Schedule:NumTasks()"
    },
    {
      "trigger": "Pop",
      "contents": "Pop(${1:number amount = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Stack:Pop(amount)"
    },
    {
      "trigger": "PopMulti",
      "contents": "PopMulti(${1:number amount = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Stack:PopMulti(amount)"
    },
    {
      "trigger": "Push",
      "contents": "Push(${1:any object})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Stack:Push(object)"
    },
    {
      "trigger": "Size",
      "contents": "Size()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Stack:Size()"
    },
    {
      "trigger": "Top",
      "contents": "Top()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Stack:Top()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "SurfaceInfo:GetMaterial()"
    },
    {
      "trigger": "GetVertices",
      "contents": "GetVertices()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "SurfaceInfo:GetVertices()"
    },
    {
      "trigger": "IsNoDraw",
      "contents": "IsNoDraw()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "SurfaceInfo:IsNoDraw()"
    },
    {
      "trigger": "IsSky",
      "contents": "IsSky()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "SurfaceInfo:IsSky()"
    },
    {
      "trigger": "IsWater",
      "contents": "IsWater()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "SurfaceInfo:IsWater()"
    },
    {
      "trigger": "Init",
      "contents": "Init()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:Init()"
    },
    {
      "trigger": "InitEngine",
      "contents": "InitEngine(${1:string taskname}, ${2:number taskdata})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:InitEngine(taskname, taskdata)"
    },
    {
      "trigger": "InitFunctionName",
      "contents": "InitFunctionName(${1:string startname}, ${2:string runname}, ${3:number taskdata})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:InitFunctionName(startname, runname, taskdata)"
    },
    {
      "trigger": "IsEngineType",
      "contents": "IsEngineType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:IsEngineType()"
    },
    {
      "trigger": "IsFNameType",
      "contents": "IsFNameType()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:IsFNameType()"
    },
    {
      "trigger": "Run",
      "contents": "Run(${1:NPC target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:Run(target)"
    },
    {
      "trigger": "Run_FName",
      "contents": "Run_FName(${1:NPC target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:Run_FName(target)"
    },
    {
      "trigger": "Start",
      "contents": "Start(${1:NPC target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:Start(target)"
    },
    {
      "trigger": "Start_FName",
      "contents": "Start_FName(${1:NPC target})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Task:Start_FName(target)"
    },
    {
      "trigger": "Allowed",
      "contents": "Allowed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:Allowed()"
    },
    {
      "trigger": "BuildConVarList",
      "contents": "BuildConVarList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:BuildConVarList()"
    },
    {
      "trigger": "CheckObjects",
      "contents": "CheckObjects()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:CheckObjects()"
    },
    {
      "trigger": "ClearObjects",
      "contents": "ClearObjects()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:ClearObjects()"
    },
    {
      "trigger": "Create",
      "contents": "Create()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:Create()"
    },
    {
      "trigger": "CreateConVars",
      "contents": "CreateConVars()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:CreateConVars()"
    },
    {
      "trigger": "GetBone",
      "contents": "GetBone(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetBone(id)"
    },
    {
      "trigger": "GetClientBool",
      "contents": "GetClientBool(${1:string name}, ${2:boolean default = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetClientBool(name, default)"
    },
    {
      "trigger": "GetClientInfo",
      "contents": "GetClientInfo(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetClientInfo(name)"
    },
    {
      "trigger": "GetClientNumber",
      "contents": "GetClientNumber(${1:string name}, ${2:number default = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetClientNumber(name, default)"
    },
    {
      "trigger": "GetEnt",
      "contents": "GetEnt(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetEnt(id)"
    },
    {
      "trigger": "GetHelpText",
      "contents": "GetHelpText()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetHelpText()"
    },
    {
      "trigger": "GetLocalPos",
      "contents": "GetLocalPos(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetLocalPos(id)"
    },
    {
      "trigger": "GetMode",
      "contents": "GetMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetMode()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetNormal(id)"
    },
    {
      "trigger": "GetOperation",
      "contents": "GetOperation()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetOperation()"
    },
    {
      "trigger": "GetOwner",
      "contents": "GetOwner()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetOwner()"
    },
    {
      "trigger": "GetPhys",
      "contents": "GetPhys(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetPhys(id)"
    },
    {
      "trigger": "GetPos",
      "contents": "GetPos(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetPos(id)"
    },
    {
      "trigger": "GetServerInfo",
      "contents": "GetServerInfo(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetServerInfo(name)"
    },
    {
      "trigger": "GetStage",
      "contents": "GetStage()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:GetStage()"
    },
    {
      "trigger": "MakeGhostEntity",
      "contents": "MakeGhostEntity(${1:string model}, ${2:Vector pos}, ${3:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:MakeGhostEntity(model, pos, angle)"
    },
    {
      "trigger": "NumObjects",
      "contents": "NumObjects()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:NumObjects()"
    },
    {
      "trigger": "RebuildControlPanel",
      "contents": "RebuildControlPanel(${1:vararg extra_args})",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:RebuildControlPanel(extra_args)"
    },
    {
      "trigger": "ReleaseGhostEntity",
      "contents": "ReleaseGhostEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:ReleaseGhostEntity()"
    },
    {
      "trigger": "SetObject",
      "contents": "SetObject(${1:number id}, ${2:Entity ent}, ${3:Vector pos}, ${4:PhysObj phys}, ${5:number bone}, ${6:Vector normal})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:SetObject(id, ent, pos, phys, bone, normal)"
    },
    {
      "trigger": "SetOperation",
      "contents": "SetOperation(${1:number operation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:SetOperation(operation)"
    },
    {
      "trigger": "SetStage",
      "contents": "SetStage(${1:number stage})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:SetStage(stage)"
    },
    {
      "trigger": "StartGhostEntity",
      "contents": "StartGhostEntity(${1:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:StartGhostEntity(ent)"
    },
    {
      "trigger": "UpdateData",
      "contents": "UpdateData()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:UpdateData()"
    },
    {
      "trigger": "UpdateGhostEntity",
      "contents": "UpdateGhostEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Tool:UpdateGhostEntity()"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:Vector vector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Add(vector)"
    },
    {
      "trigger": "Angle",
      "contents": "Angle()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Angle()"
    },
    {
      "trigger": "AngleEx",
      "contents": "AngleEx(${1:Vector up})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:AngleEx(up)"
    },
    {
      "trigger": "Cross",
      "contents": "Cross(${1:Vector otherVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Cross(otherVector)"
    },
    {
      "trigger": "Distance",
      "contents": "Distance(${1:Vector otherVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Distance(otherVector)"
    },
    {
      "trigger": "Distance2D",
      "contents": "Distance2D(${1:Vector otherVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Distance2D(otherVector)"
    },
    {
      "trigger": "Distance2DSqr",
      "contents": "Distance2DSqr(${1:Vector otherVec})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Distance2DSqr(otherVec)"
    },
    {
      "trigger": "DistToSqr",
      "contents": "DistToSqr(${1:Vector otherVec})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:DistToSqr(otherVec)"
    },
    {
      "trigger": "Div",
      "contents": "Div(${1:number divisor})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Div(divisor)"
    },
    {
      "trigger": "Dot",
      "contents": "Dot(${1:Vector otherVector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Dot(otherVector)"
    },
    {
      "trigger": "DotProduct",
      "contents": "DotProduct(${1:Vector Vector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:DotProduct(Vector)"
    },
    {
      "trigger": "GetNegated",
      "contents": "GetNegated()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:GetNegated()"
    },
    {
      "trigger": "GetNormal",
      "contents": "GetNormal()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:GetNormal()"
    },
    {
      "trigger": "GetNormalized",
      "contents": "GetNormalized()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:GetNormalized()"
    },
    {
      "trigger": "IsEqualTol",
      "contents": "IsEqualTol(${1:Vector compare}, ${2:number tolerance})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:IsEqualTol(compare, tolerance)"
    },
    {
      "trigger": "IsZero",
      "contents": "IsZero()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:IsZero()"
    },
    {
      "trigger": "Length",
      "contents": "Length()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Length()"
    },
    {
      "trigger": "Length2D",
      "contents": "Length2D()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Length2D()"
    },
    {
      "trigger": "Length2DSqr",
      "contents": "Length2DSqr()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Length2DSqr()"
    },
    {
      "trigger": "LengthSqr",
      "contents": "LengthSqr()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:LengthSqr()"
    },
    {
      "trigger": "Mul",
      "contents": "Mul(${1:number multiplier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Mul(multiplier)"
    },
    {
      "trigger": "Negate",
      "contents": "Negate()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Negate()"
    },
    {
      "trigger": "Normalize",
      "contents": "Normalize()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Normalize()"
    },
    {
      "trigger": "Random",
      "contents": "Random(${1:number min = -1}, ${2:number max = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Random(min, max)"
    },
    {
      "trigger": "Rotate",
      "contents": "Rotate(${1:Angle rotation})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Rotate(rotation)"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:Vector vector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Set(vector)"
    },
    {
      "trigger": "SetUnpacked",
      "contents": "SetUnpacked(${1:number x}, ${2:number y}, ${3:number z})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:SetUnpacked(x, y, z)"
    },
    {
      "trigger": "Sub",
      "contents": "Sub(${1:Vector vector})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Sub(vector)"
    },
    {
      "trigger": "ToColor",
      "contents": "ToColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:ToColor()"
    },
    {
      "trigger": "ToScreen",
      "contents": "ToScreen()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:ToScreen()"
    },
    {
      "trigger": "ToTable",
      "contents": "ToTable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:ToTable()"
    },
    {
      "trigger": "Unpack",
      "contents": "Unpack()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Unpack()"
    },
    {
      "trigger": "WithinAABox",
      "contents": "WithinAABox(${1:Vector boxStart}, ${2:Vector boxEnd})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:WithinAABox(boxStart, boxEnd)"
    },
    {
      "trigger": "Zero",
      "contents": "Zero()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vector:Zero()"
    },
    {
      "trigger": "BoostTimeLeft",
      "contents": "BoostTimeLeft()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:BoostTimeLeft()"
    },
    {
      "trigger": "CheckExitPoint",
      "contents": "CheckExitPoint(${1:number yaw}, ${2:number distance})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:CheckExitPoint(yaw, distance)"
    },
    {
      "trigger": "EnableEngine",
      "contents": "EnableEngine(${1:boolean enable})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:EnableEngine(enable)"
    },
    {
      "trigger": "GetAmmo",
      "contents": "GetAmmo()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetAmmo()"
    },
    {
      "trigger": "GetCameraDistance",
      "contents": "GetCameraDistance()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetCameraDistance()"
    },
    {
      "trigger": "GetDriver",
      "contents": "GetDriver()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetDriver()"
    },
    {
      "trigger": "GetHLSpeed",
      "contents": "GetHLSpeed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetHLSpeed()"
    },
    {
      "trigger": "GetMaxSpeed",
      "contents": "GetMaxSpeed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetMaxSpeed()"
    },
    {
      "trigger": "GetOperatingParams",
      "contents": "GetOperatingParams()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetOperatingParams()"
    },
    {
      "trigger": "GetPassenger",
      "contents": "GetPassenger(${1:number passenger})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetPassenger(passenger)"
    },
    {
      "trigger": "GetPassengerSeatPoint",
      "contents": "GetPassengerSeatPoint(${1:number role})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetPassengerSeatPoint(role)"
    },
    {
      "trigger": "GetRPM",
      "contents": "GetRPM()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetRPM()"
    },
    {
      "trigger": "GetSpeed",
      "contents": "GetSpeed()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetSpeed()"
    },
    {
      "trigger": "GetSteering",
      "contents": "GetSteering()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetSteering()"
    },
    {
      "trigger": "GetSteeringDegrees",
      "contents": "GetSteeringDegrees()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetSteeringDegrees()"
    },
    {
      "trigger": "GetThirdPersonMode",
      "contents": "GetThirdPersonMode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetThirdPersonMode()"
    },
    {
      "trigger": "GetThrottle",
      "contents": "GetThrottle()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetThrottle()"
    },
    {
      "trigger": "GetVehicleClass",
      "contents": "GetVehicleClass()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetVehicleClass()"
    },
    {
      "trigger": "GetVehicleParams",
      "contents": "GetVehicleParams()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetVehicleParams()"
    },
    {
      "trigger": "GetVehicleViewPosition",
      "contents": "GetVehicleViewPosition(${1:number role = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetVehicleViewPosition(role)"
    },
    {
      "trigger": "GetWheel",
      "contents": "GetWheel(${1:number wheel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetWheel(wheel)"
    },
    {
      "trigger": "GetWheelBaseHeight",
      "contents": "GetWheelBaseHeight(${1:number wheel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetWheelBaseHeight(wheel)"
    },
    {
      "trigger": "GetWheelContactPoint",
      "contents": "GetWheelContactPoint(${1:number wheel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetWheelContactPoint(wheel)"
    },
    {
      "trigger": "GetWheelCount",
      "contents": "GetWheelCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetWheelCount()"
    },
    {
      "trigger": "GetWheelTotalHeight",
      "contents": "GetWheelTotalHeight(${1:number wheel})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:GetWheelTotalHeight(wheel)"
    },
    {
      "trigger": "HasBoost",
      "contents": "HasBoost()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:HasBoost()"
    },
    {
      "trigger": "HasBrakePedal",
      "contents": "HasBrakePedal()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:HasBrakePedal()"
    },
    {
      "trigger": "IsBoosting",
      "contents": "IsBoosting()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:IsBoosting()"
    },
    {
      "trigger": "IsEngineEnabled",
      "contents": "IsEngineEnabled()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:IsEngineEnabled()"
    },
    {
      "trigger": "IsEngineStarted",
      "contents": "IsEngineStarted()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:IsEngineStarted()"
    },
    {
      "trigger": "IsValidVehicle",
      "contents": "IsValidVehicle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:IsValidVehicle()"
    },
    {
      "trigger": "IsVehicleBodyInWater",
      "contents": "IsVehicleBodyInWater()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:IsVehicleBodyInWater()"
    },
    {
      "trigger": "ReleaseHandbrake",
      "contents": "ReleaseHandbrake()",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:ReleaseHandbrake()"
    },
    {
      "trigger": "SetBoost",
      "contents": "SetBoost(${1:number boost})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetBoost(boost)"
    },
    {
      "trigger": "SetCameraDistance",
      "contents": "SetCameraDistance(${1:number distance})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetCameraDistance(distance)"
    },
    {
      "trigger": "SetHandbrake",
      "contents": "SetHandbrake(${1:boolean handbrake})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetHandbrake(handbrake)"
    },
    {
      "trigger": "SetHasBrakePedal",
      "contents": "SetHasBrakePedal(${1:boolean brakePedal})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetHasBrakePedal(brakePedal)"
    },
    {
      "trigger": "SetMaxReverseThrottle",
      "contents": "SetMaxReverseThrottle(${1:number maxRevThrottle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetMaxReverseThrottle(maxRevThrottle)"
    },
    {
      "trigger": "SetMaxThrottle",
      "contents": "SetMaxThrottle(${1:number maxThrottle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetMaxThrottle(maxThrottle)"
    },
    {
      "trigger": "SetSpringLength",
      "contents": "SetSpringLength(${1:number wheel}, ${2:number length})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetSpringLength(wheel, length)"
    },
    {
      "trigger": "SetSteering",
      "contents": "SetSteering(${1:number front}, ${2:number rear})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetSteering(front, rear)"
    },
    {
      "trigger": "SetSteeringDegrees",
      "contents": "SetSteeringDegrees(${1:number steeringDegrees})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetSteeringDegrees(steeringDegrees)"
    },
    {
      "trigger": "SetThirdPersonMode",
      "contents": "SetThirdPersonMode(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetThirdPersonMode(enable)"
    },
    {
      "trigger": "SetThrottle",
      "contents": "SetThrottle(${1:number throttle})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetThrottle(throttle)"
    },
    {
      "trigger": "SetVehicleClass",
      "contents": "SetVehicleClass(${1:string class})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetVehicleClass(class)"
    },
    {
      "trigger": "SetVehicleEntryAnim",
      "contents": "SetVehicleEntryAnim(${1:boolean bOn})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetVehicleEntryAnim(bOn)"
    },
    {
      "trigger": "SetVehicleParams",
      "contents": "SetVehicleParams(${1:table params})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetVehicleParams(params)"
    },
    {
      "trigger": "SetWheelFriction",
      "contents": "SetWheelFriction(${1:number wheel}, ${2:number friction})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:SetWheelFriction(wheel, friction)"
    },
    {
      "trigger": "StartEngine",
      "contents": "StartEngine(${1:boolean start})",
      "annotation": "Server",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Vehicle:StartEngine(start)"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:VMatrix input})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Add(input)"
    },
    {
      "trigger": "GetAngles",
      "contents": "GetAngles()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetAngles()"
    },
    {
      "trigger": "GetField",
      "contents": "GetField(${1:number row}, ${2:number column})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetField(row, column)"
    },
    {
      "trigger": "GetForward",
      "contents": "GetForward()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetForward()"
    },
    {
      "trigger": "GetInverse",
      "contents": "GetInverse()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetInverse()"
    },
    {
      "trigger": "GetInverseTR",
      "contents": "GetInverseTR()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetInverseTR()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetRight()"
    },
    {
      "trigger": "GetScale",
      "contents": "GetScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetScale()"
    },
    {
      "trigger": "GetTranslation",
      "contents": "GetTranslation()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetTranslation()"
    },
    {
      "trigger": "GetTransposed",
      "contents": "GetTransposed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetTransposed()"
    },
    {
      "trigger": "GetUp",
      "contents": "GetUp()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:GetUp()"
    },
    {
      "trigger": "Identity",
      "contents": "Identity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Identity()"
    },
    {
      "trigger": "Invert",
      "contents": "Invert()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Invert()"
    },
    {
      "trigger": "InvertTR",
      "contents": "InvertTR()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:InvertTR()"
    },
    {
      "trigger": "IsIdentity",
      "contents": "IsIdentity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:IsIdentity()"
    },
    {
      "trigger": "IsRotationMatrix",
      "contents": "IsRotationMatrix()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:IsRotationMatrix()"
    },
    {
      "trigger": "IsZero",
      "contents": "IsZero()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:IsZero()"
    },
    {
      "trigger": "Mul",
      "contents": "Mul(${1:VMatrix input})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Mul(input)"
    },
    {
      "trigger": "Rotate",
      "contents": "Rotate(${1:Angle rotation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Rotate(rotation)"
    },
    {
      "trigger": "Scale",
      "contents": "Scale(${1:Vector scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Scale(scale)"
    },
    {
      "trigger": "ScaleTranslation",
      "contents": "ScaleTranslation(${1:number scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:ScaleTranslation(scale)"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:VMatrix src})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Set(src)"
    },
    {
      "trigger": "SetAngles",
      "contents": "SetAngles(${1:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetAngles(angle)"
    },
    {
      "trigger": "SetField",
      "contents": "SetField(${1:number row}, ${2:number column}, ${3:number value})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetField(row, column, value)"
    },
    {
      "trigger": "SetForward",
      "contents": "SetForward(${1:Vector forward})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetForward(forward)"
    },
    {
      "trigger": "SetRight",
      "contents": "SetRight(${1:Vector forward})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetRight(forward)"
    },
    {
      "trigger": "SetScale",
      "contents": "SetScale(${1:Vector scale})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetScale(scale)"
    },
    {
      "trigger": "SetTranslation",
      "contents": "SetTranslation(${1:Vector translation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetTranslation(translation)"
    },
    {
      "trigger": "SetUnpacked",
      "contents": "SetUnpacked(${1:number e11}, ${2:number e12}, ${3:number e13}, ${4:number e14}, ${5:number e21}, ${6:number e22}, ${7:number e23}, ${8:number e24}, ${9:number e31}, ${10:number e32}, ${11:number e33}, ${12:number e34}, ${13:number e41}, ${14:number e42}, ${15:number e43}, ${16:number e44})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetUnpacked(e11, e12, e13, e14, e21, e22, e23, e24, e31, e32, e33, e34, e41, e42, e43, e44)"
    },
    {
      "trigger": "SetUp",
      "contents": "SetUp(${1:Vector forward})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:SetUp(forward)"
    },
    {
      "trigger": "Sub",
      "contents": "Sub(${1:VMatrix input})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Sub(input)"
    },
    {
      "trigger": "ToTable",
      "contents": "ToTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:ToTable()"
    },
    {
      "trigger": "Translate",
      "contents": "Translate(${1:Vector translation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Translate(translation)"
    },
    {
      "trigger": "Unpack",
      "contents": "Unpack()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Unpack()"
    },
    {
      "trigger": "Zero",
      "contents": "Zero()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "VMatrix:Zero()"
    },
    {
      "trigger": "AllowsAutoSwitchFrom",
      "contents": "AllowsAutoSwitchFrom()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:AllowsAutoSwitchFrom()"
    },
    {
      "trigger": "AllowsAutoSwitchTo",
      "contents": "AllowsAutoSwitchTo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:AllowsAutoSwitchTo()"
    },
    {
      "trigger": "CallOnClient",
      "contents": "CallOnClient(${1:string functionName}, ${2:string arguments})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:CallOnClient(functionName, arguments)"
    },
    {
      "trigger": "Clip1",
      "contents": "Clip1()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:Clip1()"
    },
    {
      "trigger": "Clip2",
      "contents": "Clip2()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:Clip2()"
    },
    {
      "trigger": "DefaultReload",
      "contents": "DefaultReload(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:DefaultReload(act)"
    },
    {
      "trigger": "GetActivity",
      "contents": "GetActivity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetActivity()"
    },
    {
      "trigger": "GetDeploySpeed",
      "contents": "GetDeploySpeed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetDeploySpeed()"
    },
    {
      "trigger": "GetHoldType",
      "contents": "GetHoldType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetHoldType()"
    },
    {
      "trigger": "GetMaxClip1",
      "contents": "GetMaxClip1()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetMaxClip1()"
    },
    {
      "trigger": "GetMaxClip2",
      "contents": "GetMaxClip2()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetMaxClip2()"
    },
    {
      "trigger": "GetNextPrimaryFire",
      "contents": "GetNextPrimaryFire()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetNextPrimaryFire()"
    },
    {
      "trigger": "GetNextSecondaryFire",
      "contents": "GetNextSecondaryFire()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetNextSecondaryFire()"
    },
    {
      "trigger": "GetPrimaryAmmoType",
      "contents": "GetPrimaryAmmoType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetPrimaryAmmoType()"
    },
    {
      "trigger": "GetPrintName",
      "contents": "GetPrintName()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetPrintName()"
    },
    {
      "trigger": "GetSecondaryAmmoType",
      "contents": "GetSecondaryAmmoType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetSecondaryAmmoType()"
    },
    {
      "trigger": "GetSlot",
      "contents": "GetSlot()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetSlot()"
    },
    {
      "trigger": "GetSlotPos",
      "contents": "GetSlotPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetSlotPos()"
    },
    {
      "trigger": "GetWeaponViewModel",
      "contents": "GetWeaponViewModel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetWeaponViewModel()"
    },
    {
      "trigger": "GetWeaponWorldModel",
      "contents": "GetWeaponWorldModel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetWeaponWorldModel()"
    },
    {
      "trigger": "GetWeight",
      "contents": "GetWeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:GetWeight()"
    },
    {
      "trigger": "HasAmmo",
      "contents": "HasAmmo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:HasAmmo()"
    },
    {
      "trigger": "IsCarriedByLocalPlayer",
      "contents": "IsCarriedByLocalPlayer()",
      "annotation": "Client",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:IsCarriedByLocalPlayer()"
    },
    {
      "trigger": "IsScripted",
      "contents": "IsScripted()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:IsScripted()"
    },
    {
      "trigger": "IsWeaponVisible",
      "contents": "IsWeaponVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:IsWeaponVisible()"
    },
    {
      "trigger": "LastShootTime",
      "contents": "LastShootTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:LastShootTime()"
    },
    {
      "trigger": "SendWeaponAnim",
      "contents": "SendWeaponAnim(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SendWeaponAnim(act)"
    },
    {
      "trigger": "SetActivity",
      "contents": "SetActivity(${1:number act})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetActivity(act)"
    },
    {
      "trigger": "SetClip1",
      "contents": "SetClip1(${1:number ammo})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetClip1(ammo)"
    },
    {
      "trigger": "SetClip2",
      "contents": "SetClip2(${1:number ammo})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetClip2(ammo)"
    },
    {
      "trigger": "SetDeploySpeed",
      "contents": "SetDeploySpeed(${1:number speed})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetDeploySpeed(speed)"
    },
    {
      "trigger": "SetHoldType",
      "contents": "SetHoldType(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetHoldType(name)"
    },
    {
      "trigger": "SetLastShootTime",
      "contents": "SetLastShootTime(${1:number time = CurTime()})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetLastShootTime(time)"
    },
    {
      "trigger": "SetNextPrimaryFire",
      "contents": "SetNextPrimaryFire(${1:number time})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetNextPrimaryFire(time)"
    },
    {
      "trigger": "SetNextSecondaryFire",
      "contents": "SetNextSecondaryFire(${1:number time})",
      "annotation": "Shared",
      "kind": [
        "function",
        "c",
        "Class"
      ],
      "details": "Weapon:SetNextSecondaryFire(time)"
    },
    {
      "trigger": "achievements.BalloonPopped",
      "contents": "achievements.BalloonPopped()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.BalloonPopped()"
    },
    {
      "trigger": "achievements.Count",
      "contents": "achievements.Count()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.Count()"
    },
    {
      "trigger": "achievements.EatBall",
      "contents": "achievements.EatBall()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.EatBall()"
    },
    {
      "trigger": "achievements.GetCount",
      "contents": "achievements.GetCount(${1:number achievementID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.GetCount(achievementID)"
    },
    {
      "trigger": "achievements.GetDesc",
      "contents": "achievements.GetDesc(${1:number achievementID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.GetDesc(achievementID)"
    },
    {
      "trigger": "achievements.GetGoal",
      "contents": "achievements.GetGoal(${1:number achievementID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.GetGoal(achievementID)"
    },
    {
      "trigger": "achievements.GetName",
      "contents": "achievements.GetName(${1:number achievementID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.GetName(achievementID)"
    },
    {
      "trigger": "achievements.IncBaddies",
      "contents": "achievements.IncBaddies()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.IncBaddies()"
    },
    {
      "trigger": "achievements.IncBystander",
      "contents": "achievements.IncBystander()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.IncBystander()"
    },
    {
      "trigger": "achievements.IncGoodies",
      "contents": "achievements.IncGoodies()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.IncGoodies()"
    },
    {
      "trigger": "achievements.IsAchieved",
      "contents": "achievements.IsAchieved(${1:number AchievementID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.IsAchieved(AchievementID)"
    },
    {
      "trigger": "achievements.Remover",
      "contents": "achievements.Remover()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.Remover()"
    },
    {
      "trigger": "achievements.SpawnedNPC",
      "contents": "achievements.SpawnedNPC()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.SpawnedNPC()"
    },
    {
      "trigger": "achievements.SpawnedProp",
      "contents": "achievements.SpawnedProp()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.SpawnedProp()"
    },
    {
      "trigger": "achievements.SpawnedRagdoll",
      "contents": "achievements.SpawnedRagdoll()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.SpawnedRagdoll()"
    },
    {
      "trigger": "achievements.SpawnMenuOpen",
      "contents": "achievements.SpawnMenuOpen()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "achievements.SpawnMenuOpen()"
    },
    {
      "trigger": "ai.GetScheduleID",
      "contents": "ai.GetScheduleID(${1:string sched})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai.GetScheduleID(sched)"
    },
    {
      "trigger": "ai.GetSquadLeader",
      "contents": "ai.GetSquadLeader(${1:string squad})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai.GetSquadLeader(squad)"
    },
    {
      "trigger": "ai.GetSquadMemberCount",
      "contents": "ai.GetSquadMemberCount(${1:string squad})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai.GetSquadMemberCount(squad)"
    },
    {
      "trigger": "ai.GetSquadMembers",
      "contents": "ai.GetSquadMembers(${1:string squad})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai.GetSquadMembers(squad)"
    },
    {
      "trigger": "ai.GetTaskID",
      "contents": "ai.GetTaskID(${1:string task})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai.GetTaskID(task)"
    },
    {
      "trigger": "ai_schedule.New",
      "contents": "ai_schedule.New(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai_schedule.New(name)"
    },
    {
      "trigger": "ai_task.New",
      "contents": "ai_task.New()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ai_task.New()"
    },
    {
      "trigger": "baseclass.Get",
      "contents": "baseclass.Get(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "baseclass.Get(name)"
    },
    {
      "trigger": "baseclass.Set",
      "contents": "baseclass.Set(${1:string name}, ${2:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "baseclass.Set(name, tab)"
    },
    {
      "trigger": "bit.arshift",
      "contents": "bit.arshift(${1:number value}, ${2:number shiftCount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.arshift(value, shiftCount)"
    },
    {
      "trigger": "bit.band",
      "contents": "bit.band(${1:number value}, ${2:number otherValues = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.band(value, otherValues)"
    },
    {
      "trigger": "bit.bnot",
      "contents": "bit.bnot(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.bnot(value)"
    },
    {
      "trigger": "bit.bor",
      "contents": "bit.bor(${1:number value1}, ${2:vararg ...})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.bor(value1, ...)"
    },
    {
      "trigger": "bit.bswap",
      "contents": "bit.bswap(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.bswap(value)"
    },
    {
      "trigger": "bit.bxor",
      "contents": "bit.bxor(${1:number value}, ${2:number otherValues = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.bxor(value, otherValues)"
    },
    {
      "trigger": "bit.lshift",
      "contents": "bit.lshift(${1:number value}, ${2:number shiftCount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.lshift(value, shiftCount)"
    },
    {
      "trigger": "bit.rol",
      "contents": "bit.rol(${1:number value}, ${2:number shiftCount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.rol(value, shiftCount)"
    },
    {
      "trigger": "bit.ror",
      "contents": "bit.ror(${1:number value}, ${2:number shiftCount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.ror(value, shiftCount)"
    },
    {
      "trigger": "bit.rshift",
      "contents": "bit.rshift(${1:number value}, ${2:number shiftCount})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.rshift(value, shiftCount)"
    },
    {
      "trigger": "bit.tobit",
      "contents": "bit.tobit(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.tobit(value)"
    },
    {
      "trigger": "bit.tohex",
      "contents": "bit.tohex(${1:number value}, ${2:number digits = 8})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "bit.tohex(value, digits)"
    },
    {
      "trigger": "cam.ApplyShake",
      "contents": "cam.ApplyShake(${1:Vector pos}, ${2:Angle angles}, ${3:number factor})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.ApplyShake(pos, angles, factor)"
    },
    {
      "trigger": "cam.End",
      "contents": "cam.End()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.End()"
    },
    {
      "trigger": "cam.End2D",
      "contents": "cam.End2D()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.End2D()"
    },
    {
      "trigger": "cam.End3D",
      "contents": "cam.End3D()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.End3D()"
    },
    {
      "trigger": "cam.End3D2D",
      "contents": "cam.End3D2D()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.End3D2D()"
    },
    {
      "trigger": "cam.EndOrthoView",
      "contents": "cam.EndOrthoView()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.EndOrthoView()"
    },
    {
      "trigger": "cam.GetModelMatrix",
      "contents": "cam.GetModelMatrix()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.GetModelMatrix()"
    },
    {
      "trigger": "cam.IgnoreZ",
      "contents": "cam.IgnoreZ(${1:boolean ignoreZ})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.IgnoreZ(ignoreZ)"
    },
    {
      "trigger": "cam.PopModelMatrix",
      "contents": "cam.PopModelMatrix()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.PopModelMatrix()"
    },
    {
      "trigger": "cam.PushModelMatrix",
      "contents": "cam.PushModelMatrix(${1:VMatrix matrix}, ${2:boolean multiply = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.PushModelMatrix(matrix, multiply)"
    },
    {
      "trigger": "cam.Start",
      "contents": "cam.Start(${1:table dataTbl})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.Start(dataTbl)"
    },
    {
      "trigger": "cam.Start2D",
      "contents": "cam.Start2D()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.Start2D()"
    },
    {
      "trigger": "cam.Start3D",
      "contents": "cam.Start3D(${1:Vector pos = EyePos()}, ${2:Angle angles = EyeAngles()}, ${3:number fov = nil}, ${4:number x = 0}, ${5:number y = 0}, ${6:number w = ScrW()}, ${7:number h = ScrH()}, ${8:number zNear = nil}, ${9:number zFar = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.Start3D(pos, angles, fov, x, y, w, h, zNear, zFar)"
    },
    {
      "trigger": "cam.Start3D2D",
      "contents": "cam.Start3D2D(${1:Vector pos}, ${2:Angle angles}, ${3:number scale})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.Start3D2D(pos, angles, scale)"
    },
    {
      "trigger": "cam.StartOrthoView",
      "contents": "cam.StartOrthoView(${1:number leftOffset}, ${2:number topOffset}, ${3:number rightOffset}, ${4:number bottomOffset})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cam.StartOrthoView(leftOffset, topOffset, rightOffset, bottomOffset)"
    },
    {
      "trigger": "chat.AddText",
      "contents": "chat.AddText(${1:vararg arguments})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.AddText(arguments)"
    },
    {
      "trigger": "chat.Close",
      "contents": "chat.Close()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.Close()"
    },
    {
      "trigger": "chat.GetChatBoxPos",
      "contents": "chat.GetChatBoxPos()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.GetChatBoxPos()"
    },
    {
      "trigger": "chat.GetChatBoxSize",
      "contents": "chat.GetChatBoxSize()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.GetChatBoxSize()"
    },
    {
      "trigger": "chat.Open",
      "contents": "chat.Open(${1:number mode})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.Open(mode)"
    },
    {
      "trigger": "chat.PlaySound",
      "contents": "chat.PlaySound()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "chat.PlaySound()"
    },
    {
      "trigger": "cleanup.Add",
      "contents": "cleanup.Add(${1:Player pl}, ${2:string type}, ${3:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.Add(pl, type, ent)"
    },
    {
      "trigger": "cleanup.CC_AdminCleanup",
      "contents": "cleanup.CC_AdminCleanup(${1:Player pl}, ${2:string command}, ${3:table args})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.CC_AdminCleanup(pl, command, args)"
    },
    {
      "trigger": "cleanup.CC_Cleanup",
      "contents": "cleanup.CC_Cleanup(${1:Player pl}, ${2:string command}, ${3:table args})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.CC_Cleanup(pl, command, args)"
    },
    {
      "trigger": "cleanup.GetList",
      "contents": "cleanup.GetList()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.GetList()"
    },
    {
      "trigger": "cleanup.GetTable",
      "contents": "cleanup.GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.GetTable()"
    },
    {
      "trigger": "cleanup.Register",
      "contents": "cleanup.Register(${1:string type})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.Register(type)"
    },
    {
      "trigger": "cleanup.ReplaceEntity",
      "contents": "cleanup.ReplaceEntity(${1:Entity from}, ${2:Entity to})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.ReplaceEntity(from, to)"
    },
    {
      "trigger": "cleanup.UpdateUI",
      "contents": "cleanup.UpdateUI()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cleanup.UpdateUI()"
    },
    {
      "trigger": "concommand.Add",
      "contents": "concommand.Add(${1:string name}, ${2:function callback}, ${3:function autoComplete = nil}, ${4:string helpText = nil}, ${5:number flags = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "concommand.Add(name, callback, autoComplete, helpText, flags)"
    },
    {
      "trigger": "concommand.AutoComplete",
      "contents": "concommand.AutoComplete(${1:string command}, ${2:string arguments})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "concommand.AutoComplete(command, arguments)"
    },
    {
      "trigger": "concommand.GetTable",
      "contents": "concommand.GetTable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "concommand.GetTable()"
    },
    {
      "trigger": "concommand.Remove",
      "contents": "concommand.Remove(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "concommand.Remove(name)"
    },
    {
      "trigger": "concommand.Run",
      "contents": "concommand.Run(${1:Player ply}, ${2:string cmd}, ${3:any args}, ${4:string argumentString})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "concommand.Run(ply, cmd, args, argumentString)"
    },
    {
      "trigger": "constraint.AddConstraintTable",
      "contents": "constraint.AddConstraintTable(${1:Entity ent1}, ${2:Entity constrt}, ${3:Entity ent2 = nil}, ${4:Entity ent3 = nil}, ${5:Entity ent4 = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.AddConstraintTable(ent1, constrt, ent2, ent3, ent4)"
    },
    {
      "trigger": "constraint.AddConstraintTableNoDelete",
      "contents": "constraint.AddConstraintTableNoDelete(${1:Entity ent1}, ${2:Entity constrt}, ${3:Entity ent2 = nil}, ${4:Entity ent3 = nil}, ${5:Entity ent4 = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.AddConstraintTableNoDelete(ent1, constrt, ent2, ent3, ent4)"
    },
    {
      "trigger": "constraint.AdvBallsocket",
      "contents": "constraint.AdvBallsocket(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number forcelimit}, ${8:number torquelimit}, ${9:number xmin}, ${10:number ymin}, ${11:number zmin}, ${12:number xmax}, ${13:number ymax}, ${14:number zmax}, ${15:number xfric}, ${16:number yfric}, ${17:number zfric}, ${18:number onlyrotation}, ${19:number nocollide})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.AdvBallsocket(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, forcelimit, torquelimit, xmin, ymin, zmin, xmax, ymax, zmax, xfric, yfric, zfric, onlyrotation, nocollide)"
    },
    {
      "trigger": "constraint.Axis",
      "contents": "constraint.Axis(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number forcelimit}, ${8:number torquelimit}, ${9:number friction}, ${10:number nocollide}, ${11:Vector LocalAxis}, ${12:boolean DontAddTable})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Axis(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, forcelimit, torquelimit, friction, nocollide, LocalAxis, DontAddTable)"
    },
    {
      "trigger": "constraint.Ballsocket",
      "contents": "constraint.Ballsocket(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LocalPos}, ${6:number forcelimit}, ${7:number torquelimit}, ${8:number nocollide})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Ballsocket(Ent1, Ent2, Bone1, Bone2, LocalPos, forcelimit, torquelimit, nocollide)"
    },
    {
      "trigger": "constraint.CanConstrain",
      "contents": "constraint.CanConstrain(${1:Entity ent}, ${2:number bone})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.CanConstrain(ent, bone)"
    },
    {
      "trigger": "constraint.CreateKeyframeRope",
      "contents": "constraint.CreateKeyframeRope(${1:Vector pos}, ${2:number width}, ${3:string material}, ${4:Entity Constraint}, ${5:Entity Ent1}, ${6:Vector LPos1}, ${7:number Bone1}, ${8:Entity Ent2}, ${9:Vector LPos2}, ${10:number Bone2}, ${11:table kv})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.CreateKeyframeRope(pos, width, material, Constraint, Ent1, LPos1, Bone1, Ent2, LPos2, Bone2, kv)"
    },
    {
      "trigger": "constraint.CreateStaticAnchorPoint",
      "contents": "constraint.CreateStaticAnchorPoint(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.CreateStaticAnchorPoint(pos)"
    },
    {
      "trigger": "constraint.Elastic",
      "contents": "constraint.Elastic(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number constant}, ${8:number damping}, ${9:number rdamping}, ${10:string material}, ${11:number width}, ${12:boolean stretchonly}, ${13:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Elastic(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, constant, damping, rdamping, material, width, stretchonly, color)"
    },
    {
      "trigger": "constraint.Find",
      "contents": "constraint.Find(${1:Entity ent1}, ${2:Entity ent2}, ${3:string type}, ${4:number bone1}, ${5:number bone2})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Find(ent1, ent2, type, bone1, bone2)"
    },
    {
      "trigger": "constraint.FindConstraint",
      "contents": "constraint.FindConstraint(${1:Entity ent}, ${2:string type})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.FindConstraint(ent, type)"
    },
    {
      "trigger": "constraint.FindConstraintEntity",
      "contents": "constraint.FindConstraintEntity(${1:Entity ent}, ${2:string type})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.FindConstraintEntity(ent, type)"
    },
    {
      "trigger": "constraint.FindConstraints",
      "contents": "constraint.FindConstraints(${1:Entity ent}, ${2:string type})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.FindConstraints(ent, type)"
    },
    {
      "trigger": "constraint.ForgetConstraints",
      "contents": "constraint.ForgetConstraints(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.ForgetConstraints(ent)"
    },
    {
      "trigger": "constraint.GetAllConstrainedEntities",
      "contents": "constraint.GetAllConstrainedEntities(${1:Entity ent}, ${2:table ResultTable = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.GetAllConstrainedEntities(ent, ResultTable)"
    },
    {
      "trigger": "constraint.GetTable",
      "contents": "constraint.GetTable(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.GetTable(ent)"
    },
    {
      "trigger": "constraint.HasConstraints",
      "contents": "constraint.HasConstraints(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.HasConstraints(ent)"
    },
    {
      "trigger": "constraint.Hydraulic",
      "contents": "constraint.Hydraulic(${1:Player pl}, ${2:Entity Ent1}, ${3:Entity Ent2}, ${4:number Bone1}, ${5:number Bone2}, ${6:Vector LPos1}, ${7:Vector LPos2}, ${8:number Length1}, ${9:number Length2}, ${10:number width}, ${11:number key}, ${12:number fixed}, ${13:number speed}, ${14:string material}, ${15:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Hydraulic(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, Length1, Length2, width, key, fixed, speed, material, color)"
    },
    {
      "trigger": "constraint.Keepupright",
      "contents": "constraint.Keepupright(${1:Entity ent}, ${2:Angle ang}, ${3:number bone}, ${4:number angularLimit})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Keepupright(ent, ang, bone, angularLimit)"
    },
    {
      "trigger": "constraint.Motor",
      "contents": "constraint.Motor(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number friction}, ${8:number torque}, ${9:number forcetime}, ${10:number nocollide}, ${11:number toggle}, ${12:Player pl}, ${13:number forcelimit}, ${14:number numpadkey_fwd}, ${15:number numpadkey_bwd}, ${16:number direction}, ${17:Vector LocalAxis})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Motor(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, friction, torque, forcetime, nocollide, toggle, pl, forcelimit, numpadkey_fwd, numpadkey_bwd, direction, LocalAxis)"
    },
    {
      "trigger": "constraint.Muscle",
      "contents": "constraint.Muscle(${1:Player pl}, ${2:Entity Ent1}, ${3:Entity Ent2}, ${4:number Bone1}, ${5:number Bone2}, ${6:Vector LPos1}, ${7:Vector LPos2}, ${8:number Length1}, ${9:number Length2}, ${10:number width}, ${11:number key}, ${12:number fixed}, ${13:number period}, ${14:number amplitude}, ${15:boolean starton}, ${16:string material}, ${17:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Muscle(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, Length1, Length2, width, key, fixed, period, amplitude, starton, material, color)"
    },
    {
      "trigger": "constraint.NoCollide",
      "contents": "constraint.NoCollide(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.NoCollide(Ent1, Ent2, Bone1, Bone2)"
    },
    {
      "trigger": "constraint.Pulley",
      "contents": "constraint.Pulley(${1:Entity Ent1}, ${2:Entity Ent4}, ${3:number Bone1}, ${4:number Bone4}, ${5:Vector LPos1}, ${6:Vector LPos4}, ${7:Vector WPos2}, ${8:Vector WPos3}, ${9:number forcelimit}, ${10:boolean rigid}, ${11:number width}, ${12:string material}, ${13:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Pulley(Ent1, Ent4, Bone1, Bone4, LPos1, LPos4, WPos2, WPos3, forcelimit, rigid, width, material, color)"
    },
    {
      "trigger": "constraint.RemoveAll",
      "contents": "constraint.RemoveAll(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.RemoveAll(ent)"
    },
    {
      "trigger": "constraint.RemoveConstraints",
      "contents": "constraint.RemoveConstraints(${1:Entity ent}, ${2:string type})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.RemoveConstraints(ent, type)"
    },
    {
      "trigger": "constraint.Rope",
      "contents": "constraint.Rope(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number length}, ${8:number addlength}, ${9:number forcelimit}, ${10:number width}, ${11:string material}, ${12:boolean rigid}, ${13:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Rope(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, length, addlength, forcelimit, width, material, rigid, color)"
    },
    {
      "trigger": "constraint.Slider",
      "contents": "constraint.Slider(${1:Entity Ent1}, ${2:Entity Ent2}, ${3:number Bone1}, ${4:number Bone2}, ${5:Vector LPos1}, ${6:Vector LPos2}, ${7:number width}, ${8:string material}, ${9:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Slider(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, width, material, color)"
    },
    {
      "trigger": "constraint.Weld",
      "contents": "constraint.Weld(${1:Entity ent1}, ${2:Entity ent2}, ${3:number bone1}, ${4:number bone2}, ${5:number forcelimit}, ${6:boolean nocollide}, ${7:boolean deleteent1onbreak})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Weld(ent1, ent2, bone1, bone2, forcelimit, nocollide, deleteent1onbreak)"
    },
    {
      "trigger": "constraint.Winch",
      "contents": "constraint.Winch(${1:Player pl}, ${2:Entity Ent1}, ${3:Entity Ent2}, ${4:number Bone1}, ${5:number Bone2}, ${6:Vector LPos1}, ${7:Vector LPos2}, ${8:number width}, ${9:number fwd_bind}, ${10:number bwd_bind}, ${11:number fwd_speed}, ${12:number bwd_speed}, ${13:string material}, ${14:boolean toggle}, ${15:table color})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "constraint.Winch(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, width, fwd_bind, bwd_bind, fwd_speed, bwd_speed, material, toggle, color)"
    },
    {
      "trigger": "construct.Magnet",
      "contents": "construct.Magnet(${1:Player ply}, ${2:Vector pos}, ${3:Angle ang}, ${4:string model}, ${5:string material}, ${6:number key}, ${7:number maxObjects}, ${8:number strength}, ${9:number nopull = 0}, ${10:number allowrot = 0}, ${11:number startOn = 0}, ${12:number toggle}, ${13:Vector vel = Vector( 0, 0, 0 )}, ${14:Angle aVel = Angle( 0, 0, 0 )}, ${15:boolean frozen = false})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "construct.Magnet(ply, pos, ang, model, material, key, maxObjects, strength, nopull, allowrot, startOn, toggle, vel, aVel, frozen)"
    },
    {
      "trigger": "construct.SetPhysProp",
      "contents": "construct.SetPhysProp(${1:Player ply}, ${2:Entity ent}, ${3:number physObjID}, ${4:PhysObj physObj}, ${5:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "construct.SetPhysProp(ply, ent, physObjID, physObj, data)"
    },
    {
      "trigger": "controlpanel.Clear",
      "contents": "controlpanel.Clear()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "controlpanel.Clear()"
    },
    {
      "trigger": "controlpanel.Get",
      "contents": "controlpanel.Get(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "controlpanel.Get(name)"
    },
    {
      "trigger": "cookie.Delete",
      "contents": "cookie.Delete(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cookie.Delete(name)"
    },
    {
      "trigger": "cookie.GetNumber",
      "contents": "cookie.GetNumber(${1:string name}, ${2:any default = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cookie.GetNumber(name, default)"
    },
    {
      "trigger": "cookie.GetString",
      "contents": "cookie.GetString(${1:string name}, ${2:any default = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cookie.GetString(name, default)"
    },
    {
      "trigger": "cookie.Set",
      "contents": "cookie.Set(${1:string key}, ${2:string value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cookie.Set(key, value)"
    },
    {
      "trigger": "coroutine.create",
      "contents": "coroutine.create(${1:function func})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.create(func)"
    },
    {
      "trigger": "coroutine.isyieldable",
      "contents": "coroutine.isyieldable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.isyieldable()"
    },
    {
      "trigger": "coroutine.resume",
      "contents": "coroutine.resume(${1:thread coroutine}, ${2:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.resume(coroutine, args)"
    },
    {
      "trigger": "coroutine.running",
      "contents": "coroutine.running()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.running()"
    },
    {
      "trigger": "coroutine.status",
      "contents": "coroutine.status(${1:thread coroutine})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.status(coroutine)"
    },
    {
      "trigger": "coroutine.wait",
      "contents": "coroutine.wait(${1:number duration})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.wait(duration)"
    },
    {
      "trigger": "coroutine.wrap",
      "contents": "coroutine.wrap(${1:function coroutine})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.wrap(coroutine)"
    },
    {
      "trigger": "coroutine.yield",
      "contents": "coroutine.yield(${1:vararg returnValue})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "coroutine.yield(returnValue)"
    },
    {
      "trigger": "cvars.AddChangeCallback",
      "contents": "cvars.AddChangeCallback(${1:string name}, ${2:function callback}, ${3:string identifier = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.AddChangeCallback(name, callback, identifier)"
    },
    {
      "trigger": "cvars.Bool",
      "contents": "cvars.Bool(${1:string cvar}, ${2:boolean default = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.Bool(cvar, default)"
    },
    {
      "trigger": "cvars.GetConVarCallbacks",
      "contents": "cvars.GetConVarCallbacks(${1:string name}, ${2:boolean createIfNotFound = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.GetConVarCallbacks(name, createIfNotFound)"
    },
    {
      "trigger": "cvars.Number",
      "contents": "cvars.Number(${1:string cvar}, ${2:any default = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.Number(cvar, default)"
    },
    {
      "trigger": "cvars.OnConVarChanged",
      "contents": "cvars.OnConVarChanged(${1:string name}, ${2:string oldVal}, ${3:string newVal})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.OnConVarChanged(name, oldVal, newVal)"
    },
    {
      "trigger": "cvars.RemoveChangeCallback",
      "contents": "cvars.RemoveChangeCallback(${1:string name}, ${2:string indentifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.RemoveChangeCallback(name, indentifier)"
    },
    {
      "trigger": "cvars.String",
      "contents": "cvars.String(${1:string cvar}, ${2:any default = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "cvars.String(cvar, default)"
    },
    {
      "trigger": "debug.debug",
      "contents": "debug.debug()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.debug()"
    },
    {
      "trigger": "debug.getfenv",
      "contents": "debug.getfenv(${1:table object})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getfenv(object)"
    },
    {
      "trigger": "debug.gethook",
      "contents": "debug.gethook(${1:thread thread = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.gethook(thread)"
    },
    {
      "trigger": "debug.getinfo",
      "contents": "debug.getinfo(${1:function funcOrStackLevel}, ${2:string fields = flnSu})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getinfo(funcOrStackLevel, fields)"
    },
    {
      "trigger": "debug.getlocal",
      "contents": "debug.getlocal(${1:thread thread = Current thread}, ${2:number level}, ${3:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getlocal(thread, level, index)"
    },
    {
      "trigger": "debug.getmetatable",
      "contents": "debug.getmetatable(${1:any object})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getmetatable(object)"
    },
    {
      "trigger": "debug.getregistry",
      "contents": "debug.getregistry()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getregistry()"
    },
    {
      "trigger": "debug.getupvalue",
      "contents": "debug.getupvalue(${1:function func}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.getupvalue(func, index)"
    },
    {
      "trigger": "debug.setfenv",
      "contents": "debug.setfenv(${1:table object}, ${2:table env})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.setfenv(object, env)"
    },
    {
      "trigger": "debug.sethook",
      "contents": "debug.sethook(${1:thread thread}, ${2:function hook}, ${3:string mask}, ${4:number count})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.sethook(thread, hook, mask, count)"
    },
    {
      "trigger": "debug.setlocal",
      "contents": "debug.setlocal(${1:thread thread = Current Thread}, ${2:number level}, ${3:number index}, ${4:any value = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.setlocal(thread, level, index, value)"
    },
    {
      "trigger": "debug.setmetatable",
      "contents": "debug.setmetatable(${1:any object}, ${2:table metatable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.setmetatable(object, metatable)"
    },
    {
      "trigger": "debug.setupvalue",
      "contents": "debug.setupvalue(${1:function func}, ${2:number index}, ${3:any val = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.setupvalue(func, index, val)"
    },
    {
      "trigger": "debug.Trace",
      "contents": "debug.Trace()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.Trace()"
    },
    {
      "trigger": "debug.traceback",
      "contents": "debug.traceback(${1:thread thread = current thread}, ${2:string message = nil}, ${3:number level = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.traceback(thread, message, level)"
    },
    {
      "trigger": "debug.upvalueid",
      "contents": "debug.upvalueid(${1:function func}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.upvalueid(func, index)"
    },
    {
      "trigger": "debug.upvaluejoin",
      "contents": "debug.upvaluejoin(${1:function f1}, ${2:number n1}, ${3:function f2}, ${4:number n2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debug.upvaluejoin(f1, n1, f2, n2)"
    },
    {
      "trigger": "debugoverlay.Axis",
      "contents": "debugoverlay.Axis(${1:Vector origin}, ${2:Angle ang}, ${3:number size}, ${4:number lifetime = 1}, ${5:boolean ignoreZ = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Axis(origin, ang, size, lifetime, ignoreZ)"
    },
    {
      "trigger": "debugoverlay.Box",
      "contents": "debugoverlay.Box(${1:Vector origin}, ${2:Vector mins}, ${3:Vector maxs}, ${4:number lifetime = 1}, ${5:table color = Color( 255, 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Box(origin, mins, maxs, lifetime, color)"
    },
    {
      "trigger": "debugoverlay.BoxAngles",
      "contents": "debugoverlay.BoxAngles(${1:Vector pos}, ${2:Vector mins}, ${3:Vector maxs}, ${4:Angle ang}, ${5:number lifetime = 1}, ${6:table color = Color( 255, 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.BoxAngles(pos, mins, maxs, ang, lifetime, color)"
    },
    {
      "trigger": "debugoverlay.Cross",
      "contents": "debugoverlay.Cross(${1:Vector position}, ${2:number size}, ${3:number lifetime = 1}, ${4:table color = Color( 255, 255, 255 )}, ${5:boolean ignoreZ = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Cross(position, size, lifetime, color, ignoreZ)"
    },
    {
      "trigger": "debugoverlay.EntityTextAtPosition",
      "contents": "debugoverlay.EntityTextAtPosition(${1:Vector pos}, ${2:number line}, ${3:string text}, ${4:number lifetime = 1}, ${5:table color = Color( 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.EntityTextAtPosition(pos, line, text, lifetime, color)"
    },
    {
      "trigger": "debugoverlay.Grid",
      "contents": "debugoverlay.Grid(${1:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Grid(position)"
    },
    {
      "trigger": "debugoverlay.Line",
      "contents": "debugoverlay.Line(${1:Vector pos1}, ${2:Vector pos2}, ${3:number lifetime = 1}, ${4:table color = Color( 255, 255, 255 )}, ${5:boolean ignoreZ = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Line(pos1, pos2, lifetime, color, ignoreZ)"
    },
    {
      "trigger": "debugoverlay.ScreenText",
      "contents": "debugoverlay.ScreenText(${1:number x}, ${2:number y}, ${3:string text}, ${4:number lifetime = 1}, ${5:table color = Color( 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.ScreenText(x, y, text, lifetime, color)"
    },
    {
      "trigger": "debugoverlay.Sphere",
      "contents": "debugoverlay.Sphere(${1:Vector origin}, ${2:number size}, ${3:number lifetime = 1}, ${4:table color = Color( 255, 255, 255 )}, ${5:boolean ignoreZ = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Sphere(origin, size, lifetime, color, ignoreZ)"
    },
    {
      "trigger": "debugoverlay.SweptBox",
      "contents": "debugoverlay.SweptBox(${1:Vector vStart}, ${2:Vector vEnd}, ${3:Vector vMins}, ${4:Vector vMaxs}, ${5:Angle ang}, ${6:number lifetime = 1}, ${7:table color = Color( 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.SweptBox(vStart, vEnd, vMins, vMaxs, ang, lifetime, color)"
    },
    {
      "trigger": "debugoverlay.Text",
      "contents": "debugoverlay.Text(${1:Vector origin}, ${2:string text}, ${3:number lifetime = 1}, ${4:boolean viewCheck = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Text(origin, text, lifetime, viewCheck)"
    },
    {
      "trigger": "debugoverlay.Triangle",
      "contents": "debugoverlay.Triangle(${1:Vector pos1}, ${2:Vector pos2}, ${3:Vector pos3}, ${4:number lifetime = 1}, ${5:table color = Color( 255, 255, 255 )}, ${6:boolean ignoreZ = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "debugoverlay.Triangle(pos1, pos2, pos3, lifetime, color, ignoreZ)"
    },
    {
      "trigger": "derma.Color",
      "contents": "derma.Color(${1:string name}, ${2:Panel pnl}, ${3:table default})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.Color(name, pnl, default)"
    },
    {
      "trigger": "derma.Controls",
      "contents": "derma.Controls()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.Controls()"
    },
    {
      "trigger": "derma.DefineControl",
      "contents": "derma.DefineControl(${1:string name}, ${2:string description}, ${3:table tab}, ${4:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.DefineControl(name, description, tab, base)"
    },
    {
      "trigger": "derma.DefineSkin",
      "contents": "derma.DefineSkin(${1:string name}, ${2:string descriptions}, ${3:table skin})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.DefineSkin(name, descriptions, skin)"
    },
    {
      "trigger": "derma.GetControlList",
      "contents": "derma.GetControlList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.GetControlList()"
    },
    {
      "trigger": "derma.GetDefaultSkin",
      "contents": "derma.GetDefaultSkin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.GetDefaultSkin()"
    },
    {
      "trigger": "derma.GetNamedSkin",
      "contents": "derma.GetNamedSkin(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.GetNamedSkin(name)"
    },
    {
      "trigger": "derma.GetSkinTable",
      "contents": "derma.GetSkinTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.GetSkinTable()"
    },
    {
      "trigger": "derma.RefreshSkins",
      "contents": "derma.RefreshSkins()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.RefreshSkins()"
    },
    {
      "trigger": "derma.SkinChangeIndex",
      "contents": "derma.SkinChangeIndex()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.SkinChangeIndex()"
    },
    {
      "trigger": "derma.SkinHook",
      "contents": "derma.SkinHook(${1:string type}, ${2:string name}, ${3:Panel panel}, ${4:number w}, ${5:number h})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.SkinHook(type, name, panel, w, h)"
    },
    {
      "trigger": "derma.SkinList",
      "contents": "derma.SkinList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.SkinList()"
    },
    {
      "trigger": "derma.SkinTexture",
      "contents": "derma.SkinTexture(${1:string name}, ${2:Panel pnl}, ${3:any fallback = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "derma.SkinTexture(name, pnl, fallback)"
    },
    {
      "trigger": "dragndrop.CallReceiverFunction",
      "contents": "dragndrop.CallReceiverFunction(${1:boolean bDoDrop}, ${2:number command}, ${3:number mx}, ${4:number my})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.CallReceiverFunction(bDoDrop, command, mx, my)"
    },
    {
      "trigger": "dragndrop.Clear",
      "contents": "dragndrop.Clear()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.Clear()"
    },
    {
      "trigger": "dragndrop.Drop",
      "contents": "dragndrop.Drop()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.Drop()"
    },
    {
      "trigger": "dragndrop.GetDroppable",
      "contents": "dragndrop.GetDroppable(${1:string name = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.GetDroppable(name)"
    },
    {
      "trigger": "dragndrop.HandleDroppedInGame",
      "contents": "dragndrop.HandleDroppedInGame()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.HandleDroppedInGame()"
    },
    {
      "trigger": "dragndrop.HoverThink",
      "contents": "dragndrop.HoverThink()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.HoverThink()"
    },
    {
      "trigger": "dragndrop.IsDragging",
      "contents": "dragndrop.IsDragging()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.IsDragging()"
    },
    {
      "trigger": "dragndrop.StartDragging",
      "contents": "dragndrop.StartDragging()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.StartDragging()"
    },
    {
      "trigger": "dragndrop.StopDragging",
      "contents": "dragndrop.StopDragging()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.StopDragging()"
    },
    {
      "trigger": "dragndrop.Think",
      "contents": "dragndrop.Think()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.Think()"
    },
    {
      "trigger": "dragndrop.UpdateReceiver",
      "contents": "dragndrop.UpdateReceiver()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "dragndrop.UpdateReceiver()"
    },
    {
      "trigger": "draw.DrawText",
      "contents": "draw.DrawText(${1:string text}, ${2:string font = DermaDefault}, ${3:number x = 0}, ${4:number y = 0}, ${5:table color = Color( 255, 255, 255, 255 )}, ${6:number xAlign = TEXT_ALIGN_LEFT})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.DrawText(text, font, x, y, color, xAlign)"
    },
    {
      "trigger": "draw.GetFontHeight",
      "contents": "draw.GetFontHeight(${1:string font})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.GetFontHeight(font)"
    },
    {
      "trigger": "draw.NoTexture",
      "contents": "draw.NoTexture()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.NoTexture()"
    },
    {
      "trigger": "draw.RoundedBox",
      "contents": "draw.RoundedBox(${1:number cornerRadius}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}, ${6:table color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.RoundedBox(cornerRadius, x, y, width, height, color)"
    },
    {
      "trigger": "draw.RoundedBoxEx",
      "contents": "draw.RoundedBoxEx(${1:number cornerRadius}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height}, ${6:table color}, ${7:boolean roundTopLeft = false}, ${8:boolean roundTopRight = false}, ${9:boolean roundBottomLeft = false}, ${10:boolean roundBottomRight = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.RoundedBoxEx(cornerRadius, x, y, width, height, color, roundTopLeft, roundTopRight, roundBottomLeft, roundBottomRight)"
    },
    {
      "trigger": "draw.SimpleText",
      "contents": "draw.SimpleText(${1:string text}, ${2:string font = DermaDefault}, ${3:number x = 0}, ${4:number y = 0}, ${5:table color = Color( 255, 255, 255, 255 )}, ${6:number xAlign = TEXT_ALIGN_LEFT}, ${7:number yAlign = TEXT_ALIGN_TOP})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.SimpleText(text, font, x, y, color, xAlign, yAlign)"
    },
    {
      "trigger": "draw.SimpleTextOutlined",
      "contents": "draw.SimpleTextOutlined(${1:string Text}, ${2:string font = DermaDefault}, ${3:number x = 0}, ${4:number y = 0}, ${5:table color = Color( 255, 255, 255, 255 )}, ${6:number xAlign = TEXT_ALIGN_LEFT}, ${7:number yAlign = TEXT_ALIGN_TOP}, ${8:number outlinewidth}, ${9:table outlinecolor = Color( 255, 255, 255, 255 )})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.SimpleTextOutlined(Text, font, x, y, color, xAlign, yAlign, outlinewidth, outlinecolor)"
    },
    {
      "trigger": "draw.Text",
      "contents": "draw.Text(${1:table textdata})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.Text(textdata)"
    },
    {
      "trigger": "draw.TextShadow",
      "contents": "draw.TextShadow(${1:table textdata}, ${2:number distance}, ${3:number alpha = 200})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.TextShadow(textdata, distance, alpha)"
    },
    {
      "trigger": "draw.TexturedQuad",
      "contents": "draw.TexturedQuad(${1:table texturedata})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.TexturedQuad(texturedata)"
    },
    {
      "trigger": "draw.WordBox",
      "contents": "draw.WordBox(${1:number bordersize}, ${2:number x}, ${3:number y}, ${4:string text}, ${5:string font}, ${6:table boxcolor}, ${7:table textcolor}, ${8:number xalign = TEXT_ALIGN_LEFT}, ${9:number yalign = TEXT_ALIGN_TOP})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "draw.WordBox(bordersize, x, y, text, font, boxcolor, textcolor, xalign, yalign)"
    },
    {
      "trigger": "drive.CalcView",
      "contents": "drive.CalcView(${1:Player ply}, ${2:table view})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.CalcView(ply, view)"
    },
    {
      "trigger": "drive.CreateMove",
      "contents": "drive.CreateMove(${1:CUserCmd cmd})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.CreateMove(cmd)"
    },
    {
      "trigger": "drive.DestroyMethod",
      "contents": "drive.DestroyMethod(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.DestroyMethod(ply)"
    },
    {
      "trigger": "drive.End",
      "contents": "drive.End(${1:Player ply}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.End(ply, ent)"
    },
    {
      "trigger": "drive.FinishMove",
      "contents": "drive.FinishMove(${1:Player ply}, ${2:CMoveData mv})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.FinishMove(ply, mv)"
    },
    {
      "trigger": "drive.GetMethod",
      "contents": "drive.GetMethod(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.GetMethod(ply)"
    },
    {
      "trigger": "drive.Move",
      "contents": "drive.Move(${1:Player ply}, ${2:CMoveData mv})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.Move(ply, mv)"
    },
    {
      "trigger": "drive.PlayerStartDriving",
      "contents": "drive.PlayerStartDriving(${1:Player ply}, ${2:Entity ent}, ${3:string mode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.PlayerStartDriving(ply, ent, mode)"
    },
    {
      "trigger": "drive.PlayerStopDriving",
      "contents": "drive.PlayerStopDriving(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.PlayerStopDriving(ply)"
    },
    {
      "trigger": "drive.Register",
      "contents": "drive.Register(${1:string name}, ${2:table data}, ${3:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.Register(name, data, base)"
    },
    {
      "trigger": "drive.Start",
      "contents": "drive.Start(${1:Player ply}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.Start(ply, ent)"
    },
    {
      "trigger": "drive.StartMove",
      "contents": "drive.StartMove(${1:Player ply}, ${2:CMoveData mv}, ${3:CUserCmd cmd})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "drive.StartMove(ply, mv, cmd)"
    },
    {
      "trigger": "duplicator.Allow",
      "contents": "duplicator.Allow(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.Allow(classname)"
    },
    {
      "trigger": "duplicator.ApplyBoneModifiers",
      "contents": "duplicator.ApplyBoneModifiers(${1:Player ply}, ${2:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.ApplyBoneModifiers(ply, ent)"
    },
    {
      "trigger": "duplicator.ApplyEntityModifiers",
      "contents": "duplicator.ApplyEntityModifiers(${1:Player ply}, ${2:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.ApplyEntityModifiers(ply, ent)"
    },
    {
      "trigger": "duplicator.BoneModifiers",
      "contents": "duplicator.BoneModifiers()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.BoneModifiers()"
    },
    {
      "trigger": "duplicator.ClearEntityModifier",
      "contents": "duplicator.ClearEntityModifier(${1:Entity ent}, ${2:any key})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.ClearEntityModifier(ent, key)"
    },
    {
      "trigger": "duplicator.ConstraintType",
      "contents": "duplicator.ConstraintType()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.ConstraintType()"
    },
    {
      "trigger": "duplicator.Copy",
      "contents": "duplicator.Copy(${1:Entity ent}, ${2:table tableToAdd = {}})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.Copy(ent, tableToAdd)"
    },
    {
      "trigger": "duplicator.CopyEnts",
      "contents": "duplicator.CopyEnts(${1:table ents})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.CopyEnts(ents)"
    },
    {
      "trigger": "duplicator.CopyEntTable",
      "contents": "duplicator.CopyEntTable(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.CopyEntTable(ent)"
    },
    {
      "trigger": "duplicator.CreateConstraintFromTable",
      "contents": "duplicator.CreateConstraintFromTable(${1:table constraint}, ${2:table entityList})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.CreateConstraintFromTable(constraint, entityList)"
    },
    {
      "trigger": "duplicator.CreateEntityFromTable",
      "contents": "duplicator.CreateEntityFromTable(${1:Player ply}, ${2:table entTable})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.CreateEntityFromTable(ply, entTable)"
    },
    {
      "trigger": "duplicator.Disallow",
      "contents": "duplicator.Disallow(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.Disallow(classname)"
    },
    {
      "trigger": "duplicator.DoBoneManipulator",
      "contents": "duplicator.DoBoneManipulator(${1:Entity ent}, ${2:table bones})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.DoBoneManipulator(ent, bones)"
    },
    {
      "trigger": "duplicator.DoFlex",
      "contents": "duplicator.DoFlex(${1:Entity ent}, ${2:table flex}, ${3:number scale = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.DoFlex(ent, flex, scale)"
    },
    {
      "trigger": "duplicator.DoGeneric",
      "contents": "duplicator.DoGeneric(${1:Entity ent}, ${2:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.DoGeneric(ent, data)"
    },
    {
      "trigger": "duplicator.DoGenericPhysics",
      "contents": "duplicator.DoGenericPhysics(${1:Entity ent}, ${2:Player ply = nil}, ${3:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.DoGenericPhysics(ent, ply, data)"
    },
    {
      "trigger": "duplicator.EntityClasses",
      "contents": "duplicator.EntityClasses()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.EntityClasses()"
    },
    {
      "trigger": "duplicator.EntityModifiers",
      "contents": "duplicator.EntityModifiers()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.EntityModifiers()"
    },
    {
      "trigger": "duplicator.FigureOutRequiredAddons",
      "contents": "duplicator.FigureOutRequiredAddons(${1:table dupe})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.FigureOutRequiredAddons(dupe)"
    },
    {
      "trigger": "duplicator.FindEntityClass",
      "contents": "duplicator.FindEntityClass(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.FindEntityClass(name)"
    },
    {
      "trigger": "duplicator.GenericDuplicatorFunction",
      "contents": "duplicator.GenericDuplicatorFunction(${1:Player ply}, ${2:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.GenericDuplicatorFunction(ply, data)"
    },
    {
      "trigger": "duplicator.GetAllConstrainedEntitiesAndConstraints",
      "contents": "duplicator.GetAllConstrainedEntitiesAndConstraints(${1:Entity ent}, ${2:table entStorageTable}, ${3:table constraintStorageTable})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.GetAllConstrainedEntitiesAndConstraints(ent, entStorageTable, constraintStorageTable)"
    },
    {
      "trigger": "duplicator.IsAllowed",
      "contents": "duplicator.IsAllowed(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.IsAllowed(classname)"
    },
    {
      "trigger": "duplicator.Paste",
      "contents": "duplicator.Paste(${1:Player Player}, ${2:table EntityList}, ${3:table ConstraintList})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.Paste(Player, EntityList, ConstraintList)"
    },
    {
      "trigger": "duplicator.RegisterBoneModifier",
      "contents": "duplicator.RegisterBoneModifier(${1:any key}, ${2:function boneModifier})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.RegisterBoneModifier(key, boneModifier)"
    },
    {
      "trigger": "duplicator.RegisterConstraint",
      "contents": "duplicator.RegisterConstraint(${1:string name}, ${2:function callback}, ${3:any ...})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.RegisterConstraint(name, callback, ...)"
    },
    {
      "trigger": "duplicator.RegisterEntityClass",
      "contents": "duplicator.RegisterEntityClass(${1:string name}, ${2:function function}, ${3:vararg args})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.RegisterEntityClass(name, function, args)"
    },
    {
      "trigger": "duplicator.RegisterEntityModifier",
      "contents": "duplicator.RegisterEntityModifier(${1:string name}, ${2:function func})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.RegisterEntityModifier(name, func)"
    },
    {
      "trigger": "duplicator.RemoveMapCreatedEntities",
      "contents": "duplicator.RemoveMapCreatedEntities()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.RemoveMapCreatedEntities()"
    },
    {
      "trigger": "duplicator.SetLocalAng",
      "contents": "duplicator.SetLocalAng(${1:Angle v})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.SetLocalAng(v)"
    },
    {
      "trigger": "duplicator.SetLocalPos",
      "contents": "duplicator.SetLocalPos(${1:Vector v})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.SetLocalPos(v)"
    },
    {
      "trigger": "duplicator.StoreBoneModifier",
      "contents": "duplicator.StoreBoneModifier(${1:Entity ent}, ${2:number boneID}, ${3:any key}, ${4:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.StoreBoneModifier(ent, boneID, key, data)"
    },
    {
      "trigger": "duplicator.StoreEntityModifier",
      "contents": "duplicator.StoreEntityModifier(${1:Entity entity}, ${2:string name}, ${3:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.StoreEntityModifier(entity, name, data)"
    },
    {
      "trigger": "duplicator.WorkoutSize",
      "contents": "duplicator.WorkoutSize(${1:table Ents})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "duplicator.WorkoutSize(Ents)"
    },
    {
      "trigger": "effects.BeamRingPoint",
      "contents": "effects.BeamRingPoint(${1:Vector pos}, ${2:number lifetime}, ${3:number startRad}, ${4:number endRad}, ${5:number width}, ${6:number amplitude}, ${7:table color}, ${8:table extra})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.BeamRingPoint(pos, lifetime, startRad, endRad, width, amplitude, color, extra)"
    },
    {
      "trigger": "effects.Bubbles",
      "contents": "effects.Bubbles(${1:Vector mins}, ${2:Vector maxs}, ${3:number count}, ${4:number height}, ${5:number speed = 0}, ${6:number delay = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.Bubbles(mins, maxs, count, height, speed, delay)"
    },
    {
      "trigger": "effects.BubbleTrail",
      "contents": "effects.BubbleTrail(${1:Vector startPos}, ${2:Vector endPos}, ${3:number count}, ${4:number height}, ${5:number speed = 0}, ${6:number delay = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.BubbleTrail(startPos, endPos, count, height, speed, delay)"
    },
    {
      "trigger": "effects.Create",
      "contents": "effects.Create(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.Create(name)"
    },
    {
      "trigger": "effects.GetList",
      "contents": "effects.GetList()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.GetList()"
    },
    {
      "trigger": "effects.Register",
      "contents": "effects.Register(${1:table effect_table}, ${2:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "effects.Register(effect_table, name)"
    },
    {
      "trigger": "engine.AbsoluteFrameTime",
      "contents": "engine.AbsoluteFrameTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.AbsoluteFrameTime()"
    },
    {
      "trigger": "engine.ActiveGamemode",
      "contents": "engine.ActiveGamemode()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.ActiveGamemode()"
    },
    {
      "trigger": "engine.CloseServer",
      "contents": "engine.CloseServer()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.CloseServer()"
    },
    {
      "trigger": "engine.GetAddons",
      "contents": "engine.GetAddons()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetAddons()"
    },
    {
      "trigger": "engine.GetDemoPlaybackStartTick",
      "contents": "engine.GetDemoPlaybackStartTick()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetDemoPlaybackStartTick()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTick",
      "contents": "engine.GetDemoPlaybackTick()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetDemoPlaybackTick()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTimeScale",
      "contents": "engine.GetDemoPlaybackTimeScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetDemoPlaybackTimeScale()"
    },
    {
      "trigger": "engine.GetDemoPlaybackTotalTicks",
      "contents": "engine.GetDemoPlaybackTotalTicks()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetDemoPlaybackTotalTicks()"
    },
    {
      "trigger": "engine.GetGamemodes",
      "contents": "engine.GetGamemodes()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetGamemodes()"
    },
    {
      "trigger": "engine.GetGames",
      "contents": "engine.GetGames()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetGames()"
    },
    {
      "trigger": "engine.GetUserContent",
      "contents": "engine.GetUserContent()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.GetUserContent()"
    },
    {
      "trigger": "engine.IsPlayingDemo",
      "contents": "engine.IsPlayingDemo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.IsPlayingDemo()"
    },
    {
      "trigger": "engine.IsRecordingDemo",
      "contents": "engine.IsRecordingDemo()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.IsRecordingDemo()"
    },
    {
      "trigger": "engine.LightStyle",
      "contents": "engine.LightStyle(${1:number lightstyle}, ${2:string pattern})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.LightStyle(lightstyle, pattern)"
    },
    {
      "trigger": "engine.OpenDupe",
      "contents": "engine.OpenDupe(${1:string dupeName})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.OpenDupe(dupeName)"
    },
    {
      "trigger": "engine.ServerFrameTime",
      "contents": "engine.ServerFrameTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.ServerFrameTime()"
    },
    {
      "trigger": "engine.SetMounted",
      "contents": "engine.SetMounted(${1:string depotID}, ${2:boolean doMount})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.SetMounted(depotID, doMount)"
    },
    {
      "trigger": "engine.TickCount",
      "contents": "engine.TickCount()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.TickCount()"
    },
    {
      "trigger": "engine.TickInterval",
      "contents": "engine.TickInterval()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.TickInterval()"
    },
    {
      "trigger": "engine.VideoSettings",
      "contents": "engine.VideoSettings()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.VideoSettings()"
    },
    {
      "trigger": "engine.WriteDupe",
      "contents": "engine.WriteDupe(${1:string dupe}, ${2:string jpeg})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.WriteDupe(dupe, jpeg)"
    },
    {
      "trigger": "engine.WriteSave",
      "contents": "engine.WriteSave(${1:string saveData}, ${2:string name}, ${3:number time}, ${4:string map})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "engine.WriteSave(saveData, name, time, map)"
    },
    {
      "trigger": "ents.Create",
      "contents": "ents.Create(${1:string class})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.Create(class)"
    },
    {
      "trigger": "ents.CreateClientProp",
      "contents": "ents.CreateClientProp(${1:string model = models/error.mdl})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.CreateClientProp(model)"
    },
    {
      "trigger": "ents.CreateClientside",
      "contents": "ents.CreateClientside(${1:string class})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.CreateClientside(class)"
    },
    {
      "trigger": "ents.FindAlongRay",
      "contents": "ents.FindAlongRay(${1:Vector start}, ${2:Vector end}, ${3:Vector mins = nil}, ${4:Vector maxs = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindAlongRay(start, end, mins, maxs)"
    },
    {
      "trigger": "ents.FindByClass",
      "contents": "ents.FindByClass(${1:string class})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindByClass(class)"
    },
    {
      "trigger": "ents.FindByClassAndParent",
      "contents": "ents.FindByClassAndParent(${1:string class}, ${2:Entity parent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindByClassAndParent(class, parent)"
    },
    {
      "trigger": "ents.FindByModel",
      "contents": "ents.FindByModel(${1:string model})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindByModel(model)"
    },
    {
      "trigger": "ents.FindByName",
      "contents": "ents.FindByName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindByName(name)"
    },
    {
      "trigger": "ents.FindInBox",
      "contents": "ents.FindInBox(${1:Vector boxMins}, ${2:Vector boxMaxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindInBox(boxMins, boxMaxs)"
    },
    {
      "trigger": "ents.FindInCone",
      "contents": "ents.FindInCone(${1:Vector origin}, ${2:Vector normal}, ${3:number range}, ${4:number angle_cos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindInCone(origin, normal, range, angle_cos)"
    },
    {
      "trigger": "ents.FindInPVS",
      "contents": "ents.FindInPVS(${1:any viewPoint})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindInPVS(viewPoint)"
    },
    {
      "trigger": "ents.FindInSphere",
      "contents": "ents.FindInSphere(${1:Vector origin}, ${2:number radius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FindInSphere(origin, radius)"
    },
    {
      "trigger": "ents.FireTargets",
      "contents": "ents.FireTargets(${1:string target}, ${2:Entity activator}, ${3:Entity caller}, ${4:number usetype}, ${5:number value})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.FireTargets(target, activator, caller, usetype, value)"
    },
    {
      "trigger": "ents.GetAll",
      "contents": "ents.GetAll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.GetAll()"
    },
    {
      "trigger": "ents.GetByIndex",
      "contents": "ents.GetByIndex(${1:number entIdx})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.GetByIndex(entIdx)"
    },
    {
      "trigger": "ents.GetCount",
      "contents": "ents.GetCount(${1:boolean IncludeKillMe = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.GetCount(IncludeKillMe)"
    },
    {
      "trigger": "ents.GetEdictCount",
      "contents": "ents.GetEdictCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.GetEdictCount()"
    },
    {
      "trigger": "ents.GetMapCreatedEntity",
      "contents": "ents.GetMapCreatedEntity(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.GetMapCreatedEntity(id)"
    },
    {
      "trigger": "ents.Iterator",
      "contents": "ents.Iterator()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "ents.Iterator()"
    },
    {
      "trigger": "file.Append",
      "contents": "file.Append(${1:string name}, ${2:string content})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Append(name, content)"
    },
    {
      "trigger": "file.AsyncRead",
      "contents": "file.AsyncRead(${1:string fileName}, ${2:string gamePath}, ${3:function callback}, ${4:boolean sync = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.AsyncRead(fileName, gamePath, callback, sync)"
    },
    {
      "trigger": "file.CreateDir",
      "contents": "file.CreateDir(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.CreateDir(name)"
    },
    {
      "trigger": "file.Delete",
      "contents": "file.Delete(${1:string name}, ${2:string path})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Delete(name, path)"
    },
    {
      "trigger": "file.Exists",
      "contents": "file.Exists(${1:string name}, ${2:string gamePath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Exists(name, gamePath)"
    },
    {
      "trigger": "file.Find",
      "contents": "file.Find(${1:string name}, ${2:string path}, ${3:string sorting = nameasc})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Find(name, path, sorting)"
    },
    {
      "trigger": "file.IsDir",
      "contents": "file.IsDir(${1:string fileName}, ${2:string gamePath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.IsDir(fileName, gamePath)"
    },
    {
      "trigger": "file.Open",
      "contents": "file.Open(${1:string fileName}, ${2:string fileMode}, ${3:string gamePath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Open(fileName, fileMode, gamePath)"
    },
    {
      "trigger": "file.Read",
      "contents": "file.Read(${1:string fileName}, ${2:string gamePath = GAME or DATA})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Read(fileName, gamePath)"
    },
    {
      "trigger": "file.Rename",
      "contents": "file.Rename(${1:string orignalFileName}, ${2:string targetFileName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Rename(orignalFileName, targetFileName)"
    },
    {
      "trigger": "file.Size",
      "contents": "file.Size(${1:string fileName}, ${2:string gamePath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Size(fileName, gamePath)"
    },
    {
      "trigger": "file.Time",
      "contents": "file.Time(${1:string path}, ${2:string gamePath})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Time(path, gamePath)"
    },
    {
      "trigger": "file.Write",
      "contents": "file.Write(${1:string fileName}, ${2:string content})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "file.Write(fileName, content)"
    },
    {
      "trigger": "frame_blend.AddFrame",
      "contents": "frame_blend.AddFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.AddFrame()"
    },
    {
      "trigger": "frame_blend.BlendFrame",
      "contents": "frame_blend.BlendFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.BlendFrame()"
    },
    {
      "trigger": "frame_blend.CompleteFrame",
      "contents": "frame_blend.CompleteFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.CompleteFrame()"
    },
    {
      "trigger": "frame_blend.DrawPreview",
      "contents": "frame_blend.DrawPreview()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.DrawPreview()"
    },
    {
      "trigger": "frame_blend.IsActive",
      "contents": "frame_blend.IsActive()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.IsActive()"
    },
    {
      "trigger": "frame_blend.IsLastFrame",
      "contents": "frame_blend.IsLastFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.IsLastFrame()"
    },
    {
      "trigger": "frame_blend.RenderableFrames",
      "contents": "frame_blend.RenderableFrames()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.RenderableFrames()"
    },
    {
      "trigger": "frame_blend.ShouldSkipFrame",
      "contents": "frame_blend.ShouldSkipFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "frame_blend.ShouldSkipFrame()"
    },
    {
      "trigger": "game.AddAmmoType",
      "contents": "game.AddAmmoType(${1:table ammoData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.AddAmmoType(ammoData)"
    },
    {
      "trigger": "game.AddDecal",
      "contents": "game.AddDecal(${1:string decalName}, ${2:string materialName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.AddDecal(decalName, materialName)"
    },
    {
      "trigger": "game.AddParticles",
      "contents": "game.AddParticles(${1:string particleFileName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.AddParticles(particleFileName)"
    },
    {
      "trigger": "game.BuildAmmoTypes",
      "contents": "game.BuildAmmoTypes()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.BuildAmmoTypes()"
    },
    {
      "trigger": "game.CleanUpMap",
      "contents": "game.CleanUpMap(${1:boolean dontSendToClients = false}, ${2:table extraFilters = {}})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.CleanUpMap(dontSendToClients, extraFilters)"
    },
    {
      "trigger": "game.ConsoleCommand",
      "contents": "game.ConsoleCommand(${1:string stringCommand})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.ConsoleCommand(stringCommand)"
    },
    {
      "trigger": "game.GetAmmoDamageType",
      "contents": "game.GetAmmoDamageType(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoDamageType(id)"
    },
    {
      "trigger": "game.GetAmmoData",
      "contents": "game.GetAmmoData(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoData(id)"
    },
    {
      "trigger": "game.GetAmmoForce",
      "contents": "game.GetAmmoForce(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoForce(id)"
    },
    {
      "trigger": "game.GetAmmoID",
      "contents": "game.GetAmmoID(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoID(name)"
    },
    {
      "trigger": "game.GetAmmoMax",
      "contents": "game.GetAmmoMax(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoMax(id)"
    },
    {
      "trigger": "game.GetAmmoName",
      "contents": "game.GetAmmoName(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoName(id)"
    },
    {
      "trigger": "game.GetAmmoNPCDamage",
      "contents": "game.GetAmmoNPCDamage(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoNPCDamage(id)"
    },
    {
      "trigger": "game.GetAmmoPlayerDamage",
      "contents": "game.GetAmmoPlayerDamage(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoPlayerDamage(id)"
    },
    {
      "trigger": "game.GetAmmoTypes",
      "contents": "game.GetAmmoTypes()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetAmmoTypes()"
    },
    {
      "trigger": "game.GetGlobalCounter",
      "contents": "game.GetGlobalCounter(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetGlobalCounter(name)"
    },
    {
      "trigger": "game.GetGlobalState",
      "contents": "game.GetGlobalState(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetGlobalState(name)"
    },
    {
      "trigger": "game.GetIPAddress",
      "contents": "game.GetIPAddress()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetIPAddress()"
    },
    {
      "trigger": "game.GetMap",
      "contents": "game.GetMap()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetMap()"
    },
    {
      "trigger": "game.GetMapNext",
      "contents": "game.GetMapNext()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetMapNext()"
    },
    {
      "trigger": "game.GetMapVersion",
      "contents": "game.GetMapVersion()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetMapVersion()"
    },
    {
      "trigger": "game.GetSkillLevel",
      "contents": "game.GetSkillLevel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetSkillLevel()"
    },
    {
      "trigger": "game.GetTimeScale",
      "contents": "game.GetTimeScale()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetTimeScale()"
    },
    {
      "trigger": "game.GetWorld",
      "contents": "game.GetWorld()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.GetWorld()"
    },
    {
      "trigger": "game.IsDedicated",
      "contents": "game.IsDedicated()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.IsDedicated()"
    },
    {
      "trigger": "game.KickID",
      "contents": "game.KickID(${1:string id}, ${2:string reason = No reason given})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.KickID(id, reason)"
    },
    {
      "trigger": "game.LoadNextMap",
      "contents": "game.LoadNextMap()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.LoadNextMap()"
    },
    {
      "trigger": "game.MapLoadType",
      "contents": "game.MapLoadType()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.MapLoadType()"
    },
    {
      "trigger": "game.MaxPlayers",
      "contents": "game.MaxPlayers()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.MaxPlayers()"
    },
    {
      "trigger": "game.MountGMA",
      "contents": "game.MountGMA(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.MountGMA(path)"
    },
    {
      "trigger": "game.RemoveRagdolls",
      "contents": "game.RemoveRagdolls()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.RemoveRagdolls()"
    },
    {
      "trigger": "game.SetGlobalCounter",
      "contents": "game.SetGlobalCounter(${1:string name}, ${2:number count})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.SetGlobalCounter(name, count)"
    },
    {
      "trigger": "game.SetGlobalState",
      "contents": "game.SetGlobalState(${1:string name}, ${2:number state})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.SetGlobalState(name, state)"
    },
    {
      "trigger": "game.SetSkillLevel",
      "contents": "game.SetSkillLevel(${1:number level})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.SetSkillLevel(level)"
    },
    {
      "trigger": "game.SetTimeScale",
      "contents": "game.SetTimeScale(${1:number timeScale})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.SetTimeScale(timeScale)"
    },
    {
      "trigger": "game.SinglePlayer",
      "contents": "game.SinglePlayer()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.SinglePlayer()"
    },
    {
      "trigger": "game.StartSpot",
      "contents": "game.StartSpot()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "game.StartSpot()"
    },
    {
      "trigger": "gameevent.Listen",
      "contents": "gameevent.Listen(${1:string eventName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gameevent.Listen(eventName)"
    },
    {
      "trigger": "gamemode.Call",
      "contents": "gamemode.Call(${1:string name}, ${2:vararg args})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gamemode.Call(name, args)"
    },
    {
      "trigger": "gamemode.Get",
      "contents": "gamemode.Get(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gamemode.Get(name)"
    },
    {
      "trigger": "gamemode.Register",
      "contents": "gamemode.Register(${1:table gm}, ${2:string name}, ${3:string derived})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gamemode.Register(gm, name, derived)"
    },
    {
      "trigger": "gmod.GetGamemode",
      "contents": "gmod.GetGamemode()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmod.GetGamemode()"
    },
    {
      "trigger": "gmsave.LoadMap",
      "contents": "gmsave.LoadMap(${1:string mapData}, ${2:Player ply = NULL}, ${3:function callback = nil})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmsave.LoadMap(mapData, ply, callback)"
    },
    {
      "trigger": "gmsave.PlayerLoad",
      "contents": "gmsave.PlayerLoad(${1:Player ply}, ${2:table data})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmsave.PlayerLoad(ply, data)"
    },
    {
      "trigger": "gmsave.PlayerSave",
      "contents": "gmsave.PlayerSave(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmsave.PlayerSave(ply)"
    },
    {
      "trigger": "gmsave.SaveMap",
      "contents": "gmsave.SaveMap(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmsave.SaveMap(ply)"
    },
    {
      "trigger": "gmsave.ShouldSaveEntity",
      "contents": "gmsave.ShouldSaveEntity(${1:Entity ent}, ${2:table t})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gmsave.ShouldSaveEntity(ent, t)"
    },
    {
      "trigger": "gui.ActivateGameUI",
      "contents": "gui.ActivateGameUI()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.ActivateGameUI()"
    },
    {
      "trigger": "gui.AddCaption",
      "contents": "gui.AddCaption(${1:string text}, ${2:number duration}, ${3:boolean fromPlayer = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.AddCaption(text, duration, fromPlayer)"
    },
    {
      "trigger": "gui.EnableScreenClicker",
      "contents": "gui.EnableScreenClicker(${1:boolean enabled})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.EnableScreenClicker(enabled)"
    },
    {
      "trigger": "gui.HideGameUI",
      "contents": "gui.HideGameUI()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.HideGameUI()"
    },
    {
      "trigger": "gui.InternalCursorMoved",
      "contents": "gui.InternalCursorMoved(${1:number deltaX}, ${2:number deltaY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalCursorMoved(deltaX, deltaY)"
    },
    {
      "trigger": "gui.InternalKeyCodePressed",
      "contents": "gui.InternalKeyCodePressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalKeyCodePressed(key)"
    },
    {
      "trigger": "gui.InternalKeyCodeReleased",
      "contents": "gui.InternalKeyCodeReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalKeyCodeReleased(key)"
    },
    {
      "trigger": "gui.InternalKeyCodeTyped",
      "contents": "gui.InternalKeyCodeTyped(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalKeyCodeTyped(key)"
    },
    {
      "trigger": "gui.InternalKeyTyped",
      "contents": "gui.InternalKeyTyped(${1:number code})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalKeyTyped(code)"
    },
    {
      "trigger": "gui.InternalMouseDoublePressed",
      "contents": "gui.InternalMouseDoublePressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalMouseDoublePressed(key)"
    },
    {
      "trigger": "gui.InternalMousePressed",
      "contents": "gui.InternalMousePressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalMousePressed(key)"
    },
    {
      "trigger": "gui.InternalMouseReleased",
      "contents": "gui.InternalMouseReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalMouseReleased(key)"
    },
    {
      "trigger": "gui.InternalMouseWheeled",
      "contents": "gui.InternalMouseWheeled(${1:number delta})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.InternalMouseWheeled(delta)"
    },
    {
      "trigger": "gui.IsConsoleVisible",
      "contents": "gui.IsConsoleVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.IsConsoleVisible()"
    },
    {
      "trigger": "gui.IsGameUIVisible",
      "contents": "gui.IsGameUIVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.IsGameUIVisible()"
    },
    {
      "trigger": "gui.MousePos",
      "contents": "gui.MousePos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.MousePos()"
    },
    {
      "trigger": "gui.MouseX",
      "contents": "gui.MouseX()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.MouseX()"
    },
    {
      "trigger": "gui.MouseY",
      "contents": "gui.MouseY()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.MouseY()"
    },
    {
      "trigger": "gui.OpenURL",
      "contents": "gui.OpenURL(${1:string url})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.OpenURL(url)"
    },
    {
      "trigger": "gui.ScreenToVector",
      "contents": "gui.ScreenToVector(${1:number x}, ${2:number y})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.ScreenToVector(x, y)"
    },
    {
      "trigger": "gui.SetMousePos",
      "contents": "gui.SetMousePos(${1:number mouseX}, ${2:number mouseY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.SetMousePos(mouseX, mouseY)"
    },
    {
      "trigger": "gui.ShowConsole",
      "contents": "gui.ShowConsole()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "gui.ShowConsole()"
    },
    {
      "trigger": "GWEN.CreateTextureBorder",
      "contents": "GWEN.CreateTextureBorder(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h}, ${5:number left}, ${6:number top}, ${7:number right}, ${8:number bottom}, ${9:IMaterial source = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "GWEN.CreateTextureBorder(x, y, w, h, left, top, right, bottom, source)"
    },
    {
      "trigger": "GWEN.CreateTextureCentered",
      "contents": "GWEN.CreateTextureCentered(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h}, ${5:IMaterial mat_override = null})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "GWEN.CreateTextureCentered(x, y, w, h, mat_override = null)"
    },
    {
      "trigger": "GWEN.CreateTextureNormal",
      "contents": "GWEN.CreateTextureNormal(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h}, ${5:IMaterial mat_override = null})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "GWEN.CreateTextureNormal(x, y, w, h, mat_override = null)"
    },
    {
      "trigger": "GWEN.TextureColor",
      "contents": "GWEN.TextureColor(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "GWEN.TextureColor(x, y)"
    },
    {
      "trigger": "halo.Add",
      "contents": "halo.Add(${1:table entities}, ${2:table color}, ${3:number blurX = 2}, ${4:number blurY = 2}, ${5:number passes = 1}, ${6:boolean additive = true}, ${7:boolean ignoreZ = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "halo.Add(entities, color, blurX, blurY, passes, additive, ignoreZ)"
    },
    {
      "trigger": "halo.Render",
      "contents": "halo.Render(${1:table entry})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "halo.Render(entry)"
    },
    {
      "trigger": "halo.RenderedEntity",
      "contents": "halo.RenderedEntity()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "halo.RenderedEntity()"
    },
    {
      "trigger": "hammer.SendCommand",
      "contents": "hammer.SendCommand(${1:string cmd})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hammer.SendCommand(cmd)"
    },
    {
      "trigger": "hook.Add",
      "contents": "hook.Add(${1:string eventName}, ${2:any identifier}, ${3:function func})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hook.Add(eventName, identifier, func)"
    },
    {
      "trigger": "hook.Call",
      "contents": "hook.Call(${1:string eventName}, ${2:table gamemodeTable}, ${3:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hook.Call(eventName, gamemodeTable, args)"
    },
    {
      "trigger": "hook.GetTable",
      "contents": "hook.GetTable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hook.GetTable()"
    },
    {
      "trigger": "hook.Remove",
      "contents": "hook.Remove(${1:string eventName}, ${2:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hook.Remove(eventName, identifier)"
    },
    {
      "trigger": "hook.Run",
      "contents": "hook.Run(${1:string eventName}, ${2:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "hook.Run(eventName, args)"
    },
    {
      "trigger": "http.Fetch",
      "contents": "http.Fetch(${1:string url}, ${2:function onSuccess = nil}, ${3:function onFailure = nil}, ${4:table headers = {}})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "http.Fetch(url, onSuccess, onFailure, headers)"
    },
    {
      "trigger": "http.Post",
      "contents": "http.Post(${1:string url}, ${2:table parameters}, ${3:function onSuccess = nil}, ${4:function onFailure = nil}, ${5:table headers = {}})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "http.Post(url, parameters, onSuccess, onFailure, headers)"
    },
    {
      "trigger": "input.CheckKeyTrapping",
      "contents": "input.CheckKeyTrapping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.CheckKeyTrapping()"
    },
    {
      "trigger": "input.GetAnalogValue",
      "contents": "input.GetAnalogValue(${1:number axis})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.GetAnalogValue(axis)"
    },
    {
      "trigger": "input.GetCursorPos",
      "contents": "input.GetCursorPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.GetCursorPos()"
    },
    {
      "trigger": "input.GetKeyCode",
      "contents": "input.GetKeyCode(${1:string button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.GetKeyCode(button)"
    },
    {
      "trigger": "input.GetKeyName",
      "contents": "input.GetKeyName(${1:number button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.GetKeyName(button)"
    },
    {
      "trigger": "input.IsButtonDown",
      "contents": "input.IsButtonDown(${1:number button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsButtonDown(button)"
    },
    {
      "trigger": "input.IsControlDown",
      "contents": "input.IsControlDown()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsControlDown()"
    },
    {
      "trigger": "input.IsKeyDown",
      "contents": "input.IsKeyDown(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsKeyDown(key)"
    },
    {
      "trigger": "input.IsKeyTrapping",
      "contents": "input.IsKeyTrapping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsKeyTrapping()"
    },
    {
      "trigger": "input.IsMouseDown",
      "contents": "input.IsMouseDown(${1:number mouseKey})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsMouseDown(mouseKey)"
    },
    {
      "trigger": "input.IsShiftDown",
      "contents": "input.IsShiftDown()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.IsShiftDown()"
    },
    {
      "trigger": "input.LookupBinding",
      "contents": "input.LookupBinding(${1:string binding}, ${2:boolean exact = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.LookupBinding(binding, exact)"
    },
    {
      "trigger": "input.LookupKeyBinding",
      "contents": "input.LookupKeyBinding(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.LookupKeyBinding(key)"
    },
    {
      "trigger": "input.SelectWeapon",
      "contents": "input.SelectWeapon(${1:Weapon weapon})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.SelectWeapon(weapon)"
    },
    {
      "trigger": "input.SetCursorPos",
      "contents": "input.SetCursorPos(${1:number mouseX}, ${2:number mouseY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.SetCursorPos(mouseX, mouseY)"
    },
    {
      "trigger": "input.StartKeyTrapping",
      "contents": "input.StartKeyTrapping()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.StartKeyTrapping()"
    },
    {
      "trigger": "input.TranslateAlias",
      "contents": "input.TranslateAlias(${1:string command})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.TranslateAlias(command)"
    },
    {
      "trigger": "input.WasKeyPressed",
      "contents": "input.WasKeyPressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasKeyPressed(key)"
    },
    {
      "trigger": "input.WasKeyReleased",
      "contents": "input.WasKeyReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasKeyReleased(key)"
    },
    {
      "trigger": "input.WasKeyTyped",
      "contents": "input.WasKeyTyped(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasKeyTyped(key)"
    },
    {
      "trigger": "input.WasMouseDoublePressed",
      "contents": "input.WasMouseDoublePressed(${1:number button})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasMouseDoublePressed(button)"
    },
    {
      "trigger": "input.WasMousePressed",
      "contents": "input.WasMousePressed(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasMousePressed(key)"
    },
    {
      "trigger": "input.WasMouseReleased",
      "contents": "input.WasMouseReleased(${1:number key})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "input.WasMouseReleased(key)"
    },
    {
      "trigger": "jit.arch",
      "contents": "jit.arch()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.arch()"
    },
    {
      "trigger": "jit.attach",
      "contents": "jit.attach(${1:function callback}, ${2:string event})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.attach(callback, event)"
    },
    {
      "trigger": "jit.flush",
      "contents": "jit.flush()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.flush()"
    },
    {
      "trigger": "jit.off",
      "contents": "jit.off()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.off()"
    },
    {
      "trigger": "jit.on",
      "contents": "jit.on()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.on()"
    },
    {
      "trigger": "jit.opt.start",
      "contents": "jit.opt.start(${1:vararg args})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.opt.start(args)"
    },
    {
      "trigger": "jit.os",
      "contents": "jit.os()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.os()"
    },
    {
      "trigger": "jit.status",
      "contents": "jit.status()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.status()"
    },
    {
      "trigger": "jit.util.funcbc",
      "contents": "jit.util.funcbc(${1:function func}, ${2:number pos})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.funcbc(func, pos)"
    },
    {
      "trigger": "jit.util.funcinfo",
      "contents": "jit.util.funcinfo(${1:function func}, ${2:number pos = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.funcinfo(func, pos)"
    },
    {
      "trigger": "jit.util.funck",
      "contents": "jit.util.funck(${1:function func}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.funck(func, index)"
    },
    {
      "trigger": "jit.util.funcuvname",
      "contents": "jit.util.funcuvname(${1:function func}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.funcuvname(func, index)"
    },
    {
      "trigger": "jit.util.ircalladdr",
      "contents": "jit.util.ircalladdr(${1:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.ircalladdr(index)"
    },
    {
      "trigger": "jit.util.traceexitstub",
      "contents": "jit.util.traceexitstub(${1:number exitno})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.traceexitstub(exitno)"
    },
    {
      "trigger": "jit.util.traceinfo",
      "contents": "jit.util.traceinfo(${1:number trace})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.traceinfo(trace)"
    },
    {
      "trigger": "jit.util.traceir",
      "contents": "jit.util.traceir(${1:number tr}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.traceir(tr, index)"
    },
    {
      "trigger": "jit.util.tracek",
      "contents": "jit.util.tracek(${1:number tr}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.tracek(tr, index)"
    },
    {
      "trigger": "jit.util.tracemc",
      "contents": "jit.util.tracemc(${1:number tr})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.tracemc(tr)"
    },
    {
      "trigger": "jit.util.tracesnap",
      "contents": "jit.util.tracesnap(${1:number tr}, ${2:number sn})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.util.tracesnap(tr, sn)"
    },
    {
      "trigger": "jit.version",
      "contents": "jit.version()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.version()"
    },
    {
      "trigger": "jit.version_num",
      "contents": "jit.version_num()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "jit.version_num()"
    },
    {
      "trigger": "killicon.Add",
      "contents": "killicon.Add(${1:string class}, ${2:string texture}, ${3:table color})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.Add(class, texture, color)"
    },
    {
      "trigger": "killicon.AddAlias",
      "contents": "killicon.AddAlias(${1:string new_class}, ${2:string existing_class})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.AddAlias(new_class, existing_class)"
    },
    {
      "trigger": "killicon.AddFont",
      "contents": "killicon.AddFont(${1:string class}, ${2:string font}, ${3:string symbol}, ${4:table color}, ${5:number heightScale  = 1})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.AddFont(class, font, symbol, color, heightScale )"
    },
    {
      "trigger": "killicon.AddTexCoord",
      "contents": "killicon.AddTexCoord(${1:string class}, ${2:string texture}, ${3:table color}, ${4:number x}, ${5:number y}, ${6:number w}, ${7:number h})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.AddTexCoord(class, texture, color, x, y, w, h)"
    },
    {
      "trigger": "killicon.Draw",
      "contents": "killicon.Draw(${1:number x}, ${2:number y}, ${3:string name}, ${4:number alpha})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.Draw(x, y, name, alpha)"
    },
    {
      "trigger": "killicon.Exists",
      "contents": "killicon.Exists(${1:string class})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.Exists(class)"
    },
    {
      "trigger": "killicon.GetSize",
      "contents": "killicon.GetSize(${1:string name}, ${2:boolean dontEqualizeHeight = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.GetSize(name, dontEqualizeHeight)"
    },
    {
      "trigger": "killicon.Render",
      "contents": "killicon.Render(${1:number x}, ${2:number y}, ${3:string name}, ${4:number alpha}, ${5:number dontEqualizeHeight})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "killicon.Render(x, y, name, alpha, dontEqualizeHeight)"
    },
    {
      "trigger": "language.Add",
      "contents": "language.Add(${1:string placeholder}, ${2:string fulltext})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "language.Add(placeholder, fulltext)"
    },
    {
      "trigger": "language.GetPhrase",
      "contents": "language.GetPhrase(${1:string phrase})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "language.GetPhrase(phrase)"
    },
    {
      "trigger": "list.Add",
      "contents": "list.Add(${1:string identifier}, ${2:any item})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.Add(identifier, item)"
    },
    {
      "trigger": "list.Contains",
      "contents": "list.Contains(${1:string list}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.Contains(list, value)"
    },
    {
      "trigger": "list.Get",
      "contents": "list.Get(${1:string identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.Get(identifier)"
    },
    {
      "trigger": "list.GetForEdit",
      "contents": "list.GetForEdit(${1:string identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.GetForEdit(identifier)"
    },
    {
      "trigger": "list.GetTable",
      "contents": "list.GetTable()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.GetTable()"
    },
    {
      "trigger": "list.HasEntry",
      "contents": "list.HasEntry(${1:string list}, ${2:any key})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.HasEntry(list, key)"
    },
    {
      "trigger": "list.Set",
      "contents": "list.Set(${1:string identifier}, ${2:any key}, ${3:any item})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "list.Set(identifier, key, item)"
    },
    {
      "trigger": "markup.Color",
      "contents": "markup.Color(${1:Color col})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "markup.Color(col)"
    },
    {
      "trigger": "markup.Escape",
      "contents": "markup.Escape(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "markup.Escape(text)"
    },
    {
      "trigger": "markup.Parse",
      "contents": "markup.Parse(${1:string markup}, ${2:number maxWidth = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "markup.Parse(markup, maxWidth)"
    },
    {
      "trigger": "math.abs",
      "contents": "math.abs(${1:number x})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.abs(x)"
    },
    {
      "trigger": "math.acos",
      "contents": "math.acos(${1:number cos})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.acos(cos)"
    },
    {
      "trigger": "math.AngleDifference",
      "contents": "math.AngleDifference(${1:number a}, ${2:number b})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.AngleDifference(a, b)"
    },
    {
      "trigger": "math.Approach",
      "contents": "math.Approach(${1:number current}, ${2:number target}, ${3:number change})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Approach(current, target, change)"
    },
    {
      "trigger": "math.ApproachAngle",
      "contents": "math.ApproachAngle(${1:number currentAngle}, ${2:number targetAngle}, ${3:number rate})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.ApproachAngle(currentAngle, targetAngle, rate)"
    },
    {
      "trigger": "math.asin",
      "contents": "math.asin(${1:number normal})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.asin(normal)"
    },
    {
      "trigger": "math.atan",
      "contents": "math.atan(${1:number normal})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.atan(normal)"
    },
    {
      "trigger": "math.atan2",
      "contents": "math.atan2(${1:number y}, ${2:number x})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.atan2(y, x)"
    },
    {
      "trigger": "math.BinToInt",
      "contents": "math.BinToInt(${1:string string})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.BinToInt(string)"
    },
    {
      "trigger": "math.BSplinePoint",
      "contents": "math.BSplinePoint(${1:number tDiff}, ${2:table tPoints}, ${3:number tMax})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.BSplinePoint(tDiff, tPoints, tMax)"
    },
    {
      "trigger": "math.calcBSplineN",
      "contents": "math.calcBSplineN(${1:number i}, ${2:number k}, ${3:number t}, ${4:number tinc})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.calcBSplineN(i, k, t, tinc)"
    },
    {
      "trigger": "math.ceil",
      "contents": "math.ceil(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.ceil(number)"
    },
    {
      "trigger": "math.CHSpline",
      "contents": "math.CHSpline(${1:number frac}, ${2:Vector point0}, ${3:Vector tan0}, ${4:Vector point1}, ${5:Vector tan1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.CHSpline(frac, point0, tan0, point1, tan1)"
    },
    {
      "trigger": "math.Clamp",
      "contents": "math.Clamp(${1:number input}, ${2:number min}, ${3:number max})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Clamp(input, min, max)"
    },
    {
      "trigger": "math.cos",
      "contents": "math.cos(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.cos(number)"
    },
    {
      "trigger": "math.cosh",
      "contents": "math.cosh(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.cosh(number)"
    },
    {
      "trigger": "math.CubicBezier",
      "contents": "math.CubicBezier(${1:number frac}, ${2:Vector p0}, ${3:Vector p1}, ${4:Vector p2}, ${5:Vector p3})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.CubicBezier(frac, p0, p1, p2, p3)"
    },
    {
      "trigger": "math.deg",
      "contents": "math.deg(${1:number radians})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.deg(radians)"
    },
    {
      "trigger": "math.Dist",
      "contents": "math.Dist(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Dist(x1, y1, x2, y2)"
    },
    {
      "trigger": "math.Distance",
      "contents": "math.Distance(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Distance(x1, y1, x2, y2)"
    },
    {
      "trigger": "math.DistanceSqr",
      "contents": "math.DistanceSqr(${1:number x1}, ${2:number y1}, ${3:number x2}, ${4:number y2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.DistanceSqr(x1, y1, x2, y2)"
    },
    {
      "trigger": "math.InBack",
      "contents": "math.InBack(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InBack(fraction)"
    },
    {
      "trigger": "math.InBounce",
      "contents": "math.InBounce(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InBounce(fraction)"
    },
    {
      "trigger": "math.InCirc",
      "contents": "math.InCirc(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InCirc(fraction)"
    },
    {
      "trigger": "math.InCubic",
      "contents": "math.InCubic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InCubic(fraction)"
    },
    {
      "trigger": "math.InElastic",
      "contents": "math.InElastic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InElastic(fraction)"
    },
    {
      "trigger": "math.InExpo",
      "contents": "math.InExpo(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InExpo(fraction)"
    },
    {
      "trigger": "math.InOutBack",
      "contents": "math.InOutBack(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutBack(fraction)"
    },
    {
      "trigger": "math.InOutBounce",
      "contents": "math.InOutBounce(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutBounce(fraction)"
    },
    {
      "trigger": "math.InOutCirc",
      "contents": "math.InOutCirc(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutCirc(fraction)"
    },
    {
      "trigger": "math.InOutCubic",
      "contents": "math.InOutCubic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutCubic(fraction)"
    },
    {
      "trigger": "math.InOutElastic",
      "contents": "math.InOutElastic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutElastic(fraction)"
    },
    {
      "trigger": "math.InOutExpo",
      "contents": "math.InOutExpo(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutExpo(fraction)"
    },
    {
      "trigger": "math.InOutQuad",
      "contents": "math.InOutQuad(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutQuad(fraction)"
    },
    {
      "trigger": "math.InOutQuart",
      "contents": "math.InOutQuart(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutQuart(fraction)"
    },
    {
      "trigger": "math.InOutQuint",
      "contents": "math.InOutQuint(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutQuint(fraction)"
    },
    {
      "trigger": "math.InOutSine",
      "contents": "math.InOutSine(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InOutSine(fraction)"
    },
    {
      "trigger": "math.InQuad",
      "contents": "math.InQuad(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InQuad(fraction)"
    },
    {
      "trigger": "math.InQuart",
      "contents": "math.InQuart(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InQuart(fraction)"
    },
    {
      "trigger": "math.InQuint",
      "contents": "math.InQuint(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InQuint(fraction)"
    },
    {
      "trigger": "math.InSine",
      "contents": "math.InSine(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.InSine(fraction)"
    },
    {
      "trigger": "math.OutBack",
      "contents": "math.OutBack(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutBack(fraction)"
    },
    {
      "trigger": "math.OutBounce",
      "contents": "math.OutBounce(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutBounce(fraction)"
    },
    {
      "trigger": "math.OutCirc",
      "contents": "math.OutCirc(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutCirc(fraction)"
    },
    {
      "trigger": "math.OutCubic",
      "contents": "math.OutCubic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutCubic(fraction)"
    },
    {
      "trigger": "math.OutElastic",
      "contents": "math.OutElastic(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutElastic(fraction)"
    },
    {
      "trigger": "math.OutExpo",
      "contents": "math.OutExpo(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutExpo(fraction)"
    },
    {
      "trigger": "math.OutQuad",
      "contents": "math.OutQuad(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutQuad(fraction)"
    },
    {
      "trigger": "math.OutQuart",
      "contents": "math.OutQuart(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutQuart(fraction)"
    },
    {
      "trigger": "math.OutQuint",
      "contents": "math.OutQuint(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutQuint(fraction)"
    },
    {
      "trigger": "math.OutSine",
      "contents": "math.OutSine(${1:number fraction})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.OutSine(fraction)"
    },
    {
      "trigger": "math.EaseInOut",
      "contents": "math.EaseInOut(${1:number progress}, ${2:number easeIn}, ${3:number easeOut})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.EaseInOut(progress, easeIn, easeOut)"
    },
    {
      "trigger": "math.exp",
      "contents": "math.exp(${1:number exponent})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.exp(exponent)"
    },
    {
      "trigger": "math.Factorial",
      "contents": "math.Factorial(${1:number val_in})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Factorial(val_in)"
    },
    {
      "trigger": "math.floor",
      "contents": "math.floor(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.floor(number)"
    },
    {
      "trigger": "math.fmod",
      "contents": "math.fmod(${1:number base}, ${2:number modulator})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.fmod(base, modulator)"
    },
    {
      "trigger": "math.frexp",
      "contents": "math.frexp(${1:number x})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.frexp(x)"
    },
    {
      "trigger": "math.IntToBin",
      "contents": "math.IntToBin(${1:number int})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.IntToBin(int)"
    },
    {
      "trigger": "math.ldexp",
      "contents": "math.ldexp(${1:number normalizedFraction}, ${2:number exponent})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.ldexp(normalizedFraction, exponent)"
    },
    {
      "trigger": "math.log",
      "contents": "math.log(${1:number x}, ${2:number base = e})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.log(x, base)"
    },
    {
      "trigger": "math.log10",
      "contents": "math.log10(${1:number x})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.log10(x)"
    },
    {
      "trigger": "math.max",
      "contents": "math.max(${1:vararg numbers})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.max(numbers)"
    },
    {
      "trigger": "math.min",
      "contents": "math.min(${1:vararg numbers})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.min(numbers)"
    },
    {
      "trigger": "math.mod",
      "contents": "math.mod(${1:number base}, ${2:number modulator})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.mod(base, modulator)"
    },
    {
      "trigger": "math.modf",
      "contents": "math.modf(${1:number base})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.modf(base)"
    },
    {
      "trigger": "math.NormalizeAngle",
      "contents": "math.NormalizeAngle(${1:number angle})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.NormalizeAngle(angle)"
    },
    {
      "trigger": "math.pow",
      "contents": "math.pow(${1:number x}, ${2:number y})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.pow(x, y)"
    },
    {
      "trigger": "math.QuadraticBezier",
      "contents": "math.QuadraticBezier(${1:number frac}, ${2:Vector p0}, ${3:Vector p1}, ${4:Vector p2})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.QuadraticBezier(frac, p0, p1, p2)"
    },
    {
      "trigger": "math.rad",
      "contents": "math.rad(${1:number degrees})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.rad(degrees)"
    },
    {
      "trigger": "math.Rand",
      "contents": "math.Rand(${1:number min}, ${2:number max})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Rand(min, max)"
    },
    {
      "trigger": "math.random",
      "contents": "math.random(${1:number m = nil}, ${2:number n = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.random(m, n)"
    },
    {
      "trigger": "math.randomseed",
      "contents": "math.randomseed(${1:number seed})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.randomseed(seed)"
    },
    {
      "trigger": "math.Remap",
      "contents": "math.Remap(${1:number value}, ${2:number inMin}, ${3:number inMax}, ${4:number outMin}, ${5:number outMax})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Remap(value, inMin, inMax, outMin, outMax)"
    },
    {
      "trigger": "math.Round",
      "contents": "math.Round(${1:number value}, ${2:number decimals = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Round(value, decimals)"
    },
    {
      "trigger": "math.sin",
      "contents": "math.sin(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.sin(number)"
    },
    {
      "trigger": "math.sinh",
      "contents": "math.sinh(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.sinh(number)"
    },
    {
      "trigger": "math.SnapTo",
      "contents": "math.SnapTo(${1:number input}, ${2:number snapTo})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.SnapTo(input, snapTo)"
    },
    {
      "trigger": "math.sqrt",
      "contents": "math.sqrt(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.sqrt(value)"
    },
    {
      "trigger": "math.tan",
      "contents": "math.tan(${1:number value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.tan(value)"
    },
    {
      "trigger": "math.tanh",
      "contents": "math.tanh(${1:number number})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.tanh(number)"
    },
    {
      "trigger": "math.TimeFraction",
      "contents": "math.TimeFraction(${1:number start}, ${2:number end}, ${3:number current})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.TimeFraction(start, end, current)"
    },
    {
      "trigger": "math.Truncate",
      "contents": "math.Truncate(${1:number num}, ${2:number digits = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "math.Truncate(num, digits)"
    },
    {
      "trigger": "matproxy.ActiveList",
      "contents": "matproxy.ActiveList()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.ActiveList()"
    },
    {
      "trigger": "matproxy.Add",
      "contents": "matproxy.Add(${1:table MatProxyData})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.Add(MatProxyData)"
    },
    {
      "trigger": "matproxy.Call",
      "contents": "matproxy.Call(${1:string uname}, ${2:IMaterial mat}, ${3:Entity ent})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.Call(uname, mat, ent)"
    },
    {
      "trigger": "matproxy.Init",
      "contents": "matproxy.Init(${1:string name}, ${2:string uname}, ${3:IMaterial mat}, ${4:table values})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.Init(name, uname, mat, values)"
    },
    {
      "trigger": "matproxy.ProxyList",
      "contents": "matproxy.ProxyList()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.ProxyList()"
    },
    {
      "trigger": "matproxy.ShouldOverrideProxy",
      "contents": "matproxy.ShouldOverrideProxy(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "matproxy.ShouldOverrideProxy(name)"
    },
    {
      "trigger": "menu.RecordFrame",
      "contents": "menu.RecordFrame()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "menu.RecordFrame()"
    },
    {
      "trigger": "menubar.Init",
      "contents": "menubar.Init()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "menubar.Init()"
    },
    {
      "trigger": "menubar.IsParent",
      "contents": "menubar.IsParent(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "menubar.IsParent(pnl)"
    },
    {
      "trigger": "menubar.ParentTo",
      "contents": "menubar.ParentTo(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "menubar.ParentTo(pnl)"
    },
    {
      "trigger": "mesh.AdvanceVertex",
      "contents": "mesh.AdvanceVertex()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.AdvanceVertex()"
    },
    {
      "trigger": "mesh.Begin",
      "contents": "mesh.Begin(${1:IMesh mesh = nil}, ${2:number primitiveType}, ${3:number primiteCount})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Begin(mesh, primitiveType, primiteCount)"
    },
    {
      "trigger": "mesh.Color",
      "contents": "mesh.Color(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Color(r, g, b, a)"
    },
    {
      "trigger": "mesh.End",
      "contents": "mesh.End()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.End()"
    },
    {
      "trigger": "mesh.Normal",
      "contents": "mesh.Normal(${1:Vector normal})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Normal(normal)"
    },
    {
      "trigger": "mesh.Position",
      "contents": "mesh.Position(${1:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Position(position)"
    },
    {
      "trigger": "mesh.Quad",
      "contents": "mesh.Quad(${1:Vector vertex1}, ${2:Vector vertex2}, ${3:Vector vertex3}, ${4:Vector vertex4})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Quad(vertex1, vertex2, vertex3, vertex4)"
    },
    {
      "trigger": "mesh.QuadEasy",
      "contents": "mesh.QuadEasy(${1:Vector position}, ${2:Vector normal}, ${3:number sizeX}, ${4:number sizeY})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.QuadEasy(position, normal, sizeX, sizeY)"
    },
    {
      "trigger": "mesh.Specular",
      "contents": "mesh.Specular(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.Specular(r, g, b, a)"
    },
    {
      "trigger": "mesh.TangentS",
      "contents": "mesh.TangentS(${1:Vector sTanger})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.TangentS(sTanger)"
    },
    {
      "trigger": "mesh.TangentT",
      "contents": "mesh.TangentT(${1:Vector tTanger})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.TangentT(tTanger)"
    },
    {
      "trigger": "mesh.TexCoord",
      "contents": "mesh.TexCoord(${1:number stage}, ${2:number u}, ${3:number v})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.TexCoord(stage, u, v)"
    },
    {
      "trigger": "mesh.UserData",
      "contents": "mesh.UserData(${1:number tangentX}, ${2:number tangentY}, ${3:number tangentZ}, ${4:number tangentHandedness})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.UserData(tangentX, tangentY, tangentZ, tangentHandedness)"
    },
    {
      "trigger": "mesh.VertexCount",
      "contents": "mesh.VertexCount()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "mesh.VertexCount()"
    },
    {
      "trigger": "motionsensor.BuildSkeleton",
      "contents": "motionsensor.BuildSkeleton(${1:table translator}, ${2:Player player}, ${3:Angle rotation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.BuildSkeleton(translator, player, rotation)"
    },
    {
      "trigger": "motionsensor.ChooseBuilderFromEntity",
      "contents": "motionsensor.ChooseBuilderFromEntity(${1:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.ChooseBuilderFromEntity(ent)"
    },
    {
      "trigger": "motionsensor.GetColourMaterial",
      "contents": "motionsensor.GetColourMaterial()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.GetColourMaterial()"
    },
    {
      "trigger": "motionsensor.GetSkeleton",
      "contents": "motionsensor.GetSkeleton()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.GetSkeleton()"
    },
    {
      "trigger": "motionsensor.IsActive",
      "contents": "motionsensor.IsActive()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.IsActive()"
    },
    {
      "trigger": "motionsensor.IsAvailable",
      "contents": "motionsensor.IsAvailable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.IsAvailable()"
    },
    {
      "trigger": "motionsensor.ProcessAngle",
      "contents": "motionsensor.ProcessAngle(${1:table translator}, ${2:table sensor}, ${3:Vector pos}, ${4:Angle ang}, ${5:table special_vectors}, ${6:number boneid}, ${7:table v})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.ProcessAngle(translator, sensor, pos, ang, special_vectors, boneid, v)"
    },
    {
      "trigger": "motionsensor.ProcessAnglesTable",
      "contents": "motionsensor.ProcessAnglesTable(${1:table translator}, ${2:table sensor}, ${3:Vector pos}, ${4:Angle rotation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.ProcessAnglesTable(translator, sensor, pos, rotation)"
    },
    {
      "trigger": "motionsensor.ProcessPositionTable",
      "contents": "motionsensor.ProcessPositionTable(${1:table translator}, ${2:table sensor})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.ProcessPositionTable(translator, sensor)"
    },
    {
      "trigger": "motionsensor.Start",
      "contents": "motionsensor.Start()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.Start()"
    },
    {
      "trigger": "motionsensor.Stop",
      "contents": "motionsensor.Stop()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "motionsensor.Stop()"
    },
    {
      "trigger": "navmesh.AddWalkableSeed",
      "contents": "navmesh.AddWalkableSeed(${1:Vector pos}, ${2:Vector dir})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.AddWalkableSeed(pos, dir)"
    },
    {
      "trigger": "navmesh.BeginGeneration",
      "contents": "navmesh.BeginGeneration()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.BeginGeneration()"
    },
    {
      "trigger": "navmesh.ClearWalkableSeeds",
      "contents": "navmesh.ClearWalkableSeeds()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.ClearWalkableSeeds()"
    },
    {
      "trigger": "navmesh.CreateNavArea",
      "contents": "navmesh.CreateNavArea(${1:Vector corner}, ${2:Vector opposite_corner})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.CreateNavArea(corner, opposite_corner)"
    },
    {
      "trigger": "navmesh.CreateNavLadder",
      "contents": "navmesh.CreateNavLadder(${1:Vector top}, ${2:Vector bottom}, ${3:number width}, ${4:Vector dir}, ${5:number maxHeightAboveTopArea = 0})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.CreateNavLadder(top, bottom, width, dir, maxHeightAboveTopArea)"
    },
    {
      "trigger": "navmesh.Find",
      "contents": "navmesh.Find(${1:Vector pos}, ${2:number radius}, ${3:number stepHeight}, ${4:number dropHeight})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.Find(pos, radius, stepHeight, dropHeight)"
    },
    {
      "trigger": "navmesh.FindInBox",
      "contents": "navmesh.FindInBox(${1:Vector pos1}, ${2:Vector pos2})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.FindInBox(pos1, pos2)"
    },
    {
      "trigger": "navmesh.GetAllNavAreas",
      "contents": "navmesh.GetAllNavAreas()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetAllNavAreas()"
    },
    {
      "trigger": "navmesh.GetBlockedAreas",
      "contents": "navmesh.GetBlockedAreas()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetBlockedAreas()"
    },
    {
      "trigger": "navmesh.GetEditCursorPosition",
      "contents": "navmesh.GetEditCursorPosition()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetEditCursorPosition()"
    },
    {
      "trigger": "navmesh.GetGroundHeight",
      "contents": "navmesh.GetGroundHeight(${1:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetGroundHeight(pos)"
    },
    {
      "trigger": "navmesh.GetMarkedArea",
      "contents": "navmesh.GetMarkedArea()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetMarkedArea()"
    },
    {
      "trigger": "navmesh.GetMarkedLadder",
      "contents": "navmesh.GetMarkedLadder()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetMarkedLadder()"
    },
    {
      "trigger": "navmesh.GetNavArea",
      "contents": "navmesh.GetNavArea(${1:Vector pos}, ${2:number beneathLimit})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetNavArea(pos, beneathLimit)"
    },
    {
      "trigger": "navmesh.GetNavAreaByID",
      "contents": "navmesh.GetNavAreaByID(${1:number id})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetNavAreaByID(id)"
    },
    {
      "trigger": "navmesh.GetNavAreaCount",
      "contents": "navmesh.GetNavAreaCount()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetNavAreaCount()"
    },
    {
      "trigger": "navmesh.GetNavLadderByID",
      "contents": "navmesh.GetNavLadderByID(${1:number id})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetNavLadderByID(id)"
    },
    {
      "trigger": "navmesh.GetNearestNavArea",
      "contents": "navmesh.GetNearestNavArea(${1:Vector pos}, ${2:boolean anyZ = false}, ${3:number maxDist = 10000}, ${4:boolean checkLOS = false}, ${5:boolean checkGround = true}, ${6:number team = TEAM_ANY=-2})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetNearestNavArea(pos, anyZ, maxDist, checkLOS, checkGround, team)"
    },
    {
      "trigger": "navmesh.GetPlayerSpawnName",
      "contents": "navmesh.GetPlayerSpawnName()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.GetPlayerSpawnName()"
    },
    {
      "trigger": "navmesh.IsGenerating",
      "contents": "navmesh.IsGenerating()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.IsGenerating()"
    },
    {
      "trigger": "navmesh.IsLoaded",
      "contents": "navmesh.IsLoaded()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.IsLoaded()"
    },
    {
      "trigger": "navmesh.Load",
      "contents": "navmesh.Load()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.Load()"
    },
    {
      "trigger": "navmesh.Reset",
      "contents": "navmesh.Reset()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.Reset()"
    },
    {
      "trigger": "navmesh.Save",
      "contents": "navmesh.Save()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.Save()"
    },
    {
      "trigger": "navmesh.SetMarkedArea",
      "contents": "navmesh.SetMarkedArea(${1:CNavArea area})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.SetMarkedArea(area)"
    },
    {
      "trigger": "navmesh.SetMarkedLadder",
      "contents": "navmesh.SetMarkedLadder(${1:CNavLadder area})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.SetMarkedLadder(area)"
    },
    {
      "trigger": "navmesh.SetPlayerSpawnName",
      "contents": "navmesh.SetPlayerSpawnName(${1:string spawnPointClass})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "navmesh.SetPlayerSpawnName(spawnPointClass)"
    },
    {
      "trigger": "net.Broadcast",
      "contents": "net.Broadcast()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Broadcast()"
    },
    {
      "trigger": "net.BytesLeft",
      "contents": "net.BytesLeft()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.BytesLeft()"
    },
    {
      "trigger": "net.BytesWritten",
      "contents": "net.BytesWritten()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.BytesWritten()"
    },
    {
      "trigger": "net.Incoming",
      "contents": "net.Incoming(${1:number length}, ${2:Player client})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Incoming(length, client)"
    },
    {
      "trigger": "net.ReadAngle",
      "contents": "net.ReadAngle()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadAngle()"
    },
    {
      "trigger": "net.ReadBit",
      "contents": "net.ReadBit()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadBit()"
    },
    {
      "trigger": "net.ReadBool",
      "contents": "net.ReadBool()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadBool()"
    },
    {
      "trigger": "net.ReadColor",
      "contents": "net.ReadColor(${1:boolean hasAlpha = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadColor(hasAlpha)"
    },
    {
      "trigger": "net.ReadData",
      "contents": "net.ReadData(${1:number length})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadData(length)"
    },
    {
      "trigger": "net.ReadDouble",
      "contents": "net.ReadDouble()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadDouble()"
    },
    {
      "trigger": "net.ReadEntity",
      "contents": "net.ReadEntity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadEntity()"
    },
    {
      "trigger": "net.ReadFloat",
      "contents": "net.ReadFloat()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadFloat()"
    },
    {
      "trigger": "net.ReadHeader",
      "contents": "net.ReadHeader()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadHeader()"
    },
    {
      "trigger": "net.ReadInt",
      "contents": "net.ReadInt(${1:number bitCount})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadInt(bitCount)"
    },
    {
      "trigger": "net.ReadMatrix",
      "contents": "net.ReadMatrix()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadMatrix()"
    },
    {
      "trigger": "net.ReadNormal",
      "contents": "net.ReadNormal()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadNormal()"
    },
    {
      "trigger": "net.ReadPlayer",
      "contents": "net.ReadPlayer()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadPlayer()"
    },
    {
      "trigger": "net.ReadString",
      "contents": "net.ReadString()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadString()"
    },
    {
      "trigger": "net.ReadTable",
      "contents": "net.ReadTable(${1:boolean sequential = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadTable(sequential)"
    },
    {
      "trigger": "net.ReadType",
      "contents": "net.ReadType(${1:number typeID = net.ReadUInt(8)})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadType(typeID)"
    },
    {
      "trigger": "net.ReadUInt",
      "contents": "net.ReadUInt(${1:number numberOfBits})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadUInt(numberOfBits)"
    },
    {
      "trigger": "net.ReadUInt64",
      "contents": "net.ReadUInt64()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadUInt64()"
    },
    {
      "trigger": "net.ReadVars",
      "contents": "net.ReadVars()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadVars()"
    },
    {
      "trigger": "net.ReadVector",
      "contents": "net.ReadVector()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.ReadVector()"
    },
    {
      "trigger": "net.Receive",
      "contents": "net.Receive(${1:string messageName}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Receive(messageName, callback)"
    },
    {
      "trigger": "net.Receivers",
      "contents": "net.Receivers()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Receivers()"
    },
    {
      "trigger": "net.Send",
      "contents": "net.Send(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Send(ply)"
    },
    {
      "trigger": "net.SendOmit",
      "contents": "net.SendOmit(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.SendOmit(ply)"
    },
    {
      "trigger": "net.SendPAS",
      "contents": "net.SendPAS(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.SendPAS(position)"
    },
    {
      "trigger": "net.SendPVS",
      "contents": "net.SendPVS(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.SendPVS(position)"
    },
    {
      "trigger": "net.SendToServer",
      "contents": "net.SendToServer()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.SendToServer()"
    },
    {
      "trigger": "net.Start",
      "contents": "net.Start(${1:string messageName}, ${2:boolean unreliable = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.Start(messageName, unreliable)"
    },
    {
      "trigger": "net.WriteAngle",
      "contents": "net.WriteAngle(${1:Angle angle})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteAngle(angle)"
    },
    {
      "trigger": "net.WriteBit",
      "contents": "net.WriteBit(${1:boolean boolean})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteBit(boolean)"
    },
    {
      "trigger": "net.WriteBool",
      "contents": "net.WriteBool(${1:boolean boolean})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteBool(boolean)"
    },
    {
      "trigger": "net.WriteColor",
      "contents": "net.WriteColor(${1:table Color}, ${2:boolean writeAlpha = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteColor(Color, writeAlpha)"
    },
    {
      "trigger": "net.WriteData",
      "contents": "net.WriteData(${1:string binaryData}, ${2:number length = #binaryData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteData(binaryData, length)"
    },
    {
      "trigger": "net.WriteDouble",
      "contents": "net.WriteDouble(${1:number double})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteDouble(double)"
    },
    {
      "trigger": "net.WriteEntity",
      "contents": "net.WriteEntity(${1:Entity entity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteEntity(entity)"
    },
    {
      "trigger": "net.WriteFloat",
      "contents": "net.WriteFloat(${1:number float})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteFloat(float)"
    },
    {
      "trigger": "net.WriteInt",
      "contents": "net.WriteInt(${1:number integer}, ${2:number bitCount})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteInt(integer, bitCount)"
    },
    {
      "trigger": "net.WriteMatrix",
      "contents": "net.WriteMatrix(${1:VMatrix matrix})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteMatrix(matrix)"
    },
    {
      "trigger": "net.WriteNormal",
      "contents": "net.WriteNormal(${1:Vector normal})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteNormal(normal)"
    },
    {
      "trigger": "net.WritePlayer",
      "contents": "net.WritePlayer(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WritePlayer(ply)"
    },
    {
      "trigger": "net.WriteString",
      "contents": "net.WriteString(${1:string string})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteString(string)"
    },
    {
      "trigger": "net.WriteTable",
      "contents": "net.WriteTable(${1:table table}, ${2:boolean sequential = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteTable(table, sequential)"
    },
    {
      "trigger": "net.WriteType",
      "contents": "net.WriteType(${1:any Data})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteType(Data)"
    },
    {
      "trigger": "net.WriteUInt",
      "contents": "net.WriteUInt(${1:number unsignedInteger}, ${2:number numberOfBits})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteUInt(unsignedInteger, numberOfBits)"
    },
    {
      "trigger": "net.WriteUInt64",
      "contents": "net.WriteUInt64(${1:string uint64})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteUInt64(uint64)"
    },
    {
      "trigger": "net.WriteVars",
      "contents": "net.WriteVars()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteVars()"
    },
    {
      "trigger": "net.WriteVector",
      "contents": "net.WriteVector(${1:Vector vector})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "net.WriteVector(vector)"
    },
    {
      "trigger": "notification.AddLegacy",
      "contents": "notification.AddLegacy(${1:string text}, ${2:number type}, ${3:number length})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "notification.AddLegacy(text, type, length)"
    },
    {
      "trigger": "notification.AddProgress",
      "contents": "notification.AddProgress(${1:any id}, ${2:string strText}, ${3:number frac = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "notification.AddProgress(id, strText, frac)"
    },
    {
      "trigger": "notification.Kill",
      "contents": "notification.Kill(${1:any uid})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "notification.Kill(uid)"
    },
    {
      "trigger": "numpad.Activate",
      "contents": "numpad.Activate(${1:Player ply}, ${2:number key}, ${3:boolean isButton})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.Activate(ply, key, isButton)"
    },
    {
      "trigger": "numpad.Deactivate",
      "contents": "numpad.Deactivate(${1:Player ply}, ${2:number key}, ${3:boolean isButton})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.Deactivate(ply, key, isButton)"
    },
    {
      "trigger": "numpad.FromButton",
      "contents": "numpad.FromButton()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.FromButton()"
    },
    {
      "trigger": "numpad.OnDown",
      "contents": "numpad.OnDown(${1:Player ply}, ${2:number key}, ${3:string name}, ${4:vararg ...})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.OnDown(ply, key, name, ...)"
    },
    {
      "trigger": "numpad.OnUp",
      "contents": "numpad.OnUp(${1:Player ply}, ${2:number key}, ${3:string name}, ${4:vararg ...})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.OnUp(ply, key, name, ...)"
    },
    {
      "trigger": "numpad.Register",
      "contents": "numpad.Register(${1:string id}, ${2:function func})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.Register(id, func)"
    },
    {
      "trigger": "numpad.Remove",
      "contents": "numpad.Remove(${1:number ID})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.Remove(ID)"
    },
    {
      "trigger": "numpad.Toggle",
      "contents": "numpad.Toggle(${1:Player ply}, ${2:number key})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "numpad.Toggle(ply, key)"
    },
    {
      "trigger": "os.clock",
      "contents": "os.clock()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "os.clock()"
    },
    {
      "trigger": "os.date",
      "contents": "os.date(${1:string format}, ${2:number time = os.time()})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "os.date(format, time)"
    },
    {
      "trigger": "os.difftime",
      "contents": "os.difftime(${1:number timeA}, ${2:number timeB})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "os.difftime(timeA, timeB)"
    },
    {
      "trigger": "os.time",
      "contents": "os.time(${1:table dateData = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "os.time(dateData)"
    },
    {
      "trigger": "package.loaded",
      "contents": "package.loaded()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "package.loaded()"
    },
    {
      "trigger": "package.seeall",
      "contents": "package.seeall(${1:table module})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "package.seeall(module)"
    },
    {
      "trigger": "permissions.AskToConnect",
      "contents": "permissions.AskToConnect(${1:string address})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.AskToConnect(address)"
    },
    {
      "trigger": "permissions.Connect",
      "contents": "permissions.Connect(${1:string ip})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.Connect(ip)"
    },
    {
      "trigger": "permissions.EnableVoiceChat",
      "contents": "permissions.EnableVoiceChat(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.EnableVoiceChat(enable)"
    },
    {
      "trigger": "permissions.GetAll",
      "contents": "permissions.GetAll()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.GetAll()"
    },
    {
      "trigger": "permissions.Grant",
      "contents": "permissions.Grant(${1:string permission}, ${2:boolean temporary})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.Grant(permission, temporary)"
    },
    {
      "trigger": "permissions.IsGranted",
      "contents": "permissions.IsGranted(${1:string permission})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.IsGranted(permission)"
    },
    {
      "trigger": "permissions.Revoke",
      "contents": "permissions.Revoke(${1:string permission}, ${2:string ip})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "permissions.Revoke(permission, ip)"
    },
    {
      "trigger": "physenv.AddSurfaceData",
      "contents": "physenv.AddSurfaceData(${1:string properties})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.AddSurfaceData(properties)"
    },
    {
      "trigger": "physenv.GetAirDensity",
      "contents": "physenv.GetAirDensity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.GetAirDensity()"
    },
    {
      "trigger": "physenv.GetGravity",
      "contents": "physenv.GetGravity()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.GetGravity()"
    },
    {
      "trigger": "physenv.GetLastSimulationTime",
      "contents": "physenv.GetLastSimulationTime()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.GetLastSimulationTime()"
    },
    {
      "trigger": "physenv.GetPerformanceSettings",
      "contents": "physenv.GetPerformanceSettings()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.GetPerformanceSettings()"
    },
    {
      "trigger": "physenv.SetAirDensity",
      "contents": "physenv.SetAirDensity(${1:number airDensity})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.SetAirDensity(airDensity)"
    },
    {
      "trigger": "physenv.SetGravity",
      "contents": "physenv.SetGravity(${1:Vector gravAccel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.SetGravity(gravAccel)"
    },
    {
      "trigger": "physenv.SetPerformanceSettings",
      "contents": "physenv.SetPerformanceSettings(${1:table performanceSettings})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "physenv.SetPerformanceSettings(performanceSettings)"
    },
    {
      "trigger": "player.CreateNextBot",
      "contents": "player.CreateNextBot(${1:string botName})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.CreateNextBot(botName)"
    },
    {
      "trigger": "player.GetAll",
      "contents": "player.GetAll()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetAll()"
    },
    {
      "trigger": "player.GetBots",
      "contents": "player.GetBots()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetBots()"
    },
    {
      "trigger": "player.GetByAccountID",
      "contents": "player.GetByAccountID(${1:number accountID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetByAccountID(accountID)"
    },
    {
      "trigger": "player.GetByID",
      "contents": "player.GetByID(${1:number connectionID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetByID(connectionID)"
    },
    {
      "trigger": "player.GetBySteamID",
      "contents": "player.GetBySteamID(${1:string steamID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetBySteamID(steamID)"
    },
    {
      "trigger": "player.GetBySteamID64",
      "contents": "player.GetBySteamID64(${1:string steamID64})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetBySteamID64(steamID64)"
    },
    {
      "trigger": "player.GetByUniqueID",
      "contents": "player.GetByUniqueID(${1:string uniqueID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetByUniqueID(uniqueID)"
    },
    {
      "trigger": "player.GetCount",
      "contents": "player.GetCount()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetCount()"
    },
    {
      "trigger": "player.GetHumans",
      "contents": "player.GetHumans()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.GetHumans()"
    },
    {
      "trigger": "player.Iterator",
      "contents": "player.Iterator()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player.Iterator()"
    },
    {
      "trigger": "player_manager.AddValidHands",
      "contents": "player_manager.AddValidHands(${1:string name}, ${2:string model}, ${3:number skin = 0}, ${4:string bodygroups = 0000000}, ${5:boolean matchBodySkin = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.AddValidHands(name, model, skin, bodygroups, matchBodySkin)"
    },
    {
      "trigger": "player_manager.AddValidModel",
      "contents": "player_manager.AddValidModel(${1:string name}, ${2:string model})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.AddValidModel(name, model)"
    },
    {
      "trigger": "player_manager.AllValidModels",
      "contents": "player_manager.AllValidModels()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.AllValidModels()"
    },
    {
      "trigger": "player_manager.ClearPlayerClass",
      "contents": "player_manager.ClearPlayerClass(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.ClearPlayerClass(ply)"
    },
    {
      "trigger": "player_manager.GetPlayerClass",
      "contents": "player_manager.GetPlayerClass(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.GetPlayerClass(ply)"
    },
    {
      "trigger": "player_manager.GetPlayerClasses",
      "contents": "player_manager.GetPlayerClasses()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.GetPlayerClasses()"
    },
    {
      "trigger": "player_manager.OnPlayerSpawn",
      "contents": "player_manager.OnPlayerSpawn(${1:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.OnPlayerSpawn(ply)"
    },
    {
      "trigger": "player_manager.RegisterClass",
      "contents": "player_manager.RegisterClass(${1:string name}, ${2:table table}, ${3:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.RegisterClass(name, table, base)"
    },
    {
      "trigger": "player_manager.RunClass",
      "contents": "player_manager.RunClass(${1:Player ply}, ${2:string funcName}, ${3:vararg arguments})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.RunClass(ply, funcName, arguments)"
    },
    {
      "trigger": "player_manager.SetPlayerClass",
      "contents": "player_manager.SetPlayerClass(${1:Player ply}, ${2:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.SetPlayerClass(ply, classname)"
    },
    {
      "trigger": "player_manager.TranslatePlayerHands",
      "contents": "player_manager.TranslatePlayerHands(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.TranslatePlayerHands(name)"
    },
    {
      "trigger": "player_manager.TranslatePlayerModel",
      "contents": "player_manager.TranslatePlayerModel(${1:string shortName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.TranslatePlayerModel(shortName)"
    },
    {
      "trigger": "player_manager.TranslateToPlayerModelName",
      "contents": "player_manager.TranslateToPlayerModelName(${1:string model})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "player_manager.TranslateToPlayerModelName(model)"
    },
    {
      "trigger": "presets.Add",
      "contents": "presets.Add(${1:string groupname}, ${2:string name}, ${3:table values})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.Add(groupname, name, values)"
    },
    {
      "trigger": "presets.BadNameAlert",
      "contents": "presets.BadNameAlert()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.BadNameAlert()"
    },
    {
      "trigger": "presets.Exists",
      "contents": "presets.Exists(${1:string type}, ${2:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.Exists(type, name)"
    },
    {
      "trigger": "presets.GetTable",
      "contents": "presets.GetTable(${1:string groupname})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.GetTable(groupname)"
    },
    {
      "trigger": "presets.OverwritePresetPrompt",
      "contents": "presets.OverwritePresetPrompt(${1:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.OverwritePresetPrompt(callback)"
    },
    {
      "trigger": "presets.Remove",
      "contents": "presets.Remove(${1:string groupname}, ${2:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.Remove(groupname, name)"
    },
    {
      "trigger": "presets.Rename",
      "contents": "presets.Rename(${1:string groupname}, ${2:string oldname}, ${3:string newname})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "presets.Rename(groupname, oldname, newname)"
    },
    {
      "trigger": "properties.Add",
      "contents": "properties.Add(${1:string name}, ${2:table propertyData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.Add(name, propertyData)"
    },
    {
      "trigger": "properties.CanBeTargeted",
      "contents": "properties.CanBeTargeted(${1:Entity ent}, ${2:Player ply})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.CanBeTargeted(ent, ply)"
    },
    {
      "trigger": "properties.GetHovered",
      "contents": "properties.GetHovered(${1:Vector pos}, ${2:Vector aimVec})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.GetHovered(pos, aimVec)"
    },
    {
      "trigger": "properties.List",
      "contents": "properties.List()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.List()"
    },
    {
      "trigger": "properties.OnScreenClick",
      "contents": "properties.OnScreenClick(${1:Vector eyepos}, ${2:Vector eyevec})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.OnScreenClick(eyepos, eyevec)"
    },
    {
      "trigger": "properties.OpenEntityMenu",
      "contents": "properties.OpenEntityMenu(${1:Entity ent}, ${2:table tr})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "properties.OpenEntityMenu(ent, tr)"
    },
    {
      "trigger": "render.AddBeam",
      "contents": "render.AddBeam(${1:Vector startPos}, ${2:number width}, ${3:number textureEnd}, ${4:table color})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.AddBeam(startPos, width, textureEnd, color)"
    },
    {
      "trigger": "render.BlurRenderTarget",
      "contents": "render.BlurRenderTarget(${1:ITexture rendertarget}, ${2:number blurx}, ${3:number blury}, ${4:number passes})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.BlurRenderTarget(rendertarget, blurx, blury, passes)"
    },
    {
      "trigger": "render.BrushMaterialOverride",
      "contents": "render.BrushMaterialOverride(${1:IMaterial mat = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.BrushMaterialOverride(mat)"
    },
    {
      "trigger": "render.Capture",
      "contents": "render.Capture(${1:table captureData})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.Capture(captureData)"
    },
    {
      "trigger": "render.CapturePixels",
      "contents": "render.CapturePixels()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.CapturePixels()"
    },
    {
      "trigger": "render.Clear",
      "contents": "render.Clear(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a}, ${5:boolean clearDepth = false}, ${6:boolean clearStencil = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.Clear(r, g, b, a, clearDepth, clearStencil)"
    },
    {
      "trigger": "render.ClearBuffersObeyStencil",
      "contents": "render.ClearBuffersObeyStencil(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a}, ${5:boolean depth})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ClearBuffersObeyStencil(r, g, b, a, depth)"
    },
    {
      "trigger": "render.ClearDepth",
      "contents": "render.ClearDepth(${1:boolean clearStencil = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ClearDepth(clearStencil)"
    },
    {
      "trigger": "render.ClearRenderTarget",
      "contents": "render.ClearRenderTarget(${1:ITexture texture}, ${2:table color})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ClearRenderTarget(texture, color)"
    },
    {
      "trigger": "render.ClearStencil",
      "contents": "render.ClearStencil()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ClearStencil()"
    },
    {
      "trigger": "render.ClearStencilBufferRectangle",
      "contents": "render.ClearStencilBufferRectangle(${1:number originX}, ${2:number originY}, ${3:number endX}, ${4:number endY}, ${5:number stencilValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ClearStencilBufferRectangle(originX, originY, endX, endY, stencilValue)"
    },
    {
      "trigger": "render.ComputeDynamicLighting",
      "contents": "render.ComputeDynamicLighting(${1:Vector position}, ${2:Vector normal})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ComputeDynamicLighting(position, normal)"
    },
    {
      "trigger": "render.ComputeLighting",
      "contents": "render.ComputeLighting(${1:Vector position}, ${2:Vector normal})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ComputeLighting(position, normal)"
    },
    {
      "trigger": "render.ComputePixelDiameterOfSphere",
      "contents": "render.ComputePixelDiameterOfSphere(${1:Vector point}, ${2:number radius})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ComputePixelDiameterOfSphere(point, radius)"
    },
    {
      "trigger": "render.CopyRenderTargetToTexture",
      "contents": "render.CopyRenderTargetToTexture(${1:ITexture Target})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.CopyRenderTargetToTexture(Target)"
    },
    {
      "trigger": "render.CopyTexture",
      "contents": "render.CopyTexture(${1:ITexture texture_from}, ${2:ITexture texture_to})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.CopyTexture(texture_from, texture_to)"
    },
    {
      "trigger": "render.CullMode",
      "contents": "render.CullMode(${1:number cullMode})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.CullMode(cullMode)"
    },
    {
      "trigger": "render.DepthRange",
      "contents": "render.DepthRange(${1:number depthmin}, ${2:number depthmax})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DepthRange(depthmin, depthmax)"
    },
    {
      "trigger": "render.DrawBeam",
      "contents": "render.DrawBeam(${1:Vector startPos}, ${2:Vector endPos}, ${3:number width}, ${4:number textureStart}, ${5:number textureEnd}, ${6:table color = Color( 255, 255, 255 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawBeam(startPos, endPos, width, textureStart, textureEnd, color)"
    },
    {
      "trigger": "render.DrawBox",
      "contents": "render.DrawBox(${1:Vector position}, ${2:Angle angles}, ${3:Vector mins}, ${4:Vector maxs}, ${5:table color = Color( 255, 255, 255 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawBox(position, angles, mins, maxs, color)"
    },
    {
      "trigger": "render.DrawLine",
      "contents": "render.DrawLine(${1:Vector startPos}, ${2:Vector endPos}, ${3:table color = Color( 255, 255, 255 )}, ${4:boolean writeZ = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawLine(startPos, endPos, color, writeZ)"
    },
    {
      "trigger": "render.DrawQuad",
      "contents": "render.DrawQuad(${1:Vector vert1}, ${2:Vector vert2}, ${3:Vector vert3}, ${4:Vector vert4}, ${5:table color = Color( 255, 255, 255 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawQuad(vert1, vert2, vert3, vert4, color)"
    },
    {
      "trigger": "render.DrawQuadEasy",
      "contents": "render.DrawQuadEasy(${1:Vector position}, ${2:Vector normal}, ${3:number width}, ${4:number height}, ${5:table color}, ${6:number rotation = 0})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawQuadEasy(position, normal, width, height, color, rotation)"
    },
    {
      "trigger": "render.DrawScreenQuad",
      "contents": "render.DrawScreenQuad(${1:boolean applyPoster = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawScreenQuad(applyPoster)"
    },
    {
      "trigger": "render.DrawScreenQuadEx",
      "contents": "render.DrawScreenQuadEx(${1:number startX}, ${2:number startY}, ${3:number width}, ${4:number height})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawScreenQuadEx(startX, startY, width, height)"
    },
    {
      "trigger": "render.DrawSphere",
      "contents": "render.DrawSphere(${1:Vector position}, ${2:number radius}, ${3:number longitudeSteps}, ${4:number latitudeSteps}, ${5:table color = Color( 255, 255, 255 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawSphere(position, radius, longitudeSteps, latitudeSteps, color)"
    },
    {
      "trigger": "render.DrawSprite",
      "contents": "render.DrawSprite(${1:Vector position}, ${2:number width}, ${3:number height}, ${4:table color = Color( 255, 255, 255 )})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawSprite(position, width, height, color)"
    },
    {
      "trigger": "render.DrawTextureToScreen",
      "contents": "render.DrawTextureToScreen(${1:ITexture tex})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawTextureToScreen(tex)"
    },
    {
      "trigger": "render.DrawTextureToScreenRect",
      "contents": "render.DrawTextureToScreenRect(${1:ITexture tex}, ${2:number x}, ${3:number y}, ${4:number width}, ${5:number height})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawTextureToScreenRect(tex, x, y, width, height)"
    },
    {
      "trigger": "render.DrawWireframeBox",
      "contents": "render.DrawWireframeBox(${1:Vector position}, ${2:Angle angle}, ${3:Vector mins}, ${4:Vector maxs}, ${5:table color = Color( 255, 255, 255 )}, ${6:boolean writeZ = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawWireframeBox(position, angle, mins, maxs, color, writeZ)"
    },
    {
      "trigger": "render.DrawWireframeSphere",
      "contents": "render.DrawWireframeSphere(${1:Vector position}, ${2:number radius}, ${3:number longitudeSteps}, ${4:number latitudeSteps}, ${5:table color = Color( 255, 255, 255 )}, ${6:boolean writeZ = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.DrawWireframeSphere(position, radius, longitudeSteps, latitudeSteps, color, writeZ)"
    },
    {
      "trigger": "render.EnableClipping",
      "contents": "render.EnableClipping(${1:boolean state})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.EnableClipping(state)"
    },
    {
      "trigger": "render.EndBeam",
      "contents": "render.EndBeam()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.EndBeam()"
    },
    {
      "trigger": "render.FogColor",
      "contents": "render.FogColor(${1:number red}, ${2:number green}, ${3:number blue})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.FogColor(red, green, blue)"
    },
    {
      "trigger": "render.FogEnd",
      "contents": "render.FogEnd(${1:number distance})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.FogEnd(distance)"
    },
    {
      "trigger": "render.FogMaxDensity",
      "contents": "render.FogMaxDensity(${1:number maxDensity})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.FogMaxDensity(maxDensity)"
    },
    {
      "trigger": "render.FogMode",
      "contents": "render.FogMode(${1:number fogMode})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.FogMode(fogMode)"
    },
    {
      "trigger": "render.FogStart",
      "contents": "render.FogStart(${1:number fogStart})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.FogStart(fogStart)"
    },
    {
      "trigger": "render.GetAmbientLightColor",
      "contents": "render.GetAmbientLightColor()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetAmbientLightColor()"
    },
    {
      "trigger": "render.GetBlend",
      "contents": "render.GetBlend()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetBlend()"
    },
    {
      "trigger": "render.GetBloomTex0",
      "contents": "render.GetBloomTex0()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetBloomTex0()"
    },
    {
      "trigger": "render.GetBloomTex1",
      "contents": "render.GetBloomTex1()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetBloomTex1()"
    },
    {
      "trigger": "render.GetColorModulation",
      "contents": "render.GetColorModulation()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetColorModulation()"
    },
    {
      "trigger": "render.GetDXLevel",
      "contents": "render.GetDXLevel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetDXLevel()"
    },
    {
      "trigger": "render.GetFogColor",
      "contents": "render.GetFogColor()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetFogColor()"
    },
    {
      "trigger": "render.GetFogDistances",
      "contents": "render.GetFogDistances()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetFogDistances()"
    },
    {
      "trigger": "render.GetFogMode",
      "contents": "render.GetFogMode()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetFogMode()"
    },
    {
      "trigger": "render.GetFullScreenDepthTexture",
      "contents": "render.GetFullScreenDepthTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetFullScreenDepthTexture()"
    },
    {
      "trigger": "render.GetHDREnabled",
      "contents": "render.GetHDREnabled()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetHDREnabled()"
    },
    {
      "trigger": "render.GetLightColor",
      "contents": "render.GetLightColor(${1:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetLightColor(position)"
    },
    {
      "trigger": "render.GetMoBlurTex0",
      "contents": "render.GetMoBlurTex0()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetMoBlurTex0()"
    },
    {
      "trigger": "render.GetMoBlurTex1",
      "contents": "render.GetMoBlurTex1()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetMoBlurTex1()"
    },
    {
      "trigger": "render.GetMorphTex0",
      "contents": "render.GetMorphTex0()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetMorphTex0()"
    },
    {
      "trigger": "render.GetMorphTex1",
      "contents": "render.GetMorphTex1()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetMorphTex1()"
    },
    {
      "trigger": "render.GetPowerOfTwoTexture",
      "contents": "render.GetPowerOfTwoTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetPowerOfTwoTexture()"
    },
    {
      "trigger": "render.GetRefractTexture",
      "contents": "render.GetRefractTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetRefractTexture()"
    },
    {
      "trigger": "render.GetRenderTarget",
      "contents": "render.GetRenderTarget()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetRenderTarget()"
    },
    {
      "trigger": "render.GetResolvedFullFrameDepth",
      "contents": "render.GetResolvedFullFrameDepth()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetResolvedFullFrameDepth()"
    },
    {
      "trigger": "render.GetScreenEffectTexture",
      "contents": "render.GetScreenEffectTexture(${1:number textureIndex = 0})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetScreenEffectTexture(textureIndex)"
    },
    {
      "trigger": "render.GetSmallTex0",
      "contents": "render.GetSmallTex0()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetSmallTex0()"
    },
    {
      "trigger": "render.GetSmallTex1",
      "contents": "render.GetSmallTex1()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetSmallTex1()"
    },
    {
      "trigger": "render.GetSuperFPTex",
      "contents": "render.GetSuperFPTex()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetSuperFPTex()"
    },
    {
      "trigger": "render.GetSuperFPTex2",
      "contents": "render.GetSuperFPTex2()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetSuperFPTex2()"
    },
    {
      "trigger": "render.GetSurfaceColor",
      "contents": "render.GetSurfaceColor(${1:Vector startPos}, ${2:Vector endPos})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetSurfaceColor(startPos, endPos)"
    },
    {
      "trigger": "render.GetToneMappingScaleLinear",
      "contents": "render.GetToneMappingScaleLinear()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetToneMappingScaleLinear()"
    },
    {
      "trigger": "render.GetViewSetup",
      "contents": "render.GetViewSetup(${1:boolean noPlayer = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.GetViewSetup(noPlayer)"
    },
    {
      "trigger": "render.MaterialOverride",
      "contents": "render.MaterialOverride(${1:IMaterial material})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.MaterialOverride(material)"
    },
    {
      "trigger": "render.MaterialOverrideByIndex",
      "contents": "render.MaterialOverrideByIndex(${1:number index}, ${2:IMaterial material})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.MaterialOverrideByIndex(index, material)"
    },
    {
      "trigger": "render.MaxTextureHeight",
      "contents": "render.MaxTextureHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.MaxTextureHeight()"
    },
    {
      "trigger": "render.MaxTextureWidth",
      "contents": "render.MaxTextureWidth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.MaxTextureWidth()"
    },
    {
      "trigger": "render.Model",
      "contents": "render.Model(${1:table settings}, ${2:CSEnt ent = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.Model(settings, ent)"
    },
    {
      "trigger": "render.ModelMaterialOverride",
      "contents": "render.ModelMaterialOverride(${1:IMaterial material})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ModelMaterialOverride(material)"
    },
    {
      "trigger": "render.OverrideAlphaWriteEnable",
      "contents": "render.OverrideAlphaWriteEnable(${1:boolean enable}, ${2:boolean shouldWrite})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.OverrideAlphaWriteEnable(enable, shouldWrite)"
    },
    {
      "trigger": "render.OverrideBlend",
      "contents": "render.OverrideBlend(${1:boolean enabled}, ${2:number srcBlend}, ${3:number destBlend}, ${4:number blendFunc}, ${5:number srcBlendAlpha = none}, ${6:number destBlendAlpha = none}, ${7:number blendFuncAlpha = none})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.OverrideBlend(enabled, srcBlend, destBlend, blendFunc, srcBlendAlpha, destBlendAlpha, blendFuncAlpha)"
    },
    {
      "trigger": "render.OverrideBlendFunc",
      "contents": "render.OverrideBlendFunc(${1:boolean enabled}, ${2:number srcBlend}, ${3:number destBlend}, ${4:number srcBlendAlpha = nil}, ${5:number destBlendAlpha = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.OverrideBlendFunc(enabled, srcBlend, destBlend, srcBlendAlpha, destBlendAlpha)"
    },
    {
      "trigger": "render.OverrideColorWriteEnable",
      "contents": "render.OverrideColorWriteEnable(${1:boolean enable}, ${2:boolean shouldWrite})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.OverrideColorWriteEnable(enable, shouldWrite)"
    },
    {
      "trigger": "render.OverrideDepthEnable",
      "contents": "render.OverrideDepthEnable(${1:boolean enable}, ${2:boolean shouldWrite})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.OverrideDepthEnable(enable, shouldWrite)"
    },
    {
      "trigger": "render.PerformFullScreenStencilOperation",
      "contents": "render.PerformFullScreenStencilOperation()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PerformFullScreenStencilOperation()"
    },
    {
      "trigger": "render.PopCustomClipPlane",
      "contents": "render.PopCustomClipPlane()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PopCustomClipPlane()"
    },
    {
      "trigger": "render.PopFilterMag",
      "contents": "render.PopFilterMag()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PopFilterMag()"
    },
    {
      "trigger": "render.PopFilterMin",
      "contents": "render.PopFilterMin()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PopFilterMin()"
    },
    {
      "trigger": "render.PopFlashlightMode",
      "contents": "render.PopFlashlightMode()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PopFlashlightMode()"
    },
    {
      "trigger": "render.PopRenderTarget",
      "contents": "render.PopRenderTarget()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PopRenderTarget()"
    },
    {
      "trigger": "render.PushCustomClipPlane",
      "contents": "render.PushCustomClipPlane(${1:Vector normal}, ${2:number distance})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PushCustomClipPlane(normal, distance)"
    },
    {
      "trigger": "render.PushFilterMag",
      "contents": "render.PushFilterMag(${1:number texFilterType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PushFilterMag(texFilterType)"
    },
    {
      "trigger": "render.PushFilterMin",
      "contents": "render.PushFilterMin(${1:number texFilterType})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PushFilterMin(texFilterType)"
    },
    {
      "trigger": "render.PushFlashlightMode",
      "contents": "render.PushFlashlightMode(${1:boolean enable = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PushFlashlightMode(enable)"
    },
    {
      "trigger": "render.PushRenderTarget",
      "contents": "render.PushRenderTarget(${1:ITexture texture}, ${2:number x = 0}, ${3:number y = 0}, ${4:number w = texture:Width()}, ${5:number h = texture:Height()})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.PushRenderTarget(texture, x, y, w, h)"
    },
    {
      "trigger": "render.ReadPixel",
      "contents": "render.ReadPixel(${1:number x}, ${2:number y})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ReadPixel(x, y)"
    },
    {
      "trigger": "render.RedownloadAllLightmaps",
      "contents": "render.RedownloadAllLightmaps(${1:boolean DoStaticProps = false}, ${2:boolean UpdateStaticLighting = false})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.RedownloadAllLightmaps(DoStaticProps, UpdateStaticLighting)"
    },
    {
      "trigger": "render.RenderFlashlights",
      "contents": "render.RenderFlashlights(${1:function renderFunc})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.RenderFlashlights(renderFunc)"
    },
    {
      "trigger": "render.RenderHUD",
      "contents": "render.RenderHUD(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.RenderHUD(x, y, w, h)"
    },
    {
      "trigger": "render.RenderView",
      "contents": "render.RenderView(${1:table view = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.RenderView(view)"
    },
    {
      "trigger": "render.ResetModelLighting",
      "contents": "render.ResetModelLighting(${1:number r}, ${2:number g}, ${3:number b})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ResetModelLighting(r, g, b)"
    },
    {
      "trigger": "render.ResetToneMappingScale",
      "contents": "render.ResetToneMappingScale(${1:number scale})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.ResetToneMappingScale(scale)"
    },
    {
      "trigger": "render.SetAmbientLight",
      "contents": "render.SetAmbientLight(${1:number r}, ${2:number g}, ${3:number b})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetAmbientLight(r, g, b)"
    },
    {
      "trigger": "render.SetBlend",
      "contents": "render.SetBlend(${1:number blending})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetBlend(blending)"
    },
    {
      "trigger": "render.SetColorMaterial",
      "contents": "render.SetColorMaterial()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetColorMaterial()"
    },
    {
      "trigger": "render.SetColorMaterialIgnoreZ",
      "contents": "render.SetColorMaterialIgnoreZ()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetColorMaterialIgnoreZ()"
    },
    {
      "trigger": "render.SetColorModulation",
      "contents": "render.SetColorModulation(${1:number r}, ${2:number g}, ${3:number b})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetColorModulation(r, g, b)"
    },
    {
      "trigger": "render.SetFogZ",
      "contents": "render.SetFogZ(${1:number fogZ})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetFogZ(fogZ)"
    },
    {
      "trigger": "render.SetGoalToneMappingScale",
      "contents": "render.SetGoalToneMappingScale(${1:number scale})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetGoalToneMappingScale(scale)"
    },
    {
      "trigger": "render.SetLightingMode",
      "contents": "render.SetLightingMode(${1:number Mode})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetLightingMode(Mode)"
    },
    {
      "trigger": "render.SetLightingOrigin",
      "contents": "render.SetLightingOrigin(${1:Vector lightingOrigin})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetLightingOrigin(lightingOrigin)"
    },
    {
      "trigger": "render.SetLightmapTexture",
      "contents": "render.SetLightmapTexture(${1:ITexture tex})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetLightmapTexture(tex)"
    },
    {
      "trigger": "render.SetLocalModelLights",
      "contents": "render.SetLocalModelLights(${1:table lights = {}})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetLocalModelLights(lights)"
    },
    {
      "trigger": "render.SetMaterial",
      "contents": "render.SetMaterial(${1:IMaterial mat})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetMaterial(mat)"
    },
    {
      "trigger": "render.SetModelLighting",
      "contents": "render.SetModelLighting(${1:number lightDirection}, ${2:number red}, ${3:number green}, ${4:number blue})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetModelLighting(lightDirection, red, green, blue)"
    },
    {
      "trigger": "render.SetRenderTarget",
      "contents": "render.SetRenderTarget(${1:ITexture texture})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetRenderTarget(texture)"
    },
    {
      "trigger": "render.SetRenderTargetEx",
      "contents": "render.SetRenderTargetEx(${1:number rtIndex}, ${2:ITexture texture})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetRenderTargetEx(rtIndex, texture)"
    },
    {
      "trigger": "render.SetScissorRect",
      "contents": "render.SetScissorRect(${1:number startX}, ${2:number startY}, ${3:number endX}, ${4:number endY}, ${5:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetScissorRect(startX, startY, endX, endY, enable)"
    },
    {
      "trigger": "render.SetShadowColor",
      "contents": "render.SetShadowColor(${1:number red}, ${2:number green}, ${3:number blue})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetShadowColor(red, green, blue)"
    },
    {
      "trigger": "render.SetShadowDirection",
      "contents": "render.SetShadowDirection(${1:Vector shadowDirections})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetShadowDirection(shadowDirections)"
    },
    {
      "trigger": "render.SetShadowDistance",
      "contents": "render.SetShadowDistance(${1:number shadowDistance})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetShadowDistance(shadowDistance)"
    },
    {
      "trigger": "render.SetShadowsDisabled",
      "contents": "render.SetShadowsDisabled(${1:boolean newState})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetShadowsDisabled(newState)"
    },
    {
      "trigger": "render.SetStencilCompareFunction",
      "contents": "render.SetStencilCompareFunction(${1:number compareFunction})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilCompareFunction(compareFunction)"
    },
    {
      "trigger": "render.SetStencilEnable",
      "contents": "render.SetStencilEnable(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilEnable(newState)"
    },
    {
      "trigger": "render.SetStencilFailOperation",
      "contents": "render.SetStencilFailOperation(${1:number failOperation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilFailOperation(failOperation)"
    },
    {
      "trigger": "render.SetStencilPassOperation",
      "contents": "render.SetStencilPassOperation(${1:number passOperation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilPassOperation(passOperation)"
    },
    {
      "trigger": "render.SetStencilReferenceValue",
      "contents": "render.SetStencilReferenceValue(${1:number referenceValue})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilReferenceValue(referenceValue)"
    },
    {
      "trigger": "render.SetStencilTestMask",
      "contents": "render.SetStencilTestMask(${1:number mask})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilTestMask(mask)"
    },
    {
      "trigger": "render.SetStencilWriteMask",
      "contents": "render.SetStencilWriteMask(${1:number mask})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilWriteMask(mask)"
    },
    {
      "trigger": "render.SetStencilZFailOperation",
      "contents": "render.SetStencilZFailOperation(${1:number zFailOperation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetStencilZFailOperation(zFailOperation)"
    },
    {
      "trigger": "render.SetToneMappingScaleLinear",
      "contents": "render.SetToneMappingScaleLinear(${1:Vector vec})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetToneMappingScaleLinear(vec)"
    },
    {
      "trigger": "render.SetViewPort",
      "contents": "render.SetViewPort(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetViewPort(x, y, w, h)"
    },
    {
      "trigger": "render.SetWriteDepthToDestAlpha",
      "contents": "render.SetWriteDepthToDestAlpha(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SetWriteDepthToDestAlpha(enable)"
    },
    {
      "trigger": "render.Spin",
      "contents": "render.Spin()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.Spin()"
    },
    {
      "trigger": "render.StartBeam",
      "contents": "render.StartBeam(${1:number segmentCount})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.StartBeam(segmentCount)"
    },
    {
      "trigger": "render.SupportsHDR",
      "contents": "render.SupportsHDR()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SupportsHDR()"
    },
    {
      "trigger": "render.SupportsPixelShaders_1_4",
      "contents": "render.SupportsPixelShaders_1_4()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SupportsPixelShaders_1_4()"
    },
    {
      "trigger": "render.SupportsPixelShaders_2_0",
      "contents": "render.SupportsPixelShaders_2_0()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SupportsPixelShaders_2_0()"
    },
    {
      "trigger": "render.SupportsVertexShaders_2_0",
      "contents": "render.SupportsVertexShaders_2_0()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SupportsVertexShaders_2_0()"
    },
    {
      "trigger": "render.SuppressEngineLighting",
      "contents": "render.SuppressEngineLighting(${1:boolean suppressLighting})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.SuppressEngineLighting(suppressLighting)"
    },
    {
      "trigger": "render.TurnOnToneMapping",
      "contents": "render.TurnOnToneMapping()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.TurnOnToneMapping()"
    },
    {
      "trigger": "render.UpdateFullScreenDepthTexture",
      "contents": "render.UpdateFullScreenDepthTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.UpdateFullScreenDepthTexture()"
    },
    {
      "trigger": "render.UpdatePowerOfTwoTexture",
      "contents": "render.UpdatePowerOfTwoTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.UpdatePowerOfTwoTexture()"
    },
    {
      "trigger": "render.UpdateRefractTexture",
      "contents": "render.UpdateRefractTexture()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.UpdateRefractTexture()"
    },
    {
      "trigger": "render.UpdateScreenEffectTexture",
      "contents": "render.UpdateScreenEffectTexture(${1:number textureIndex = 0})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.UpdateScreenEffectTexture(textureIndex)"
    },
    {
      "trigger": "render.WorldMaterialOverride",
      "contents": "render.WorldMaterialOverride(${1:IMaterial mat = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "render.WorldMaterialOverride(mat)"
    },
    {
      "trigger": "resource.AddFile",
      "contents": "resource.AddFile(${1:string path})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "resource.AddFile(path)"
    },
    {
      "trigger": "resource.AddSingleFile",
      "contents": "resource.AddSingleFile(${1:string path})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "resource.AddSingleFile(path)"
    },
    {
      "trigger": "resource.AddWorkshop",
      "contents": "resource.AddWorkshop(${1:string workshopid})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "resource.AddWorkshop(workshopid)"
    },
    {
      "trigger": "saverestore.AddRestoreHook",
      "contents": "saverestore.AddRestoreHook(${1:string identifier}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.AddRestoreHook(identifier, callback)"
    },
    {
      "trigger": "saverestore.AddSaveHook",
      "contents": "saverestore.AddSaveHook(${1:string identifier}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.AddSaveHook(identifier, callback)"
    },
    {
      "trigger": "saverestore.LoadEntity",
      "contents": "saverestore.LoadEntity(${1:Entity ent}, ${2:IRestore save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.LoadEntity(ent, save)"
    },
    {
      "trigger": "saverestore.LoadGlobal",
      "contents": "saverestore.LoadGlobal(${1:IRestore save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.LoadGlobal(save)"
    },
    {
      "trigger": "saverestore.PreRestore",
      "contents": "saverestore.PreRestore()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.PreRestore()"
    },
    {
      "trigger": "saverestore.PreSave",
      "contents": "saverestore.PreSave()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.PreSave()"
    },
    {
      "trigger": "saverestore.ReadTable",
      "contents": "saverestore.ReadTable(${1:IRestore save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.ReadTable(save)"
    },
    {
      "trigger": "saverestore.ReadVar",
      "contents": "saverestore.ReadVar(${1:IRestore save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.ReadVar(save)"
    },
    {
      "trigger": "saverestore.SaveEntity",
      "contents": "saverestore.SaveEntity(${1:Entity ent}, ${2:ISave save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.SaveEntity(ent, save)"
    },
    {
      "trigger": "saverestore.SaveGlobal",
      "contents": "saverestore.SaveGlobal(${1:ISave save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.SaveGlobal(save)"
    },
    {
      "trigger": "saverestore.WritableKeysInTable",
      "contents": "saverestore.WritableKeysInTable(${1:table table})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.WritableKeysInTable(table)"
    },
    {
      "trigger": "saverestore.WriteTable",
      "contents": "saverestore.WriteTable(${1:table table}, ${2:ISave save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.WriteTable(table, save)"
    },
    {
      "trigger": "saverestore.WriteVar",
      "contents": "saverestore.WriteVar(${1:any value}, ${2:ISave save})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "saverestore.WriteVar(value, save)"
    },
    {
      "trigger": "scripted_ents.Alias",
      "contents": "scripted_ents.Alias(${1:string alias}, ${2:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.Alias(alias, classname)"
    },
    {
      "trigger": "scripted_ents.Get",
      "contents": "scripted_ents.Get(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.Get(classname)"
    },
    {
      "trigger": "scripted_ents.GetList",
      "contents": "scripted_ents.GetList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.GetList()"
    },
    {
      "trigger": "scripted_ents.GetMember",
      "contents": "scripted_ents.GetMember(${1:string class}, ${2:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.GetMember(class, name)"
    },
    {
      "trigger": "scripted_ents.GetSpawnable",
      "contents": "scripted_ents.GetSpawnable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.GetSpawnable()"
    },
    {
      "trigger": "scripted_ents.GetStored",
      "contents": "scripted_ents.GetStored(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.GetStored(classname)"
    },
    {
      "trigger": "scripted_ents.GetType",
      "contents": "scripted_ents.GetType(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.GetType(classname)"
    },
    {
      "trigger": "scripted_ents.IsBasedOn",
      "contents": "scripted_ents.IsBasedOn(${1:string name}, ${2:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.IsBasedOn(name, base)"
    },
    {
      "trigger": "scripted_ents.OnLoaded",
      "contents": "scripted_ents.OnLoaded()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.OnLoaded()"
    },
    {
      "trigger": "scripted_ents.Register",
      "contents": "scripted_ents.Register(${1:table ENT}, ${2:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "scripted_ents.Register(ENT, classname)"
    },
    {
      "trigger": "search.AddProvider",
      "contents": "search.AddProvider(${1:function provider}, ${2:string id = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "search.AddProvider(provider, id)"
    },
    {
      "trigger": "search.GetResults",
      "contents": "search.GetResults(${1:string query}, ${2:string types = nil}, ${3:number maxResults = 1024})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "search.GetResults(query, types, maxResults)"
    },
    {
      "trigger": "serverlist.AddCurrentServerToFavorites",
      "contents": "serverlist.AddCurrentServerToFavorites()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.AddCurrentServerToFavorites()"
    },
    {
      "trigger": "serverlist.AddServerToFavorites",
      "contents": "serverlist.AddServerToFavorites(${1:string address})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.AddServerToFavorites(address)"
    },
    {
      "trigger": "serverlist.IsCurrentServerFavorite",
      "contents": "serverlist.IsCurrentServerFavorite()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.IsCurrentServerFavorite()"
    },
    {
      "trigger": "serverlist.IsServerFavorite",
      "contents": "serverlist.IsServerFavorite(${1:string address})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.IsServerFavorite(address)"
    },
    {
      "trigger": "serverlist.PingServer",
      "contents": "serverlist.PingServer(${1:string ip}, ${2:function callback})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.PingServer(ip, callback)"
    },
    {
      "trigger": "serverlist.PlayerList",
      "contents": "serverlist.PlayerList(${1:string ip}, ${2:function callback})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.PlayerList(ip, callback)"
    },
    {
      "trigger": "serverlist.Query",
      "contents": "serverlist.Query(${1:table data})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.Query(data)"
    },
    {
      "trigger": "serverlist.RemoveServerFromFavorites",
      "contents": "serverlist.RemoveServerFromFavorites(${1:string address})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "serverlist.RemoveServerFromFavorites(address)"
    },
    {
      "trigger": "sound.Add",
      "contents": "sound.Add(${1:table soundData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.Add(soundData)"
    },
    {
      "trigger": "sound.AddSoundOverrides",
      "contents": "sound.AddSoundOverrides(${1:string filepath})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.AddSoundOverrides(filepath)"
    },
    {
      "trigger": "sound.EmitHint",
      "contents": "sound.EmitHint(${1:number hint}, ${2:Vector pos}, ${3:number volume}, ${4:number duration}, ${5:Entity owner = NULL})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.EmitHint(hint, pos, volume, duration, owner)"
    },
    {
      "trigger": "sound.Generate",
      "contents": "sound.Generate(${1:string indentifier}, ${2:number samplerate}, ${3:number length}, ${4:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.Generate(indentifier, samplerate, length, callback)"
    },
    {
      "trigger": "sound.GetLoudestSoundHint",
      "contents": "sound.GetLoudestSoundHint(${1:number types}, ${2:Vector pos})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.GetLoudestSoundHint(types, pos)"
    },
    {
      "trigger": "sound.GetProperties",
      "contents": "sound.GetProperties(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.GetProperties(name)"
    },
    {
      "trigger": "sound.GetTable",
      "contents": "sound.GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.GetTable()"
    },
    {
      "trigger": "sound.Play",
      "contents": "sound.Play(${1:string snd}, ${2:Vector pos}, ${3:number level = 75}, ${4:number pitch = 100}, ${5:number volume = 1})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.Play(snd, pos, level, pitch, volume)"
    },
    {
      "trigger": "sound.PlayFile",
      "contents": "sound.PlayFile(${1:string path}, ${2:string flags}, ${3:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.PlayFile(path, flags, callback)"
    },
    {
      "trigger": "sound.PlayURL",
      "contents": "sound.PlayURL(${1:string url}, ${2:string flags}, ${3:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sound.PlayURL(url, flags, callback)"
    },
    {
      "trigger": "spawnmenu.ActivateTool",
      "contents": "spawnmenu.ActivateTool(${1:string tool}, ${2:boolean menu_only})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.ActivateTool(tool, menu_only)"
    },
    {
      "trigger": "spawnmenu.ActivateToolPanel",
      "contents": "spawnmenu.ActivateToolPanel(${1:number tab}, ${2:Panel cp})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.ActivateToolPanel(tab, cp)"
    },
    {
      "trigger": "spawnmenu.ActiveControlPanel",
      "contents": "spawnmenu.ActiveControlPanel()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.ActiveControlPanel()"
    },
    {
      "trigger": "spawnmenu.AddContentType",
      "contents": "spawnmenu.AddContentType(${1:string name}, ${2:function constructor})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddContentType(name, constructor)"
    },
    {
      "trigger": "spawnmenu.AddCreationTab",
      "contents": "spawnmenu.AddCreationTab(${1:string name}, ${2:function function}, ${3:string material = icon16/exclamation.png}, ${4:number order = 1000}, ${5:string tooltip = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddCreationTab(name, function, material, order, tooltip)"
    },
    {
      "trigger": "spawnmenu.AddPropCategory",
      "contents": "spawnmenu.AddPropCategory(${1:string classname}, ${2:string name}, ${3:table contents}, ${4:string icon}, ${5:number id = 1000}, ${6:number parentID = 0}, ${7:string needsApp})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddPropCategory(classname, name, contents, icon, id, parentID, needsApp)"
    },
    {
      "trigger": "spawnmenu.AddToolCategory",
      "contents": "spawnmenu.AddToolCategory(${1:string tab}, ${2:string RealName}, ${3:string PrintName})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddToolCategory(tab, RealName, PrintName)"
    },
    {
      "trigger": "spawnmenu.AddToolMenuOption",
      "contents": "spawnmenu.AddToolMenuOption(${1:string tab}, ${2:string category}, ${3:string class}, ${4:string name}, ${5:string cmd}, ${6:string config}, ${7:function cpanel}, ${8:table table = {}})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddToolMenuOption(tab, category, class, name, cmd, config, cpanel, table)"
    },
    {
      "trigger": "spawnmenu.AddToolTab",
      "contents": "spawnmenu.AddToolTab(${1:string name}, ${2:string label = name}, ${3:string icon = icon16/wrench.png})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.AddToolTab(name, label, icon)"
    },
    {
      "trigger": "spawnmenu.ClearToolMenus",
      "contents": "spawnmenu.ClearToolMenus()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.ClearToolMenus()"
    },
    {
      "trigger": "spawnmenu.CreateContentIcon",
      "contents": "spawnmenu.CreateContentIcon(${1:string type}, ${2:Panel parent}, ${3:table data})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.CreateContentIcon(type, parent, data)"
    },
    {
      "trigger": "spawnmenu.DoSaveToTextFiles",
      "contents": "spawnmenu.DoSaveToTextFiles(${1:table spawnlists})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.DoSaveToTextFiles(spawnlists)"
    },
    {
      "trigger": "spawnmenu.GetContentType",
      "contents": "spawnmenu.GetContentType(${1:string contentType})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetContentType(contentType)"
    },
    {
      "trigger": "spawnmenu.GetCreationTabs",
      "contents": "spawnmenu.GetCreationTabs()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetCreationTabs()"
    },
    {
      "trigger": "spawnmenu.GetCustomPropTable",
      "contents": "spawnmenu.GetCustomPropTable()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetCustomPropTable()"
    },
    {
      "trigger": "spawnmenu.GetPropTable",
      "contents": "spawnmenu.GetPropTable()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetPropTable()"
    },
    {
      "trigger": "spawnmenu.GetToolMenu",
      "contents": "spawnmenu.GetToolMenu(${1:string name}, ${2:string label = name}, ${3:string icon = icon16/wrench.png})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetToolMenu(name, label, icon)"
    },
    {
      "trigger": "spawnmenu.GetTools",
      "contents": "spawnmenu.GetTools()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.GetTools()"
    },
    {
      "trigger": "spawnmenu.PopulateFromEngineTextFiles",
      "contents": "spawnmenu.PopulateFromEngineTextFiles()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.PopulateFromEngineTextFiles()"
    },
    {
      "trigger": "spawnmenu.PopulateFromTextFiles",
      "contents": "spawnmenu.PopulateFromTextFiles(${1:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.PopulateFromTextFiles(callback)"
    },
    {
      "trigger": "spawnmenu.SaveToTextFiles",
      "contents": "spawnmenu.SaveToTextFiles(${1:table spawnlists})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.SaveToTextFiles(spawnlists)"
    },
    {
      "trigger": "spawnmenu.SetActiveControlPanel",
      "contents": "spawnmenu.SetActiveControlPanel(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.SetActiveControlPanel(pnl)"
    },
    {
      "trigger": "spawnmenu.SwitchCreationTab",
      "contents": "spawnmenu.SwitchCreationTab(${1:number id})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.SwitchCreationTab(id)"
    },
    {
      "trigger": "spawnmenu.SwitchToolTab",
      "contents": "spawnmenu.SwitchToolTab(${1:number id})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "spawnmenu.SwitchToolTab(id)"
    },
    {
      "trigger": "sql.Begin",
      "contents": "sql.Begin()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.Begin()"
    },
    {
      "trigger": "sql.Commit",
      "contents": "sql.Commit()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.Commit()"
    },
    {
      "trigger": "sql.IndexExists",
      "contents": "sql.IndexExists(${1:string indexName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.IndexExists(indexName)"
    },
    {
      "trigger": "sql.LastError",
      "contents": "sql.LastError()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.LastError()"
    },
    {
      "trigger": "sql.Query",
      "contents": "sql.Query(${1:string query})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.Query(query)"
    },
    {
      "trigger": "sql.QueryRow",
      "contents": "sql.QueryRow(${1:string query}, ${2:number row = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.QueryRow(query, row)"
    },
    {
      "trigger": "sql.QueryValue",
      "contents": "sql.QueryValue(${1:string query})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.QueryValue(query)"
    },
    {
      "trigger": "sql.SQLStr",
      "contents": "sql.SQLStr(${1:string string}, ${2:boolean bNoQuotes = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.SQLStr(string, bNoQuotes)"
    },
    {
      "trigger": "sql.TableExists",
      "contents": "sql.TableExists(${1:string tableName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "sql.TableExists(tableName)"
    },
    {
      "trigger": "steamworks.ApplyAddons",
      "contents": "steamworks.ApplyAddons()",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.ApplyAddons()"
    },
    {
      "trigger": "steamworks.Download",
      "contents": "steamworks.Download(${1:string workshopPreviewID}, ${2:boolean uncompress}, ${3:function resultCallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.Download(workshopPreviewID, uncompress, resultCallback)"
    },
    {
      "trigger": "steamworks.DownloadUGC",
      "contents": "steamworks.DownloadUGC(${1:string workshopID}, ${2:function resultCallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.DownloadUGC(workshopID, resultCallback)"
    },
    {
      "trigger": "steamworks.FileInfo",
      "contents": "steamworks.FileInfo(${1:string workshopItemID}, ${2:function resultCallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.FileInfo(workshopItemID, resultCallback)"
    },
    {
      "trigger": "steamworks.GetList",
      "contents": "steamworks.GetList(${1:string type}, ${2:table tags}, ${3:number offset}, ${4:number numRetrieve}, ${5:number days}, ${6:string userID}, ${7:function resultCallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.GetList(type, tags, offset, numRetrieve, days, userID, resultCallback)"
    },
    {
      "trigger": "steamworks.GetPlayerName",
      "contents": "steamworks.GetPlayerName(${1:string steamID64})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.GetPlayerName(steamID64)"
    },
    {
      "trigger": "steamworks.IsSubscribed",
      "contents": "steamworks.IsSubscribed(${1:string workshopItemID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.IsSubscribed(workshopItemID)"
    },
    {
      "trigger": "steamworks.OpenWorkshop",
      "contents": "steamworks.OpenWorkshop()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.OpenWorkshop()"
    },
    {
      "trigger": "steamworks.Publish",
      "contents": "steamworks.Publish(${1:table tags}, ${2:string filename}, ${3:string image}, ${4:string name}, ${5:string desc})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.Publish(tags, filename, image, name, desc)"
    },
    {
      "trigger": "steamworks.RequestPlayerInfo",
      "contents": "steamworks.RequestPlayerInfo(${1:string steamID64}, ${2:function callback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.RequestPlayerInfo(steamID64, callback)"
    },
    {
      "trigger": "steamworks.SetFileCompleted",
      "contents": "steamworks.SetFileCompleted(${1:string workshopid})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.SetFileCompleted(workshopid)"
    },
    {
      "trigger": "steamworks.SetFilePlayed",
      "contents": "steamworks.SetFilePlayed(${1:string workshopid})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.SetFilePlayed(workshopid)"
    },
    {
      "trigger": "steamworks.SetShouldMountAddon",
      "contents": "steamworks.SetShouldMountAddon(${1:string workshopItemID}, ${2:boolean shouldMount})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.SetShouldMountAddon(workshopItemID, shouldMount)"
    },
    {
      "trigger": "steamworks.ShouldMountAddon",
      "contents": "steamworks.ShouldMountAddon(${1:string workshopItemID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.ShouldMountAddon(workshopItemID)"
    },
    {
      "trigger": "steamworks.Subscribe",
      "contents": "steamworks.Subscribe(${1:string workshopItemID})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.Subscribe(workshopItemID)"
    },
    {
      "trigger": "steamworks.Unsubscribe",
      "contents": "steamworks.Unsubscribe(${1:string workshopItemID})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.Unsubscribe(workshopItemID)"
    },
    {
      "trigger": "steamworks.ViewFile",
      "contents": "steamworks.ViewFile(${1:string workshopItemID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.ViewFile(workshopItemID)"
    },
    {
      "trigger": "steamworks.Vote",
      "contents": "steamworks.Vote(${1:string workshopItemID}, ${2:boolean upOrDown})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.Vote(workshopItemID, upOrDown)"
    },
    {
      "trigger": "steamworks.VoteInfo",
      "contents": "steamworks.VoteInfo(${1:string workshopItemID}, ${2:function resultCallback})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "steamworks.VoteInfo(workshopItemID, resultCallback)"
    },
    {
      "trigger": "string.byte",
      "contents": "string.byte(${1:string string}, ${2:number startPos = 1}, ${3:number endPos = startPos})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.byte(string, startPos, endPos)"
    },
    {
      "trigger": "string.CardinalToOrdinal",
      "contents": "string.CardinalToOrdinal(${1:number input})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.CardinalToOrdinal(input)"
    },
    {
      "trigger": "string.char",
      "contents": "string.char(${1:vararg bytes})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.char(bytes)"
    },
    {
      "trigger": "string.Comma",
      "contents": "string.Comma(${1:number value}, ${2:string separator = ,})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Comma(value, separator)"
    },
    {
      "trigger": "string.dump",
      "contents": "string.dump(${1:function func}, ${2:boolean stripDebugInfo = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.dump(func, stripDebugInfo)"
    },
    {
      "trigger": "string.EndsWith",
      "contents": "string.EndsWith(${1:string str}, ${2:string end})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.EndsWith(str, end)"
    },
    {
      "trigger": "string.Explode",
      "contents": "string.Explode(${1:string separator}, ${2:string str}, ${3:boolean withpattern = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Explode(separator, str, withpattern)"
    },
    {
      "trigger": "string.find",
      "contents": "string.find(${1:string haystack}, ${2:string needle}, ${3:number startPos = 1}, ${4:boolean noPatterns = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.find(haystack, needle, startPos, noPatterns)"
    },
    {
      "trigger": "string.format",
      "contents": "string.format(${1:string format}, ${2:vararg formatParameters})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.format(format, formatParameters)"
    },
    {
      "trigger": "string.FormattedTime",
      "contents": "string.FormattedTime(${1:number float}, ${2:string format = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.FormattedTime(float, format)"
    },
    {
      "trigger": "string.FromColor",
      "contents": "string.FromColor(${1:table color})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.FromColor(color)"
    },
    {
      "trigger": "string.GetChar",
      "contents": "string.GetChar(${1:string str}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.GetChar(str, index)"
    },
    {
      "trigger": "string.GetExtensionFromFilename",
      "contents": "string.GetExtensionFromFilename(${1:string path})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.GetExtensionFromFilename(path)"
    },
    {
      "trigger": "string.GetFileFromFilename",
      "contents": "string.GetFileFromFilename(${1:string path})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.GetFileFromFilename(path)"
    },
    {
      "trigger": "string.GetPathFromFilename",
      "contents": "string.GetPathFromFilename(${1:string path})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.GetPathFromFilename(path)"
    },
    {
      "trigger": "string.gfind",
      "contents": "string.gfind(${1:string data}, ${2:string pattern})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.gfind(data, pattern)"
    },
    {
      "trigger": "string.gmatch",
      "contents": "string.gmatch(${1:string data}, ${2:string pattern})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.gmatch(data, pattern)"
    },
    {
      "trigger": "string.gsub",
      "contents": "string.gsub(${1:string string}, ${2:string pattern}, ${3:string replacement}, ${4:number maxReplaces = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.gsub(string, pattern, replacement, maxReplaces)"
    },
    {
      "trigger": "string.Implode",
      "contents": "string.Implode(${1:string separator}, ${2:table pieces})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Implode(separator, pieces)"
    },
    {
      "trigger": "string.Interpolate",
      "contents": "string.Interpolate(${1:string str}, ${2:table lookuptable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Interpolate(str, lookuptable)"
    },
    {
      "trigger": "string.JavascriptSafe",
      "contents": "string.JavascriptSafe(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.JavascriptSafe(str)"
    },
    {
      "trigger": "string.Left",
      "contents": "string.Left(${1:string str}, ${2:number num})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Left(str, num)"
    },
    {
      "trigger": "string.len",
      "contents": "string.len(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.len(str)"
    },
    {
      "trigger": "string.lower",
      "contents": "string.lower(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.lower(str)"
    },
    {
      "trigger": "string.match",
      "contents": "string.match(${1:string string}, ${2:string pattern}, ${3:number startPosition = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.match(string, pattern, startPosition)"
    },
    {
      "trigger": "string.NiceSize",
      "contents": "string.NiceSize(${1:number bytes})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.NiceSize(bytes)"
    },
    {
      "trigger": "string.NiceTime",
      "contents": "string.NiceTime(${1:number num})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.NiceTime(num)"
    },
    {
      "trigger": "string.PatternSafe",
      "contents": "string.PatternSafe(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.PatternSafe(str)"
    },
    {
      "trigger": "string.rep",
      "contents": "string.rep(${1:string str}, ${2:number repetitions}, ${3:string separator})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.rep(str, repetitions, separator)"
    },
    {
      "trigger": "string.Replace",
      "contents": "string.Replace(${1:string str}, ${2:string find}, ${3:string replace})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Replace(str, find, replace)"
    },
    {
      "trigger": "string.reverse",
      "contents": "string.reverse(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.reverse(str)"
    },
    {
      "trigger": "string.Right",
      "contents": "string.Right(${1:string str}, ${2:number num})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Right(str, num)"
    },
    {
      "trigger": "string.SetChar",
      "contents": "string.SetChar(${1:string InputString}, ${2:number Index}, ${3:string ReplacementChar})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.SetChar(InputString, Index, ReplacementChar)"
    },
    {
      "trigger": "string.Split",
      "contents": "string.Split(${1:string Inputstring}, ${2:string Separator})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Split(Inputstring, Separator)"
    },
    {
      "trigger": "string.StartsWith",
      "contents": "string.StartsWith(${1:string inputStr}, ${2:string start})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.StartsWith(inputStr, start)"
    },
    {
      "trigger": "string.StartWith",
      "contents": "string.StartWith(${1:string inputStr}, ${2:string start})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.StartWith(inputStr, start)"
    },
    {
      "trigger": "string.StripExtension",
      "contents": "string.StripExtension(${1:string path})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.StripExtension(path)"
    },
    {
      "trigger": "string.sub",
      "contents": "string.sub(${1:string string}, ${2:number StartPos}, ${3:number EndPos = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.sub(string, StartPos, EndPos)"
    },
    {
      "trigger": "string.ToColor",
      "contents": "string.ToColor(${1:string Inputstring})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.ToColor(Inputstring)"
    },
    {
      "trigger": "string.ToMinutesSeconds",
      "contents": "string.ToMinutesSeconds(${1:number time})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.ToMinutesSeconds(time)"
    },
    {
      "trigger": "string.ToMinutesSecondsMilliseconds",
      "contents": "string.ToMinutesSecondsMilliseconds(${1:number time})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.ToMinutesSecondsMilliseconds(time)"
    },
    {
      "trigger": "string.ToTable",
      "contents": "string.ToTable(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.ToTable(str)"
    },
    {
      "trigger": "string.Trim",
      "contents": "string.Trim(${1:string Inputstring}, ${2:string Char = %s})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.Trim(Inputstring, Char)"
    },
    {
      "trigger": "string.TrimLeft",
      "contents": "string.TrimLeft(${1:string str}, ${2:string char})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.TrimLeft(str, char)"
    },
    {
      "trigger": "string.TrimRight",
      "contents": "string.TrimRight(${1:string str}, ${2:string char})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.TrimRight(str, char)"
    },
    {
      "trigger": "string.upper",
      "contents": "string.upper(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "string.upper(str)"
    },
    {
      "trigger": "surface.CreateFont",
      "contents": "surface.CreateFont(${1:string fontName}, ${2:table fontData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.CreateFont(fontName, fontData)"
    },
    {
      "trigger": "surface.DisableClipping",
      "contents": "surface.DisableClipping(${1:boolean disable})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DisableClipping(disable)"
    },
    {
      "trigger": "surface.DrawCircle",
      "contents": "surface.DrawCircle(${1:number originX}, ${2:number originY}, ${3:number radius}, ${4:number r}, ${5:number g}, ${6:number b}, ${7:number a = 255})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawCircle(originX, originY, radius, r, g, b, a)"
    },
    {
      "trigger": "surface.DrawLine",
      "contents": "surface.DrawLine(${1:number startX}, ${2:number startY}, ${3:number endX}, ${4:number endY})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawLine(startX, startY, endX, endY)"
    },
    {
      "trigger": "surface.DrawOutlinedRect",
      "contents": "surface.DrawOutlinedRect(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h}, ${5:number thickness = 1})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawOutlinedRect(x, y, w, h, thickness)"
    },
    {
      "trigger": "surface.DrawPoly",
      "contents": "surface.DrawPoly(${1:table vertices})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawPoly(vertices)"
    },
    {
      "trigger": "surface.DrawRect",
      "contents": "surface.DrawRect(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawRect(x, y, width, height)"
    },
    {
      "trigger": "surface.DrawText",
      "contents": "surface.DrawText(${1:string text}, ${2:boolean forceAdditive = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawText(text, forceAdditive)"
    },
    {
      "trigger": "surface.DrawTexturedRect",
      "contents": "surface.DrawTexturedRect(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawTexturedRect(x, y, width, height)"
    },
    {
      "trigger": "surface.DrawTexturedRectRotated",
      "contents": "surface.DrawTexturedRectRotated(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number rotation})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawTexturedRectRotated(x, y, width, height, rotation)"
    },
    {
      "trigger": "surface.DrawTexturedRectUV",
      "contents": "surface.DrawTexturedRectUV(${1:number x}, ${2:number y}, ${3:number width}, ${4:number height}, ${5:number startU}, ${6:number startV}, ${7:number endU}, ${8:number endV})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.DrawTexturedRectUV(x, y, width, height, startU, startV, endU, endV)"
    },
    {
      "trigger": "surface.GetAlphaMultiplier",
      "contents": "surface.GetAlphaMultiplier()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetAlphaMultiplier()"
    },
    {
      "trigger": "surface.GetDrawColor",
      "contents": "surface.GetDrawColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetDrawColor()"
    },
    {
      "trigger": "surface.GetHUDTexture",
      "contents": "surface.GetHUDTexture(${1:string name})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetHUDTexture(name)"
    },
    {
      "trigger": "surface.GetTextColor",
      "contents": "surface.GetTextColor()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextColor()"
    },
    {
      "trigger": "surface.GetTextPos",
      "contents": "surface.GetTextPos()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextPos()"
    },
    {
      "trigger": "surface.GetTextSize",
      "contents": "surface.GetTextSize(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextSize(text)"
    },
    {
      "trigger": "surface.GetTextureID",
      "contents": "surface.GetTextureID(${1:string name/path})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextureID(name/path)"
    },
    {
      "trigger": "surface.GetTextureNameByID",
      "contents": "surface.GetTextureNameByID(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextureNameByID(id)"
    },
    {
      "trigger": "surface.GetTextureSize",
      "contents": "surface.GetTextureSize(${1:number textureID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.GetTextureSize(textureID)"
    },
    {
      "trigger": "surface.PlaySound",
      "contents": "surface.PlaySound(${1:string soundfile})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.PlaySound(soundfile)"
    },
    {
      "trigger": "surface.ScreenHeight",
      "contents": "surface.ScreenHeight()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.ScreenHeight()"
    },
    {
      "trigger": "surface.ScreenWidth",
      "contents": "surface.ScreenWidth()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.ScreenWidth()"
    },
    {
      "trigger": "surface.SetAlphaMultiplier",
      "contents": "surface.SetAlphaMultiplier(${1:number multiplier})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetAlphaMultiplier(multiplier)"
    },
    {
      "trigger": "surface.SetDrawColor",
      "contents": "surface.SetDrawColor(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a = 255})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetDrawColor(r, g, b, a)"
    },
    {
      "trigger": "surface.SetFont",
      "contents": "surface.SetFont(${1:string fontName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetFont(fontName)"
    },
    {
      "trigger": "surface.SetMaterial",
      "contents": "surface.SetMaterial(${1:IMaterial material})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetMaterial(material)"
    },
    {
      "trigger": "surface.SetTextColor",
      "contents": "surface.SetTextColor(${1:number r}, ${2:number g}, ${3:number b}, ${4:number a = 255})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetTextColor(r, g, b, a)"
    },
    {
      "trigger": "surface.SetTextPos",
      "contents": "surface.SetTextPos(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetTextPos(x, y)"
    },
    {
      "trigger": "surface.SetTexture",
      "contents": "surface.SetTexture(${1:number textureID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "surface.SetTexture(textureID)"
    },
    {
      "trigger": "system.AppTime",
      "contents": "system.AppTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.AppTime()"
    },
    {
      "trigger": "system.BatteryPower",
      "contents": "system.BatteryPower()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.BatteryPower()"
    },
    {
      "trigger": "system.FlashWindow",
      "contents": "system.FlashWindow()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.FlashWindow()"
    },
    {
      "trigger": "system.GetCountry",
      "contents": "system.GetCountry()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.GetCountry()"
    },
    {
      "trigger": "system.HasFocus",
      "contents": "system.HasFocus()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.HasFocus()"
    },
    {
      "trigger": "system.IsLinux",
      "contents": "system.IsLinux()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.IsLinux()"
    },
    {
      "trigger": "system.IsOSX",
      "contents": "system.IsOSX()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.IsOSX()"
    },
    {
      "trigger": "system.IsWindowed",
      "contents": "system.IsWindowed()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.IsWindowed()"
    },
    {
      "trigger": "system.IsWindows",
      "contents": "system.IsWindows()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.IsWindows()"
    },
    {
      "trigger": "system.SteamTime",
      "contents": "system.SteamTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.SteamTime()"
    },
    {
      "trigger": "system.UpTime",
      "contents": "system.UpTime()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "system.UpTime()"
    },
    {
      "trigger": "table.Add",
      "contents": "table.Add(${1:table target}, ${2:table source})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Add(target, source)"
    },
    {
      "trigger": "table.ClearKeys",
      "contents": "table.ClearKeys(${1:table table}, ${2:boolean saveKeys = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.ClearKeys(table, saveKeys)"
    },
    {
      "trigger": "table.CollapseKeyValue",
      "contents": "table.CollapseKeyValue(${1:table input})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.CollapseKeyValue(input)"
    },
    {
      "trigger": "table.concat",
      "contents": "table.concat(${1:table tbl}, ${2:string concatenator = \\}, ${3:number startPos = 1}, ${4:number endPos = #tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.concat(tbl, concatenator, startPos, endPos)"
    },
    {
      "trigger": "table.Copy",
      "contents": "table.Copy(${1:table originalTable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Copy(originalTable)"
    },
    {
      "trigger": "table.CopyFromTo",
      "contents": "table.CopyFromTo(${1:table source}, ${2:table target})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.CopyFromTo(source, target)"
    },
    {
      "trigger": "table.Count",
      "contents": "table.Count(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Count(tbl)"
    },
    {
      "trigger": "table.DeSanitise",
      "contents": "table.DeSanitise(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.DeSanitise(tbl)"
    },
    {
      "trigger": "table.Empty",
      "contents": "table.Empty(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Empty(tbl)"
    },
    {
      "trigger": "table.FindNext",
      "contents": "table.FindNext(${1:table tbl}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.FindNext(tbl, value)"
    },
    {
      "trigger": "table.FindPrev",
      "contents": "table.FindPrev(${1:table tbl}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.FindPrev(tbl, value)"
    },
    {
      "trigger": "table.Flip",
      "contents": "table.Flip(${1:table input})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Flip(input)"
    },
    {
      "trigger": "table.ForceInsert",
      "contents": "table.ForceInsert(${1:table tab = {}}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.ForceInsert(tab, value)"
    },
    {
      "trigger": "table.foreach",
      "contents": "table.foreach(${1:table tbl}, ${2:function callback})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.foreach(tbl, callback)"
    },
    {
      "trigger": "table.foreachi",
      "contents": "table.foreachi(${1:table table}, ${2:function func})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.foreachi(table, func)"
    },
    {
      "trigger": "table.GetFirstKey",
      "contents": "table.GetFirstKey(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetFirstKey(tab)"
    },
    {
      "trigger": "table.GetFirstValue",
      "contents": "table.GetFirstValue(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetFirstValue(tab)"
    },
    {
      "trigger": "table.GetKeys",
      "contents": "table.GetKeys(${1:table tabl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetKeys(tabl)"
    },
    {
      "trigger": "table.GetLastKey",
      "contents": "table.GetLastKey(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetLastKey(tab)"
    },
    {
      "trigger": "table.GetLastValue",
      "contents": "table.GetLastValue(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetLastValue(tab)"
    },
    {
      "trigger": "table.getn",
      "contents": "table.getn(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.getn(tbl)"
    },
    {
      "trigger": "table.GetWinningKey",
      "contents": "table.GetWinningKey(${1:table inputTable})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.GetWinningKey(inputTable)"
    },
    {
      "trigger": "table.HasValue",
      "contents": "table.HasValue(${1:table tbl}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.HasValue(tbl, value)"
    },
    {
      "trigger": "table.Inherit",
      "contents": "table.Inherit(${1:table target}, ${2:table base})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Inherit(target, base)"
    },
    {
      "trigger": "table.insert",
      "contents": "table.insert(${1:table tbl}, ${2:number position}, ${3:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.insert(tbl, position, value)"
    },
    {
      "trigger": "table.IsEmpty",
      "contents": "table.IsEmpty(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.IsEmpty(tab)"
    },
    {
      "trigger": "table.IsSequential",
      "contents": "table.IsSequential(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.IsSequential(tab)"
    },
    {
      "trigger": "table.KeyFromValue",
      "contents": "table.KeyFromValue(${1:table tab}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.KeyFromValue(tab, value)"
    },
    {
      "trigger": "table.KeysFromValue",
      "contents": "table.KeysFromValue(${1:table tab}, ${2:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.KeysFromValue(tab, value)"
    },
    {
      "trigger": "table.LowerKeyNames",
      "contents": "table.LowerKeyNames(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.LowerKeyNames(tbl)"
    },
    {
      "trigger": "table.maxn",
      "contents": "table.maxn(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.maxn(tbl)"
    },
    {
      "trigger": "table.MemberValuesFromKey",
      "contents": "table.MemberValuesFromKey(${1:table inputTable}, ${2:any keyName})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.MemberValuesFromKey(inputTable, keyName)"
    },
    {
      "trigger": "table.Merge",
      "contents": "table.Merge(${1:table destination}, ${2:table source})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Merge(destination, source)"
    },
    {
      "trigger": "table.move",
      "contents": "table.move(${1:table sourceTbl}, ${2:number from}, ${3:number to}, ${4:number dest}, ${5:table destTbl = sourceTbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.move(sourceTbl, from, to, dest, destTbl)"
    },
    {
      "trigger": "table.Pack",
      "contents": "table.Pack(${1:vararg items})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Pack(items)"
    },
    {
      "trigger": "table.Random",
      "contents": "table.Random(${1:table haystack})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Random(haystack)"
    },
    {
      "trigger": "table.remove",
      "contents": "table.remove(${1:table tbl}, ${2:number index = #tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.remove(tbl, index)"
    },
    {
      "trigger": "table.RemoveByValue",
      "contents": "table.RemoveByValue(${1:table tbl}, ${2:any val})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.RemoveByValue(tbl, val)"
    },
    {
      "trigger": "table.Reverse",
      "contents": "table.Reverse(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Reverse(tbl)"
    },
    {
      "trigger": "table.Sanitise",
      "contents": "table.Sanitise(${1:table tab})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Sanitise(tab)"
    },
    {
      "trigger": "table.Shuffle",
      "contents": "table.Shuffle(${1:table target})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.Shuffle(target)"
    },
    {
      "trigger": "table.sort",
      "contents": "table.sort(${1:table tbl}, ${2:function sorter})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.sort(tbl, sorter)"
    },
    {
      "trigger": "table.SortByKey",
      "contents": "table.SortByKey(${1:table tab}, ${2:boolean descending = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.SortByKey(tab, descending)"
    },
    {
      "trigger": "table.SortByMember",
      "contents": "table.SortByMember(${1:table tab}, ${2:any memberKey}, ${3:boolean ascending = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.SortByMember(tab, memberKey, ascending)"
    },
    {
      "trigger": "table.SortDesc",
      "contents": "table.SortDesc(${1:table tbl})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.SortDesc(tbl)"
    },
    {
      "trigger": "table.ToString",
      "contents": "table.ToString(${1:table tbl}, ${2:string displayName}, ${3:boolean niceFormatting})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "table.ToString(tbl, displayName, niceFormatting)"
    },
    {
      "trigger": "team.AddScore",
      "contents": "team.AddScore(${1:number index}, ${2:number increment})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.AddScore(index, increment)"
    },
    {
      "trigger": "team.BestAutoJoinTeam",
      "contents": "team.BestAutoJoinTeam()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.BestAutoJoinTeam()"
    },
    {
      "trigger": "team.GetAllTeams",
      "contents": "team.GetAllTeams()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetAllTeams()"
    },
    {
      "trigger": "team.GetClass",
      "contents": "team.GetClass(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetClass(index)"
    },
    {
      "trigger": "team.GetColor",
      "contents": "team.GetColor(${1:number teamIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetColor(teamIndex)"
    },
    {
      "trigger": "team.GetName",
      "contents": "team.GetName(${1:number teamIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetName(teamIndex)"
    },
    {
      "trigger": "team.GetPlayers",
      "contents": "team.GetPlayers(${1:number teamIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetPlayers(teamIndex)"
    },
    {
      "trigger": "team.GetScore",
      "contents": "team.GetScore(${1:number teamIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetScore(teamIndex)"
    },
    {
      "trigger": "team.GetSpawnPoint",
      "contents": "team.GetSpawnPoint(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetSpawnPoint(index)"
    },
    {
      "trigger": "team.GetSpawnPoints",
      "contents": "team.GetSpawnPoints(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.GetSpawnPoints(index)"
    },
    {
      "trigger": "team.Joinable",
      "contents": "team.Joinable(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.Joinable(index)"
    },
    {
      "trigger": "team.NumPlayers",
      "contents": "team.NumPlayers(${1:number teamIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.NumPlayers(teamIndex)"
    },
    {
      "trigger": "team.SetClass",
      "contents": "team.SetClass(${1:number index}, ${2:any classes})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.SetClass(index, classes)"
    },
    {
      "trigger": "team.SetColor",
      "contents": "team.SetColor(${1:number teamIndex}, ${2:table color})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.SetColor(teamIndex, color)"
    },
    {
      "trigger": "team.SetScore",
      "contents": "team.SetScore(${1:number index}, ${2:number score})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.SetScore(index, score)"
    },
    {
      "trigger": "team.SetSpawnPoint",
      "contents": "team.SetSpawnPoint(${1:number index}, ${2:any classes})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.SetSpawnPoint(index, classes)"
    },
    {
      "trigger": "team.SetUp",
      "contents": "team.SetUp(${1:number teamIndex}, ${2:string teamName}, ${3:table teamColor}, ${4:boolean isJoinable = true})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.SetUp(teamIndex, teamName, teamColor, isJoinable)"
    },
    {
      "trigger": "team.TotalDeaths",
      "contents": "team.TotalDeaths(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.TotalDeaths(index)"
    },
    {
      "trigger": "team.TotalFrags",
      "contents": "team.TotalFrags(${1:Entity Entity or number})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.TotalFrags(Entity or number)"
    },
    {
      "trigger": "team.Valid",
      "contents": "team.Valid(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "team.Valid(index)"
    },
    {
      "trigger": "timer.Adjust",
      "contents": "timer.Adjust(${1:any identifier}, ${2:number delay}, ${3:number repetitions = nil}, ${4:function func = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Adjust(identifier, delay, repetitions, func)"
    },
    {
      "trigger": "timer.Check",
      "contents": "timer.Check()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Check()"
    },
    {
      "trigger": "timer.Create",
      "contents": "timer.Create(${1:string identifier}, ${2:number delay}, ${3:number repetitions}, ${4:function func})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Create(identifier, delay, repetitions, func)"
    },
    {
      "trigger": "timer.Destroy",
      "contents": "timer.Destroy(${1:string identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Destroy(identifier)"
    },
    {
      "trigger": "timer.Exists",
      "contents": "timer.Exists(${1:string identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Exists(identifier)"
    },
    {
      "trigger": "timer.Pause",
      "contents": "timer.Pause(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Pause(identifier)"
    },
    {
      "trigger": "timer.Remove",
      "contents": "timer.Remove(${1:string identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Remove(identifier)"
    },
    {
      "trigger": "timer.RepsLeft",
      "contents": "timer.RepsLeft(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.RepsLeft(identifier)"
    },
    {
      "trigger": "timer.Simple",
      "contents": "timer.Simple(${1:number delay}, ${2:function func})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Simple(delay, func)"
    },
    {
      "trigger": "timer.Start",
      "contents": "timer.Start(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Start(identifier)"
    },
    {
      "trigger": "timer.Stop",
      "contents": "timer.Stop(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Stop(identifier)"
    },
    {
      "trigger": "timer.TimeLeft",
      "contents": "timer.TimeLeft(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.TimeLeft(identifier)"
    },
    {
      "trigger": "timer.Toggle",
      "contents": "timer.Toggle(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.Toggle(identifier)"
    },
    {
      "trigger": "timer.UnPause",
      "contents": "timer.UnPause(${1:any identifier})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "timer.UnPause(identifier)"
    },
    {
      "trigger": "umsg.Angle",
      "contents": "umsg.Angle(${1:Angle angle})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Angle(angle)"
    },
    {
      "trigger": "umsg.Bool",
      "contents": "umsg.Bool(${1:boolean bool})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Bool(bool)"
    },
    {
      "trigger": "umsg.Char",
      "contents": "umsg.Char(${1:number char})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Char(char)"
    },
    {
      "trigger": "umsg.End",
      "contents": "umsg.End()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.End()"
    },
    {
      "trigger": "umsg.Entity",
      "contents": "umsg.Entity(${1:Entity entity})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Entity(entity)"
    },
    {
      "trigger": "umsg.Float",
      "contents": "umsg.Float(${1:number float})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Float(float)"
    },
    {
      "trigger": "umsg.Long",
      "contents": "umsg.Long(${1:number int})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Long(int)"
    },
    {
      "trigger": "umsg.PoolString",
      "contents": "umsg.PoolString(${1:string string})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.PoolString(string)"
    },
    {
      "trigger": "umsg.Short",
      "contents": "umsg.Short(${1:number short})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Short(short)"
    },
    {
      "trigger": "umsg.Start",
      "contents": "umsg.Start(${1:string name}, ${2:Player filter})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Start(name, filter)"
    },
    {
      "trigger": "umsg.String",
      "contents": "umsg.String(${1:string string})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.String(string)"
    },
    {
      "trigger": "umsg.Vector",
      "contents": "umsg.Vector(${1:Vector vector})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.Vector(vector)"
    },
    {
      "trigger": "umsg.VectorNormal",
      "contents": "umsg.VectorNormal(${1:Vector normal})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "umsg.VectorNormal(normal)"
    },
    {
      "trigger": "undo.AddEntity",
      "contents": "undo.AddEntity(${1:Entity ent})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.AddEntity(ent)"
    },
    {
      "trigger": "undo.AddFunction",
      "contents": "undo.AddFunction(${1:function func}, ${2:vararg arguments})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.AddFunction(func, arguments)"
    },
    {
      "trigger": "undo.Create",
      "contents": "undo.Create(${1:string name})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.Create(name)"
    },
    {
      "trigger": "undo.Do_Undo",
      "contents": "undo.Do_Undo(${1:table tab})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.Do_Undo(tab)"
    },
    {
      "trigger": "undo.Finish",
      "contents": "undo.Finish(${1:string NiceText})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.Finish(NiceText)"
    },
    {
      "trigger": "undo.GetTable",
      "contents": "undo.GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.GetTable()"
    },
    {
      "trigger": "undo.MakeUIDirty",
      "contents": "undo.MakeUIDirty()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.MakeUIDirty()"
    },
    {
      "trigger": "undo.ReplaceEntity",
      "contents": "undo.ReplaceEntity(${1:Entity from}, ${2:Entity to})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.ReplaceEntity(from, to)"
    },
    {
      "trigger": "undo.SetCustomUndoText",
      "contents": "undo.SetCustomUndoText(${1:string customText})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.SetCustomUndoText(customText)"
    },
    {
      "trigger": "undo.SetPlayer",
      "contents": "undo.SetPlayer(${1:Player ply})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.SetPlayer(ply)"
    },
    {
      "trigger": "undo.SetupUI",
      "contents": "undo.SetupUI()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "undo.SetupUI()"
    },
    {
      "trigger": "usermessage.GetTable",
      "contents": "usermessage.GetTable()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "usermessage.GetTable()"
    },
    {
      "trigger": "usermessage.Hook",
      "contents": "usermessage.Hook(${1:string name}, ${2:function callback}, ${3:vararg preArgs = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "usermessage.Hook(name, callback, preArgs)"
    },
    {
      "trigger": "usermessage.IncomingMessage",
      "contents": "usermessage.IncomingMessage(${1:string name}, ${2:bf_read msg})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "usermessage.IncomingMessage(name, msg)"
    },
    {
      "trigger": "utf8.char",
      "contents": "utf8.char(${1:vararg codepoints})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.char(codepoints)"
    },
    {
      "trigger": "utf8.charpattern",
      "contents": "utf8.charpattern()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.charpattern()"
    },
    {
      "trigger": "utf8.codepoint",
      "contents": "utf8.codepoint(${1:string string}, ${2:number startPos = 1}, ${3:number endPos = 1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.codepoint(string, startPos, endPos)"
    },
    {
      "trigger": "utf8.codes",
      "contents": "utf8.codes(${1:string string})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.codes(string)"
    },
    {
      "trigger": "utf8.force",
      "contents": "utf8.force(${1:string string})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.force(string)"
    },
    {
      "trigger": "utf8.GetChar",
      "contents": "utf8.GetChar(${1:string str}, ${2:number index})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.GetChar(str, index)"
    },
    {
      "trigger": "utf8.len",
      "contents": "utf8.len(${1:string string}, ${2:number startPos = 1}, ${3:number endPos = -1})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.len(string, startPos, endPos)"
    },
    {
      "trigger": "utf8.offset",
      "contents": "utf8.offset(${1:string string}, ${2:number n}, ${3:number startPos = 1 when n>=0, -1 otherwise})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.offset(string, n, startPos)"
    },
    {
      "trigger": "utf8.sub",
      "contents": "utf8.sub(${1:string string}, ${2:number StartPos}, ${3:number EndPos = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "utf8.sub(string, StartPos, EndPos)"
    },
    {
      "trigger": "util.AddNetworkString",
      "contents": "util.AddNetworkString(${1:string str})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.AddNetworkString(str)"
    },
    {
      "trigger": "util.AimVector",
      "contents": "util.AimVector(${1:Angle ViewAngles}, ${2:number ViewFOV}, ${3:number x}, ${4:number y}, ${5:number scrWidth}, ${6:number scrHeight})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.AimVector(ViewAngles, ViewFOV, x, y, scrWidth, scrHeight)"
    },
    {
      "trigger": "util.Base64Decode",
      "contents": "util.Base64Decode(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Base64Decode(str)"
    },
    {
      "trigger": "util.Base64Encode",
      "contents": "util.Base64Encode(${1:string str}, ${2:boolean inline = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Base64Encode(str, inline)"
    },
    {
      "trigger": "util.BlastDamage",
      "contents": "util.BlastDamage(${1:Entity inflictor}, ${2:Entity attacker}, ${3:Vector damageOrigin}, ${4:number damageRadius}, ${5:number damage})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.BlastDamage(inflictor, attacker, damageOrigin, damageRadius, damage)"
    },
    {
      "trigger": "util.BlastDamageInfo",
      "contents": "util.BlastDamageInfo(${1:CTakeDamageInfo dmg}, ${2:Vector damageOrigin}, ${3:number damageRadius})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.BlastDamageInfo(dmg, damageOrigin, damageRadius)"
    },
    {
      "trigger": "util.Compress",
      "contents": "util.Compress(${1:string str})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Compress(str)"
    },
    {
      "trigger": "util.CRC",
      "contents": "util.CRC(${1:string stringToChecksum})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.CRC(stringToChecksum)"
    },
    {
      "trigger": "util.DateStamp",
      "contents": "util.DateStamp()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.DateStamp()"
    },
    {
      "trigger": "util.Decal",
      "contents": "util.Decal(${1:string name}, ${2:Vector start}, ${3:Vector end}, ${4:Entity filter = NULL})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Decal(name, start, end, filter)"
    },
    {
      "trigger": "util.DecalEx",
      "contents": "util.DecalEx(${1:IMaterial material}, ${2:Entity ent}, ${3:Vector position}, ${4:Vector normal}, ${5:table color}, ${6:number w}, ${7:number h})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.DecalEx(material, ent, position, normal, color, w, h)"
    },
    {
      "trigger": "util.DecalMaterial",
      "contents": "util.DecalMaterial(${1:string decalName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.DecalMaterial(decalName)"
    },
    {
      "trigger": "util.Decompress",
      "contents": "util.Decompress(${1:string compressedString}, ${2:number maxSize = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Decompress(compressedString, maxSize)"
    },
    {
      "trigger": "util.DistanceToLine",
      "contents": "util.DistanceToLine(${1:Vector lineStart}, ${2:Vector lineEnd}, ${3:Vector pointPos})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.DistanceToLine(lineStart, lineEnd, pointPos)"
    },
    {
      "trigger": "util.Effect",
      "contents": "util.Effect(${1:string effectName}, ${2:CEffectData effectData}, ${3:boolean allowOverride = true}, ${4:any ignorePredictionOrRecipientFilter = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Effect(effectName, effectData, allowOverride, ignorePredictionOrRecipientFilter)"
    },
    {
      "trigger": "util.FilterText",
      "contents": "util.FilterText(${1:string str}, ${2:number context = TEXT_FILTER_UNKNOWN}, ${3:Player player = nil})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.FilterText(str, context, player)"
    },
    {
      "trigger": "util.FullPathToRelative_Menu",
      "contents": "util.FullPathToRelative_Menu(${1:string gma}, ${2:string gamePath = GAME})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.FullPathToRelative_Menu(gma, gamePath)"
    },
    {
      "trigger": "util.GetModelInfo",
      "contents": "util.GetModelInfo(${1:string mdl})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetModelInfo(mdl)"
    },
    {
      "trigger": "util.GetModelMeshes",
      "contents": "util.GetModelMeshes(${1:string model}, ${2:number lod = 0}, ${3:number bodygroupMask = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetModelMeshes(model, lod, bodygroupMask)"
    },
    {
      "trigger": "util.GetPData",
      "contents": "util.GetPData(${1:string steamID}, ${2:string name}, ${3:string default})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetPData(steamID, name, default)"
    },
    {
      "trigger": "util.GetPixelVisibleHandle",
      "contents": "util.GetPixelVisibleHandle()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetPixelVisibleHandle()"
    },
    {
      "trigger": "util.GetPlayerTrace",
      "contents": "util.GetPlayerTrace(${1:Player ply}, ${2:Vector dir = ply:GetAimVector()})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetPlayerTrace(ply, dir)"
    },
    {
      "trigger": "util.GetSunInfo",
      "contents": "util.GetSunInfo()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetSunInfo()"
    },
    {
      "trigger": "util.GetSurfaceData",
      "contents": "util.GetSurfaceData(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetSurfaceData(id)"
    },
    {
      "trigger": "util.GetSurfaceIndex",
      "contents": "util.GetSurfaceIndex(${1:string surfaceName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetSurfaceIndex(surfaceName)"
    },
    {
      "trigger": "util.GetSurfacePropName",
      "contents": "util.GetSurfacePropName(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetSurfacePropName(id)"
    },
    {
      "trigger": "util.GetUserGroups",
      "contents": "util.GetUserGroups()",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.GetUserGroups()"
    },
    {
      "trigger": "util.IntersectRayWithOBB",
      "contents": "util.IntersectRayWithOBB(${1:Vector rayStart}, ${2:Vector rayDelta}, ${3:Vector boxOrigin}, ${4:Angle boxAngles}, ${5:Vector boxMins}, ${6:Vector boxMaxs})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IntersectRayWithOBB(rayStart, rayDelta, boxOrigin, boxAngles, boxMins, boxMaxs)"
    },
    {
      "trigger": "util.IntersectRayWithPlane",
      "contents": "util.IntersectRayWithPlane(${1:Vector rayOrigin}, ${2:Vector rayDirection}, ${3:Vector planePosition}, ${4:Vector planeNormal})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IntersectRayWithPlane(rayOrigin, rayDirection, planePosition, planeNormal)"
    },
    {
      "trigger": "util.IntersectRayWithSphere",
      "contents": "util.IntersectRayWithSphere(${1:Vector rayOrigin}, ${2:Vector rayDelta}, ${3:Vector shperePosition}, ${4:number sphereRadius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IntersectRayWithSphere(rayOrigin, rayDelta, shperePosition, sphereRadius)"
    },
    {
      "trigger": "util.IsBinaryModuleInstalled",
      "contents": "util.IsBinaryModuleInstalled(${1:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsBinaryModuleInstalled(name)"
    },
    {
      "trigger": "util.IsBoxIntersectingSphere",
      "contents": "util.IsBoxIntersectingSphere(${1:Vector boxMin}, ${2:Vector boxMax}, ${3:Vector shpere2Position}, ${4:number sphere2Radius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsBoxIntersectingSphere(boxMin, boxMax, shpere2Position, sphere2Radius)"
    },
    {
      "trigger": "util.IsInWorld",
      "contents": "util.IsInWorld(${1:Vector position})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsInWorld(position)"
    },
    {
      "trigger": "util.IsModelLoaded",
      "contents": "util.IsModelLoaded(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsModelLoaded(modelName)"
    },
    {
      "trigger": "util.IsOBBIntersectingOBB",
      "contents": "util.IsOBBIntersectingOBB(${1:Vector box1Origin}, ${2:Angle box1Angles}, ${3:Vector box1Mins}, ${4:Vector box1Maxs}, ${5:Vector box2Origin}, ${6:Angle box2Angles}, ${7:Vector box2Mins}, ${8:Vector box2Maxs}, ${9:number tolerance})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsOBBIntersectingOBB(box1Origin, box1Angles, box1Mins, box1Maxs, box2Origin, box2Angles, box2Mins, box2Maxs, tolerance)"
    },
    {
      "trigger": "util.IsPointInCone",
      "contents": "util.IsPointInCone(${1:Vector point}, ${2:Vector coneOrigin}, ${3:Vector coneAxis}, ${4:number coneSine}, ${5:number coneLength})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsPointInCone(point, coneOrigin, coneAxis, coneSine, coneLength)"
    },
    {
      "trigger": "util.IsSkyboxVisibleFromPoint",
      "contents": "util.IsSkyboxVisibleFromPoint(${1:Vector position})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsSkyboxVisibleFromPoint(position)"
    },
    {
      "trigger": "util.IsSphereIntersectingCone",
      "contents": "util.IsSphereIntersectingCone(${1:Vector sphereCenter}, ${2:number sphereRadius}, ${3:Vector coneOrigin}, ${4:Vector coneAxis}, ${5:number coneSine}, ${6:number coneCosine})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsSphereIntersectingCone(sphereCenter, sphereRadius, coneOrigin, coneAxis, coneSine, coneCosine)"
    },
    {
      "trigger": "util.IsSphereIntersectingSphere",
      "contents": "util.IsSphereIntersectingSphere(${1:Vector sphere1Position}, ${2:number sphere1Radius}, ${3:Vector sphere2Position}, ${4:number sphere2Radius})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsSphereIntersectingSphere(sphere1Position, sphere1Radius, sphere2Position, sphere2Radius)"
    },
    {
      "trigger": "util.IsValidModel",
      "contents": "util.IsValidModel(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsValidModel(modelName)"
    },
    {
      "trigger": "util.IsValidPhysicsObject",
      "contents": "util.IsValidPhysicsObject(${1:Entity ent}, ${2:number physobj})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsValidPhysicsObject(ent, physobj)"
    },
    {
      "trigger": "util.IsValidProp",
      "contents": "util.IsValidProp(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsValidProp(modelName)"
    },
    {
      "trigger": "util.IsValidRagdoll",
      "contents": "util.IsValidRagdoll(${1:string ragdollName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.IsValidRagdoll(ragdollName)"
    },
    {
      "trigger": "util.JSONToTable",
      "contents": "util.JSONToTable(${1:string json}, ${2:boolean ignoreLimits = false}, ${3:boolean ignoreConversions = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.JSONToTable(json, ignoreLimits, ignoreConversions)"
    },
    {
      "trigger": "util.KeyValuesToTable",
      "contents": "util.KeyValuesToTable(${1:string keyValues}, ${2:boolean usesEscapeSequences = false}, ${3:boolean preserveKeyCase = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.KeyValuesToTable(keyValues, usesEscapeSequences, preserveKeyCase)"
    },
    {
      "trigger": "util.KeyValuesToTablePreserveOrder",
      "contents": "util.KeyValuesToTablePreserveOrder(${1:string keyvals}, ${2:boolean usesEscapeSequences = false}, ${3:boolean preserveKeyCase = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.KeyValuesToTablePreserveOrder(keyvals, usesEscapeSequences, preserveKeyCase)"
    },
    {
      "trigger": "util.LocalToWorld",
      "contents": "util.LocalToWorld(${1:Entity ent}, ${2:Vector lpos}, ${3:number bonenum})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.LocalToWorld(ent, lpos, bonenum)"
    },
    {
      "trigger": "util.MD5",
      "contents": "util.MD5(${1:string stringToHash})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.MD5(stringToHash)"
    },
    {
      "trigger": "util.NetworkIDToString",
      "contents": "util.NetworkIDToString(${1:number stringTableID})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.NetworkIDToString(stringTableID)"
    },
    {
      "trigger": "util.NetworkStringToID",
      "contents": "util.NetworkStringToID(${1:string networkString})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.NetworkStringToID(networkString)"
    },
    {
      "trigger": "util.NiceFloat",
      "contents": "util.NiceFloat(${1:number float})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.NiceFloat(float)"
    },
    {
      "trigger": "util.ParticleTracer",
      "contents": "util.ParticleTracer(${1:string name}, ${2:Vector startPos}, ${3:Vector endPos}, ${4:boolean doWhiz})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.ParticleTracer(name, startPos, endPos, doWhiz)"
    },
    {
      "trigger": "util.ParticleTracerEx",
      "contents": "util.ParticleTracerEx(${1:string name}, ${2:Vector startPos}, ${3:Vector endPos}, ${4:boolean doWhiz}, ${5:number entityIndex}, ${6:number attachmentIndex})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.ParticleTracerEx(name, startPos, endPos, doWhiz, entityIndex, attachmentIndex)"
    },
    {
      "trigger": "util.PixelVisible",
      "contents": "util.PixelVisible(${1:Vector position}, ${2:number radius}, ${3:pixelvis_handle_t PixVis})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.PixelVisible(position, radius, PixVis)"
    },
    {
      "trigger": "util.PointContents",
      "contents": "util.PointContents(${1:Vector position})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.PointContents(position)"
    },
    {
      "trigger": "util.PrecacheModel",
      "contents": "util.PrecacheModel(${1:string modelName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.PrecacheModel(modelName)"
    },
    {
      "trigger": "util.PrecacheSound",
      "contents": "util.PrecacheSound(${1:string soundName})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.PrecacheSound(soundName)"
    },
    {
      "trigger": "util.QuickTrace",
      "contents": "util.QuickTrace(${1:Vector origin}, ${2:Vector dir}, ${3:Entity filter = nil})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.QuickTrace(origin, dir, filter)"
    },
    {
      "trigger": "util.RelativePathToFull_Menu",
      "contents": "util.RelativePathToFull_Menu(${1:string gma}, ${2:string gamePath = GAME})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.RelativePathToFull_Menu(gma, gamePath)"
    },
    {
      "trigger": "util.RelativePathToGMA_Menu",
      "contents": "util.RelativePathToGMA_Menu(${1:string gma})",
      "annotation": "Menu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.RelativePathToGMA_Menu(gma)"
    },
    {
      "trigger": "util.RemovePData",
      "contents": "util.RemovePData(${1:string steamID}, ${2:string name})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.RemovePData(steamID, name)"
    },
    {
      "trigger": "util.ScreenShake",
      "contents": "util.ScreenShake(${1:Vector pos}, ${2:number amplitude}, ${3:number frequency}, ${4:number duration}, ${5:number radius}, ${6:boolean airshake = false})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.ScreenShake(pos, amplitude, frequency, duration, radius, airshake)"
    },
    {
      "trigger": "util.SetPData",
      "contents": "util.SetPData(${1:string steamID}, ${2:string name}, ${3:any value})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SetPData(steamID, name, value)"
    },
    {
      "trigger": "util.SHA1",
      "contents": "util.SHA1(${1:string stringToHash})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SHA1(stringToHash)"
    },
    {
      "trigger": "util.SHA256",
      "contents": "util.SHA256(${1:string stringToHash})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SHA256(stringToHash)"
    },
    {
      "trigger": "util.SharedRandom",
      "contents": "util.SharedRandom(${1:string uniqueName}, ${2:number min}, ${3:number max}, ${4:number additionalSeed = 0})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SharedRandom(uniqueName, min, max, additionalSeed)"
    },
    {
      "trigger": "util.SpriteTrail",
      "contents": "util.SpriteTrail(${1:Entity ent}, ${2:number attachmentID}, ${3:table color}, ${4:boolean additive}, ${5:number startWidth}, ${6:number endWidth}, ${7:number lifetime}, ${8:number textureRes}, ${9:string texture})",
      "annotation": "Server",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SpriteTrail(ent, attachmentID, color, additive, startWidth, endWidth, lifetime, textureRes, texture)"
    },
    {
      "trigger": "util.Stack",
      "contents": "util.Stack()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Stack()"
    },
    {
      "trigger": "util.SteamIDFrom64",
      "contents": "util.SteamIDFrom64(${1:string id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SteamIDFrom64(id)"
    },
    {
      "trigger": "util.SteamIDTo64",
      "contents": "util.SteamIDTo64(${1:string id})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.SteamIDTo64(id)"
    },
    {
      "trigger": "util.StringToType",
      "contents": "util.StringToType(${1:string str}, ${2:string typename})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.StringToType(str, typename)"
    },
    {
      "trigger": "util.TableToJSON",
      "contents": "util.TableToJSON(${1:table table}, ${2:boolean prettyPrint = false})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TableToJSON(table, prettyPrint)"
    },
    {
      "trigger": "util.TableToKeyValues",
      "contents": "util.TableToKeyValues(${1:table table}, ${2:string rootKey = TableToKeyValues})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TableToKeyValues(table, rootKey)"
    },
    {
      "trigger": "util.Timer",
      "contents": "util.Timer(${1:number startdelay = 0})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.Timer(startdelay)"
    },
    {
      "trigger": "util.TimerCycle",
      "contents": "util.TimerCycle()",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TimerCycle()"
    },
    {
      "trigger": "util.tobool",
      "contents": "util.tobool(${1:any input})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.tobool(input)"
    },
    {
      "trigger": "util.TraceEntity",
      "contents": "util.TraceEntity(${1:table tracedata}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TraceEntity(tracedata, ent)"
    },
    {
      "trigger": "util.TraceEntityHull",
      "contents": "util.TraceEntityHull(${1:table tracedata}, ${2:Entity ent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TraceEntityHull(tracedata, ent)"
    },
    {
      "trigger": "util.TraceHull",
      "contents": "util.TraceHull(${1:table TraceData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TraceHull(TraceData)"
    },
    {
      "trigger": "util.TraceLine",
      "contents": "util.TraceLine(${1:table TraceData})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TraceLine(TraceData)"
    },
    {
      "trigger": "util.TypeToString",
      "contents": "util.TypeToString(${1:any input})",
      "annotation": "SharedMenu",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.TypeToString(input)"
    },
    {
      "trigger": "util.worldpicker.Active",
      "contents": "util.worldpicker.Active()",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.worldpicker.Active()"
    },
    {
      "trigger": "util.worldpicker.Finish",
      "contents": "util.worldpicker.Finish(${1:table tr})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.worldpicker.Finish(tr)"
    },
    {
      "trigger": "util.worldpicker.Start",
      "contents": "util.worldpicker.Start(${1:function callback})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "util.worldpicker.Start(callback)"
    },
    {
      "trigger": "vgui.Create",
      "contents": "vgui.Create(${1:string classname}, ${2:Panel parent = nil}, ${3:string name = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.Create(classname, parent, name)"
    },
    {
      "trigger": "vgui.CreateFromTable",
      "contents": "vgui.CreateFromTable(${1:table metatable}, ${2:Panel parent = nil}, ${3:string name = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.CreateFromTable(metatable, parent, name)"
    },
    {
      "trigger": "vgui.CreateX",
      "contents": "vgui.CreateX(${1:string class}, ${2:Panel parent = nil}, ${3:string name = nil})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.CreateX(class, parent, name)"
    },
    {
      "trigger": "vgui.CursorVisible",
      "contents": "vgui.CursorVisible()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.CursorVisible()"
    },
    {
      "trigger": "vgui.Exists",
      "contents": "vgui.Exists(${1:string Panelname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.Exists(Panelname)"
    },
    {
      "trigger": "vgui.FocusedHasParent",
      "contents": "vgui.FocusedHasParent(${1:Panel parent})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.FocusedHasParent(parent)"
    },
    {
      "trigger": "vgui.GetControlTable",
      "contents": "vgui.GetControlTable(${1:string Panelname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.GetControlTable(Panelname)"
    },
    {
      "trigger": "vgui.GetHoveredPanel",
      "contents": "vgui.GetHoveredPanel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.GetHoveredPanel()"
    },
    {
      "trigger": "vgui.GetKeyboardFocus",
      "contents": "vgui.GetKeyboardFocus()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.GetKeyboardFocus()"
    },
    {
      "trigger": "vgui.GetWorldPanel",
      "contents": "vgui.GetWorldPanel()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.GetWorldPanel()"
    },
    {
      "trigger": "vgui.IsHoveringWorld",
      "contents": "vgui.IsHoveringWorld()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.IsHoveringWorld()"
    },
    {
      "trigger": "vgui.Register",
      "contents": "vgui.Register(${1:string classname}, ${2:table panelTable}, ${3:string baseName = Panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.Register(classname, panelTable, baseName)"
    },
    {
      "trigger": "vgui.RegisterFile",
      "contents": "vgui.RegisterFile(${1:string file})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.RegisterFile(file)"
    },
    {
      "trigger": "vgui.RegisterTable",
      "contents": "vgui.RegisterTable(${1:table panel}, ${2:string base = Panel})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "vgui.RegisterTable(panel, base)"
    },
    {
      "trigger": "video.Record",
      "contents": "video.Record(${1:table config})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "video.Record(config)"
    },
    {
      "trigger": "weapons.Get",
      "contents": "weapons.Get(${1:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.Get(classname)"
    },
    {
      "trigger": "weapons.GetList",
      "contents": "weapons.GetList()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.GetList()"
    },
    {
      "trigger": "weapons.GetStored",
      "contents": "weapons.GetStored(${1:string weapon_class})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.GetStored(weapon_class)"
    },
    {
      "trigger": "weapons.IsBasedOn",
      "contents": "weapons.IsBasedOn(${1:string name}, ${2:string base})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.IsBasedOn(name, base)"
    },
    {
      "trigger": "weapons.OnLoaded",
      "contents": "weapons.OnLoaded()",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.OnLoaded()"
    },
    {
      "trigger": "weapons.Register",
      "contents": "weapons.Register(${1:table swep_table}, ${2:string classname})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "weapons.Register(swep_table, classname)"
    },
    {
      "trigger": "widgets.PlayerTick",
      "contents": "widgets.PlayerTick(${1:Player ply}, ${2:CMoveData mv})",
      "annotation": "Shared",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "widgets.PlayerTick(ply, mv)"
    },
    {
      "trigger": "widgets.RenderMe",
      "contents": "widgets.RenderMe(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "function",
        "f",
        "Function"
      ],
      "details": "widgets.RenderMe(ent)"
    },
    {
      "trigger": "EndTouch",
      "contents": "EndTouch",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:EndTouch()"
    },
    {
      "trigger": "GetTracerShootPos",
      "contents": "GetTracerShootPos",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:GetTracerShootPos(pos, ent, attachment)"
    },
    {
      "trigger": "Init",
      "contents": "Init",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:Init(effectData)"
    },
    {
      "trigger": "PhysicsCollide",
      "contents": "PhysicsCollide",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:PhysicsCollide(colData, collider)"
    },
    {
      "trigger": "Render",
      "contents": "Render",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:Render()"
    },
    {
      "trigger": "StartTouch",
      "contents": "StartTouch",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:StartTouch()"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:Think()"
    },
    {
      "trigger": "Touch",
      "contents": "Touch",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "EFFECT:Touch()"
    },
    {
      "trigger": "AcceptInput",
      "contents": "AcceptInput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:AcceptInput(inputName, activator, caller, data)"
    },
    {
      "trigger": "AddOutputFromAcceptInput",
      "contents": "AddOutputFromAcceptInput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:AddOutputFromAcceptInput(name, data)"
    },
    {
      "trigger": "AddOutputFromKeyValue",
      "contents": "AddOutputFromKeyValue",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:AddOutputFromKeyValue(key, value)"
    },
    {
      "trigger": "CalcAbsolutePosition",
      "contents": "CalcAbsolutePosition",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:CalcAbsolutePosition(pos, ang)"
    },
    {
      "trigger": "CanProperty",
      "contents": "CanProperty",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:CanProperty(ply, property)"
    },
    {
      "trigger": "CanTool",
      "contents": "CanTool",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:CanTool(ply, tr, toolname, tool, button)"
    },
    {
      "trigger": "CreateSchedulesInternal",
      "contents": "CreateSchedulesInternal",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:CreateSchedulesInternal()"
    },
    {
      "trigger": "DoImpactEffect",
      "contents": "DoImpactEffect",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:DoImpactEffect(tr, damageType)"
    },
    {
      "trigger": "DoingEngineSchedule",
      "contents": "DoingEngineSchedule",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:DoingEngineSchedule()"
    },
    {
      "trigger": "DoSchedule",
      "contents": "DoSchedule",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:DoSchedule(sched)"
    },
    {
      "trigger": "Draw",
      "contents": "Draw",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:Draw(flags)"
    },
    {
      "trigger": "DrawTranslucent",
      "contents": "DrawTranslucent",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:DrawTranslucent(flags)"
    },
    {
      "trigger": "EndTouch",
      "contents": "EndTouch",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:EndTouch(entity)"
    },
    {
      "trigger": "EngineScheduleFinish",
      "contents": "EngineScheduleFinish",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:EngineScheduleFinish()"
    },
    {
      "trigger": "ExpressionFinished",
      "contents": "ExpressionFinished",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:ExpressionFinished(strExp)"
    },
    {
      "trigger": "FireAnimationEvent",
      "contents": "FireAnimationEvent",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:FireAnimationEvent(pos, ang, event, name)"
    },
    {
      "trigger": "GetAttackSpread",
      "contents": "GetAttackSpread",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GetAttackSpread(wep, target)"
    },
    {
      "trigger": "GetRelationship",
      "contents": "GetRelationship",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GetRelationship(ent)"
    },
    {
      "trigger": "GetRenderMesh",
      "contents": "GetRenderMesh",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GetRenderMesh()"
    },
    {
      "trigger": "GetShadowCastDirection",
      "contents": "GetShadowCastDirection",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GetShadowCastDirection(type)"
    },
    {
      "trigger": "GetSoundInterests",
      "contents": "GetSoundInterests",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GetSoundInterests()"
    },
    {
      "trigger": "GravGunPickupAllowed",
      "contents": "GravGunPickupAllowed",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GravGunPickupAllowed(ply)"
    },
    {
      "trigger": "GravGunPunt",
      "contents": "GravGunPunt",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:GravGunPunt(ply)"
    },
    {
      "trigger": "HandleAnimEvent",
      "contents": "HandleAnimEvent",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:HandleAnimEvent(event, eventTime, cycle, type, options)"
    },
    {
      "trigger": "ImpactTrace",
      "contents": "ImpactTrace",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:ImpactTrace(traceResult, damageType, customImpactName)"
    },
    {
      "trigger": "Initialize",
      "contents": "Initialize",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:Initialize()"
    },
    {
      "trigger": "IsJumpLegal",
      "contents": "IsJumpLegal",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:IsJumpLegal(startPos, apex, endPos)"
    },
    {
      "trigger": "KeyValue",
      "contents": "KeyValue",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:KeyValue(key, value)"
    },
    {
      "trigger": "NextTask",
      "contents": "NextTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:NextTask(sched)"
    },
    {
      "trigger": "OnChangeActiveWeapon",
      "contents": "OnChangeActiveWeapon",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnChangeActiveWeapon(old, new)"
    },
    {
      "trigger": "OnChangeActivity",
      "contents": "OnChangeActivity",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnChangeActivity(act)"
    },
    {
      "trigger": "OnCondition",
      "contents": "OnCondition",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnCondition(conditionID)"
    },
    {
      "trigger": "OnDuplicated",
      "contents": "OnDuplicated",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnDuplicated(entTable)"
    },
    {
      "trigger": "OnEntityCopyTableFinish",
      "contents": "OnEntityCopyTableFinish",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnEntityCopyTableFinish(data)"
    },
    {
      "trigger": "OnMovementComplete",
      "contents": "OnMovementComplete",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnMovementComplete()"
    },
    {
      "trigger": "OnMovementFailed",
      "contents": "OnMovementFailed",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnMovementFailed()"
    },
    {
      "trigger": "OnReloaded",
      "contents": "OnReloaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnReloaded()"
    },
    {
      "trigger": "OnRemove",
      "contents": "OnRemove",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnRemove(fullUpdate)"
    },
    {
      "trigger": "OnRestore",
      "contents": "OnRestore",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnRestore()"
    },
    {
      "trigger": "OnTakeDamage",
      "contents": "OnTakeDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnTakeDamage(damage)"
    },
    {
      "trigger": "OnTaskComplete",
      "contents": "OnTaskComplete",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnTaskComplete()"
    },
    {
      "trigger": "OnTaskFailed",
      "contents": "OnTaskFailed",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:OnTaskFailed(failCode, failReason)"
    },
    {
      "trigger": "PassesTriggerFilters",
      "contents": "PassesTriggerFilters",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PassesTriggerFilters(ent)"
    },
    {
      "trigger": "PhysicsCollide",
      "contents": "PhysicsCollide",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PhysicsCollide(colData, collider)"
    },
    {
      "trigger": "PhysicsSimulate",
      "contents": "PhysicsSimulate",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PhysicsSimulate(phys, deltaTime)"
    },
    {
      "trigger": "PhysicsUpdate",
      "contents": "PhysicsUpdate",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PhysicsUpdate(phys)"
    },
    {
      "trigger": "PostEntityCopy",
      "contents": "PostEntityCopy",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PostEntityCopy()"
    },
    {
      "trigger": "PostEntityPaste",
      "contents": "PostEntityPaste",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PostEntityPaste(ply, ent, createdEntities)"
    },
    {
      "trigger": "PreEntityCopy",
      "contents": "PreEntityCopy",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:PreEntityCopy()"
    },
    {
      "trigger": "RenderOverride",
      "contents": "RenderOverride",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:RenderOverride(flags)"
    },
    {
      "trigger": "RunAI",
      "contents": "RunAI",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:RunAI()"
    },
    {
      "trigger": "RunEngineTask",
      "contents": "RunEngineTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:RunEngineTask(taskID, taskData)"
    },
    {
      "trigger": "RunTask",
      "contents": "RunTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:RunTask(task)"
    },
    {
      "trigger": "ScheduleFinished",
      "contents": "ScheduleFinished",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:ScheduleFinished()"
    },
    {
      "trigger": "SelectSchedule",
      "contents": "SelectSchedule",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:SelectSchedule(iNPCState)"
    },
    {
      "trigger": "SetAutomaticFrameAdvance",
      "contents": "SetAutomaticFrameAdvance",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:SetAutomaticFrameAdvance(enable)"
    },
    {
      "trigger": "SetTask",
      "contents": "SetTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:SetTask(task)"
    },
    {
      "trigger": "SetupDataTables",
      "contents": "SetupDataTables",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:SetupDataTables()"
    },
    {
      "trigger": "SpawnFunction",
      "contents": "SpawnFunction",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:SpawnFunction(ply, tr, ClassName)"
    },
    {
      "trigger": "StartEngineSchedule",
      "contents": "StartEngineSchedule",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StartEngineSchedule(scheduleID)"
    },
    {
      "trigger": "StartEngineTask",
      "contents": "StartEngineTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StartEngineTask(taskID, TaskData)"
    },
    {
      "trigger": "StartSchedule",
      "contents": "StartSchedule",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StartSchedule(sched)"
    },
    {
      "trigger": "StartTask",
      "contents": "StartTask",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StartTask(task)"
    },
    {
      "trigger": "StartTouch",
      "contents": "StartTouch",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StartTouch(entity)"
    },
    {
      "trigger": "StoreOutput",
      "contents": "StoreOutput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:StoreOutput(name, info)"
    },
    {
      "trigger": "TaskFinished",
      "contents": "TaskFinished",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:TaskFinished()"
    },
    {
      "trigger": "TaskTime",
      "contents": "TaskTime",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:TaskTime()"
    },
    {
      "trigger": "TestCollision",
      "contents": "TestCollision",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:TestCollision(startpos, delta, isbox, extents, mask)"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:Think()"
    },
    {
      "trigger": "Touch",
      "contents": "Touch",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:Touch(entity)"
    },
    {
      "trigger": "TranslateActivity",
      "contents": "TranslateActivity",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:TranslateActivity(act)"
    },
    {
      "trigger": "TriggerOutput",
      "contents": "TriggerOutput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:TriggerOutput(output, activator, data)"
    },
    {
      "trigger": "UpdateTransmitState",
      "contents": "UpdateTransmitState",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:UpdateTransmitState()"
    },
    {
      "trigger": "Use",
      "contents": "Use",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "ENTITY:Use(activator, caller, useType, value)"
    },
    {
      "trigger": "AcceptInput",
      "contents": "AcceptInput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:AcceptInput(ent, input, activator, caller, value)"
    },
    {
      "trigger": "AddDeathNotice",
      "contents": "AddDeathNotice",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:AddDeathNotice(attacker, attackerTeam, inflictor, victim, victimTeam)"
    },
    {
      "trigger": "AdjustMouseSensitivity",
      "contents": "AdjustMouseSensitivity",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:AdjustMouseSensitivity(defaultSensitivity)"
    },
    {
      "trigger": "AllowPlayerPickup",
      "contents": "AllowPlayerPickup",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:AllowPlayerPickup(ply, ent)"
    },
    {
      "trigger": "CalcMainActivity",
      "contents": "CalcMainActivity",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CalcMainActivity(ply, vel)"
    },
    {
      "trigger": "CalcVehicleView",
      "contents": "CalcVehicleView",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CalcVehicleView(veh, ply, view)"
    },
    {
      "trigger": "CalcView",
      "contents": "CalcView",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CalcView(ply, origin, angles, fov, znear, zfar)"
    },
    {
      "trigger": "CalcViewModelView",
      "contents": "CalcViewModelView",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CalcViewModelView(wep, vm, oldPos, oldAng, pos, ang)"
    },
    {
      "trigger": "CanCreateUndo",
      "contents": "CanCreateUndo",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanCreateUndo(ply, undo)"
    },
    {
      "trigger": "CanEditVariable",
      "contents": "CanEditVariable",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanEditVariable(ent, ply, key, val, editor)"
    },
    {
      "trigger": "CanExitVehicle",
      "contents": "CanExitVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanExitVehicle(veh, ply)"
    },
    {
      "trigger": "CanPlayerEnterVehicle",
      "contents": "CanPlayerEnterVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanPlayerEnterVehicle(player, vehicle, role)"
    },
    {
      "trigger": "CanPlayerSuicide",
      "contents": "CanPlayerSuicide",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanPlayerSuicide(player)"
    },
    {
      "trigger": "CanPlayerUnfreeze",
      "contents": "CanPlayerUnfreeze",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanPlayerUnfreeze(player, entity, phys)"
    },
    {
      "trigger": "CanProperty",
      "contents": "CanProperty",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanProperty(ply, property, ent)"
    },
    {
      "trigger": "CanUndo",
      "contents": "CanUndo",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CanUndo(ply, undo)"
    },
    {
      "trigger": "CaptureVideo",
      "contents": "CaptureVideo",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CaptureVideo()"
    },
    {
      "trigger": "ChatText",
      "contents": "ChatText",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ChatText(index, name, text, type)"
    },
    {
      "trigger": "ChatTextChanged",
      "contents": "ChatTextChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ChatTextChanged(text)"
    },
    {
      "trigger": "CheckPassword",
      "contents": "CheckPassword",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CheckPassword(steamID64, ipAddress, svPassword, clPassword, name)"
    },
    {
      "trigger": "ClientSignOnStateChanged",
      "contents": "ClientSignOnStateChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ClientSignOnStateChanged(userID, oldState, newState)"
    },
    {
      "trigger": "CloseDermaMenus",
      "contents": "CloseDermaMenus",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CloseDermaMenus()"
    },
    {
      "trigger": "CreateClientsideRagdoll",
      "contents": "CreateClientsideRagdoll",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CreateClientsideRagdoll(entity, ragdoll)"
    },
    {
      "trigger": "CreateEntityRagdoll",
      "contents": "CreateEntityRagdoll",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CreateEntityRagdoll(owner, ragdoll)"
    },
    {
      "trigger": "CreateMove",
      "contents": "CreateMove",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CreateMove(cmd)"
    },
    {
      "trigger": "CreateTeams",
      "contents": "CreateTeams",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:CreateTeams()"
    },
    {
      "trigger": "DoAnimationEvent",
      "contents": "DoAnimationEvent",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DoAnimationEvent(ply, event, data)"
    },
    {
      "trigger": "DoPlayerDeath",
      "contents": "DoPlayerDeath",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DoPlayerDeath(ply, attacker, dmg)"
    },
    {
      "trigger": "DrawDeathNotice",
      "contents": "DrawDeathNotice",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DrawDeathNotice(x, y)"
    },
    {
      "trigger": "DrawMonitors",
      "contents": "DrawMonitors",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DrawMonitors()"
    },
    {
      "trigger": "DrawOverlay",
      "contents": "DrawOverlay",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DrawOverlay()"
    },
    {
      "trigger": "DrawPhysgunBeam",
      "contents": "DrawPhysgunBeam",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:DrawPhysgunBeam(ply, physgun, enabled, target, physBone, hitPos)"
    },
    {
      "trigger": "EndEntityDriving",
      "contents": "EndEntityDriving",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EndEntityDriving(ent, ply)"
    },
    {
      "trigger": "EntityEmitSound",
      "contents": "EntityEmitSound",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityEmitSound(data)"
    },
    {
      "trigger": "EntityFireBullets",
      "contents": "EntityFireBullets",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityFireBullets(entity, data)"
    },
    {
      "trigger": "EntityKeyValue",
      "contents": "EntityKeyValue",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityKeyValue(ent, key, value)"
    },
    {
      "trigger": "EntityNetworkedVarChanged",
      "contents": "EntityNetworkedVarChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityNetworkedVarChanged(ent, name, oldval, newval)"
    },
    {
      "trigger": "EntityRemoved",
      "contents": "EntityRemoved",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityRemoved(ent, fullUpdate)"
    },
    {
      "trigger": "EntityTakeDamage",
      "contents": "EntityTakeDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:EntityTakeDamage(target, dmg)"
    },
    {
      "trigger": "FindUseEntity",
      "contents": "FindUseEntity",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:FindUseEntity(ply, defaultEnt)"
    },
    {
      "trigger": "FinishChat",
      "contents": "FinishChat",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:FinishChat()"
    },
    {
      "trigger": "FinishMove",
      "contents": "FinishMove",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:FinishMove(ply, mv)"
    },
    {
      "trigger": "ForceDermaSkin",
      "contents": "ForceDermaSkin",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ForceDermaSkin()"
    },
    {
      "trigger": "GameContentChanged",
      "contents": "GameContentChanged",
      "annotation": "SharedMenu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GameContentChanged()"
    },
    {
      "trigger": "GetDeathNoticeEntityName",
      "contents": "GetDeathNoticeEntityName",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetDeathNoticeEntityName(ent)"
    },
    {
      "trigger": "GetFallDamage",
      "contents": "GetFallDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetFallDamage(ply, speed)"
    },
    {
      "trigger": "GetGameDescription",
      "contents": "GetGameDescription",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetGameDescription()"
    },
    {
      "trigger": "GetMotionBlurValues",
      "contents": "GetMotionBlurValues",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetMotionBlurValues(horizontal, vertical, forward, rotational)"
    },
    {
      "trigger": "GetPreferredCarryAngles",
      "contents": "GetPreferredCarryAngles",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetPreferredCarryAngles(ent, ply)"
    },
    {
      "trigger": "GetTeamColor",
      "contents": "GetTeamColor",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetTeamColor(ent)"
    },
    {
      "trigger": "GetTeamNumColor",
      "contents": "GetTeamNumColor",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GetTeamNumColor(team)"
    },
    {
      "trigger": "GrabEarAnimation",
      "contents": "GrabEarAnimation",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GrabEarAnimation(ply)"
    },
    {
      "trigger": "GravGunOnDropped",
      "contents": "GravGunOnDropped",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GravGunOnDropped(ply, ent)"
    },
    {
      "trigger": "GravGunOnPickedUp",
      "contents": "GravGunOnPickedUp",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GravGunOnPickedUp(ply, ent)"
    },
    {
      "trigger": "GravGunPickupAllowed",
      "contents": "GravGunPickupAllowed",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GravGunPickupAllowed(ply, ent)"
    },
    {
      "trigger": "GravGunPunt",
      "contents": "GravGunPunt",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GravGunPunt(ply, ent)"
    },
    {
      "trigger": "GUIMouseDoublePressed",
      "contents": "GUIMouseDoublePressed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GUIMouseDoublePressed(mouseCode, aimVector)"
    },
    {
      "trigger": "GUIMousePressed",
      "contents": "GUIMousePressed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GUIMousePressed(mouseCode, aimVector)"
    },
    {
      "trigger": "GUIMouseReleased",
      "contents": "GUIMouseReleased",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:GUIMouseReleased(mouseCode, aimVector)"
    },
    {
      "trigger": "HandlePlayerArmorReduction",
      "contents": "HandlePlayerArmorReduction",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerArmorReduction(ply, dmginfo)"
    },
    {
      "trigger": "HandlePlayerDriving",
      "contents": "HandlePlayerDriving",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerDriving(ply)"
    },
    {
      "trigger": "HandlePlayerDucking",
      "contents": "HandlePlayerDucking",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerDucking(ply, velocity)"
    },
    {
      "trigger": "HandlePlayerJumping",
      "contents": "HandlePlayerJumping",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerJumping(ply, velocity)"
    },
    {
      "trigger": "HandlePlayerLanding",
      "contents": "HandlePlayerLanding",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerLanding(ply, velocity, onGround)"
    },
    {
      "trigger": "HandlePlayerNoClipping",
      "contents": "HandlePlayerNoClipping",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerNoClipping(ply, velocity)"
    },
    {
      "trigger": "HandlePlayerSwimming",
      "contents": "HandlePlayerSwimming",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerSwimming(ply, velocity)"
    },
    {
      "trigger": "HandlePlayerVaulting",
      "contents": "HandlePlayerVaulting",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HandlePlayerVaulting(ply, velocity)"
    },
    {
      "trigger": "HideTeam",
      "contents": "HideTeam",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HideTeam()"
    },
    {
      "trigger": "HUDAmmoPickedUp",
      "contents": "HUDAmmoPickedUp",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDAmmoPickedUp(itemName, amount)"
    },
    {
      "trigger": "HUDDrawPickupHistory",
      "contents": "HUDDrawPickupHistory",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDDrawPickupHistory()"
    },
    {
      "trigger": "HUDDrawScoreBoard",
      "contents": "HUDDrawScoreBoard",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDDrawScoreBoard()"
    },
    {
      "trigger": "HUDDrawTargetID",
      "contents": "HUDDrawTargetID",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDDrawTargetID()"
    },
    {
      "trigger": "HUDItemPickedUp",
      "contents": "HUDItemPickedUp",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDItemPickedUp(itemName)"
    },
    {
      "trigger": "HUDPaint",
      "contents": "HUDPaint",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDPaint()"
    },
    {
      "trigger": "HUDPaintBackground",
      "contents": "HUDPaintBackground",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDPaintBackground()"
    },
    {
      "trigger": "HUDShouldDraw",
      "contents": "HUDShouldDraw",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDShouldDraw(name)"
    },
    {
      "trigger": "HUDWeaponPickedUp",
      "contents": "HUDWeaponPickedUp",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:HUDWeaponPickedUp(weapon)"
    },
    {
      "trigger": "Initialize",
      "contents": "Initialize",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Initialize()"
    },
    {
      "trigger": "InitPostEntity",
      "contents": "InitPostEntity",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:InitPostEntity()"
    },
    {
      "trigger": "InputMouseApply",
      "contents": "InputMouseApply",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:InputMouseApply(cmd, x, y, ang)"
    },
    {
      "trigger": "IsSpawnpointSuitable",
      "contents": "IsSpawnpointSuitable",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:IsSpawnpointSuitable(ply, spawnpoint, makeSuitable)"
    },
    {
      "trigger": "KeyPress",
      "contents": "KeyPress",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:KeyPress(ply, key)"
    },
    {
      "trigger": "KeyRelease",
      "contents": "KeyRelease",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:KeyRelease(ply, key)"
    },
    {
      "trigger": "LoadGModSave",
      "contents": "LoadGModSave",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:LoadGModSave(data, map, timestamp)"
    },
    {
      "trigger": "LoadGModSaveFailed",
      "contents": "LoadGModSaveFailed",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:LoadGModSaveFailed()"
    },
    {
      "trigger": "MenuStart",
      "contents": "MenuStart",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:MenuStart()"
    },
    {
      "trigger": "MouthMoveAnimation",
      "contents": "MouthMoveAnimation",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:MouthMoveAnimation(ply)"
    },
    {
      "trigger": "Move",
      "contents": "Move",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Move(ply, mv)"
    },
    {
      "trigger": "NeedsDepthPass",
      "contents": "NeedsDepthPass",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:NeedsDepthPass()"
    },
    {
      "trigger": "NetworkEntityCreated",
      "contents": "NetworkEntityCreated",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:NetworkEntityCreated(ent)"
    },
    {
      "trigger": "NetworkIDValidated",
      "contents": "NetworkIDValidated",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:NetworkIDValidated(name, steamID)"
    },
    {
      "trigger": "NotifyShouldTransmit",
      "contents": "NotifyShouldTransmit",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:NotifyShouldTransmit(entity, shouldtransmit)"
    },
    {
      "trigger": "OnAchievementAchieved",
      "contents": "OnAchievementAchieved",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnAchievementAchieved(ply, achievement)"
    },
    {
      "trigger": "OnChatTab",
      "contents": "OnChatTab",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnChatTab(text)"
    },
    {
      "trigger": "OnCleanup",
      "contents": "OnCleanup",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnCleanup(name)"
    },
    {
      "trigger": "OnCloseCaptionEmit",
      "contents": "OnCloseCaptionEmit",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnCloseCaptionEmit(soundScript, duration, fromPlayer, fullText)"
    },
    {
      "trigger": "OnContextMenuClose",
      "contents": "OnContextMenuClose",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnContextMenuClose()"
    },
    {
      "trigger": "OnContextMenuOpen",
      "contents": "OnContextMenuOpen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnContextMenuOpen()"
    },
    {
      "trigger": "OnCrazyPhysics",
      "contents": "OnCrazyPhysics",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnCrazyPhysics(ent, physobj)"
    },
    {
      "trigger": "OnDamagedByExplosion",
      "contents": "OnDamagedByExplosion",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnDamagedByExplosion(ply, dmginfo)"
    },
    {
      "trigger": "OnEntityCreated",
      "contents": "OnEntityCreated",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnEntityCreated(entity)"
    },
    {
      "trigger": "OnEntityWaterLevelChanged",
      "contents": "OnEntityWaterLevelChanged",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnEntityWaterLevelChanged(entity, old, new)"
    },
    {
      "trigger": "OnGamemodeLoaded",
      "contents": "OnGamemodeLoaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnGamemodeLoaded()"
    },
    {
      "trigger": "OnLuaError",
      "contents": "OnLuaError",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnLuaError(error, realm, stack, name, id)"
    },
    {
      "trigger": "OnNotifyAddonConflict",
      "contents": "OnNotifyAddonConflict",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnNotifyAddonConflict(addon1, addon2, fileName)"
    },
    {
      "trigger": "OnNPCKilled",
      "contents": "OnNPCKilled",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnNPCKilled(npc, attacker, inflictor)"
    },
    {
      "trigger": "OnPermissionsChanged",
      "contents": "OnPermissionsChanged",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPermissionsChanged()"
    },
    {
      "trigger": "OnPhysgunFreeze",
      "contents": "OnPhysgunFreeze",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPhysgunFreeze(weapon, physobj, ent, ply)"
    },
    {
      "trigger": "OnPhysgunPickup",
      "contents": "OnPhysgunPickup",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPhysgunPickup(ply, ent)"
    },
    {
      "trigger": "OnPhysgunReload",
      "contents": "OnPhysgunReload",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPhysgunReload(physgun, ply)"
    },
    {
      "trigger": "OnPlayerChangedTeam",
      "contents": "OnPlayerChangedTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerChangedTeam(ply, oldTeam, newTeam)"
    },
    {
      "trigger": "OnPlayerChat",
      "contents": "OnPlayerChat",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerChat(ply, text, teamChat, isDead)"
    },
    {
      "trigger": "OnPlayerHitGround",
      "contents": "OnPlayerHitGround",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerHitGround(player, inWater, onFloater, speed)"
    },
    {
      "trigger": "OnPlayerJump",
      "contents": "OnPlayerJump",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerJump(player, speed)"
    },
    {
      "trigger": "OnPlayerPhysicsDrop",
      "contents": "OnPlayerPhysicsDrop",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerPhysicsDrop(ply, ent, thrown)"
    },
    {
      "trigger": "OnPlayerPhysicsPickup",
      "contents": "OnPlayerPhysicsPickup",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnPlayerPhysicsPickup(ply, ent)"
    },
    {
      "trigger": "OnReloaded",
      "contents": "OnReloaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnReloaded()"
    },
    {
      "trigger": "OnScreenSizeChanged",
      "contents": "OnScreenSizeChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnScreenSizeChanged(oldWidth, oldHeight, newWidth, newHeight)"
    },
    {
      "trigger": "OnSpawnMenuClose",
      "contents": "OnSpawnMenuClose",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnSpawnMenuClose()"
    },
    {
      "trigger": "OnSpawnMenuOpen",
      "contents": "OnSpawnMenuOpen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnSpawnMenuOpen()"
    },
    {
      "trigger": "OnTextEntryGetFocus",
      "contents": "OnTextEntryGetFocus",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnTextEntryGetFocus(panel)"
    },
    {
      "trigger": "OnTextEntryLoseFocus",
      "contents": "OnTextEntryLoseFocus",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnTextEntryLoseFocus(panel)"
    },
    {
      "trigger": "OnUndo",
      "contents": "OnUndo",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnUndo(name, customText)"
    },
    {
      "trigger": "OnViewModelChanged",
      "contents": "OnViewModelChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:OnViewModelChanged(viewmodel, oldModel, newModel)"
    },
    {
      "trigger": "PhysgunDrop",
      "contents": "PhysgunDrop",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PhysgunDrop(ply, ent)"
    },
    {
      "trigger": "PhysgunPickup",
      "contents": "PhysgunPickup",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PhysgunPickup(player, entity)"
    },
    {
      "trigger": "PlayerAmmoChanged",
      "contents": "PlayerAmmoChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerAmmoChanged(ply, ammoID, oldCount, newCount)"
    },
    {
      "trigger": "PlayerAuthed",
      "contents": "PlayerAuthed",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerAuthed(ply, steamid, uniqueid)"
    },
    {
      "trigger": "PlayerBindPress",
      "contents": "PlayerBindPress",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerBindPress(ply, bind, pressed, code)"
    },
    {
      "trigger": "PlayerButtonDown",
      "contents": "PlayerButtonDown",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerButtonDown(ply, button)"
    },
    {
      "trigger": "PlayerButtonUp",
      "contents": "PlayerButtonUp",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerButtonUp(ply, button)"
    },
    {
      "trigger": "PlayerCanHearPlayersVoice",
      "contents": "PlayerCanHearPlayersVoice",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCanHearPlayersVoice(listener, talker)"
    },
    {
      "trigger": "PlayerCanJoinTeam",
      "contents": "PlayerCanJoinTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCanJoinTeam(ply, team)"
    },
    {
      "trigger": "PlayerCanPickupItem",
      "contents": "PlayerCanPickupItem",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCanPickupItem(ply, item)"
    },
    {
      "trigger": "PlayerCanPickupWeapon",
      "contents": "PlayerCanPickupWeapon",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCanPickupWeapon(ply, weapon)"
    },
    {
      "trigger": "PlayerCanSeePlayersChat",
      "contents": "PlayerCanSeePlayersChat",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCanSeePlayersChat(text, teamOnly, listener, speaker)"
    },
    {
      "trigger": "PlayerChangedTeam",
      "contents": "PlayerChangedTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerChangedTeam(ply, oldTeam, newTeam)"
    },
    {
      "trigger": "PlayerCheckLimit",
      "contents": "PlayerCheckLimit",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerCheckLimit(ply, limitName, current, defaultMax)"
    },
    {
      "trigger": "PlayerClassChanged",
      "contents": "PlayerClassChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerClassChanged(ply, newID)"
    },
    {
      "trigger": "PlayerConnect",
      "contents": "PlayerConnect",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerConnect(name, ip)"
    },
    {
      "trigger": "PlayerDeath",
      "contents": "PlayerDeath",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDeath(victim, inflictor, attacker)"
    },
    {
      "trigger": "PlayerDeathSound",
      "contents": "PlayerDeathSound",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDeathSound(ply)"
    },
    {
      "trigger": "PlayerDeathThink",
      "contents": "PlayerDeathThink",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDeathThink(ply)"
    },
    {
      "trigger": "PlayerDisconnected",
      "contents": "PlayerDisconnected",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDisconnected(ply)"
    },
    {
      "trigger": "PlayerDriveAnimate",
      "contents": "PlayerDriveAnimate",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDriveAnimate(ply)"
    },
    {
      "trigger": "PlayerDroppedWeapon",
      "contents": "PlayerDroppedWeapon",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerDroppedWeapon(owner, wep)"
    },
    {
      "trigger": "PlayerEndVoice",
      "contents": "PlayerEndVoice",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerEndVoice(ply)"
    },
    {
      "trigger": "PlayerEnteredVehicle",
      "contents": "PlayerEnteredVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerEnteredVehicle(ply, veh, role)"
    },
    {
      "trigger": "PlayerFireAnimationEvent",
      "contents": "PlayerFireAnimationEvent",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerFireAnimationEvent(ply, pos, ang, event, name)"
    },
    {
      "trigger": "PlayerFootstep",
      "contents": "PlayerFootstep",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerFootstep(ply, pos, foot, sound, volume, filter)"
    },
    {
      "trigger": "PlayerFrozeObject",
      "contents": "PlayerFrozeObject",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerFrozeObject(ply, ent, physobj)"
    },
    {
      "trigger": "PlayerHandleAnimEvent",
      "contents": "PlayerHandleAnimEvent",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerHandleAnimEvent(ply, event, eventTime, cycle, type, options)"
    },
    {
      "trigger": "PlayerHurt",
      "contents": "PlayerHurt",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerHurt(victim, attacker, healthRemaining, damageTaken)"
    },
    {
      "trigger": "PlayerInitialSpawn",
      "contents": "PlayerInitialSpawn",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerInitialSpawn(player, transition)"
    },
    {
      "trigger": "PlayerJoinTeam",
      "contents": "PlayerJoinTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerJoinTeam(ply, team)"
    },
    {
      "trigger": "PlayerLeaveVehicle",
      "contents": "PlayerLeaveVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerLeaveVehicle(ply, veh)"
    },
    {
      "trigger": "PlayerLoadout",
      "contents": "PlayerLoadout",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerLoadout(ply)"
    },
    {
      "trigger": "PlayerNoClip",
      "contents": "PlayerNoClip",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerNoClip(ply, desiredState)"
    },
    {
      "trigger": "PlayerPostThink",
      "contents": "PlayerPostThink",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerPostThink(ply)"
    },
    {
      "trigger": "PlayerRequestTeam",
      "contents": "PlayerRequestTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerRequestTeam(ply, team)"
    },
    {
      "trigger": "PlayerSay",
      "contents": "PlayerSay",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSay(sender, text, teamChat)"
    },
    {
      "trigger": "PlayerSelectSpawn",
      "contents": "PlayerSelectSpawn",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSelectSpawn(ply, transition)"
    },
    {
      "trigger": "PlayerSelectTeamSpawn",
      "contents": "PlayerSelectTeamSpawn",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSelectTeamSpawn(team, ply)"
    },
    {
      "trigger": "PlayerSetHandsModel",
      "contents": "PlayerSetHandsModel",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSetHandsModel(ply, ent)"
    },
    {
      "trigger": "PlayerSetModel",
      "contents": "PlayerSetModel",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSetModel(ply)"
    },
    {
      "trigger": "PlayerShouldTakeDamage",
      "contents": "PlayerShouldTakeDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerShouldTakeDamage(ply, attacker)"
    },
    {
      "trigger": "PlayerShouldTaunt",
      "contents": "PlayerShouldTaunt",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerShouldTaunt(ply, act)"
    },
    {
      "trigger": "PlayerSilentDeath",
      "contents": "PlayerSilentDeath",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSilentDeath(ply)"
    },
    {
      "trigger": "PlayerSpawn",
      "contents": "PlayerSpawn",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSpawn(player, transition)"
    },
    {
      "trigger": "PlayerSpawnAsSpectator",
      "contents": "PlayerSpawnAsSpectator",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSpawnAsSpectator(ply)"
    },
    {
      "trigger": "PlayerSpray",
      "contents": "PlayerSpray",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSpray(sprayer)"
    },
    {
      "trigger": "PlayerStartTaunt",
      "contents": "PlayerStartTaunt",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerStartTaunt(ply, act, length)"
    },
    {
      "trigger": "PlayerStartVoice",
      "contents": "PlayerStartVoice",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerStartVoice(ply)"
    },
    {
      "trigger": "PlayerStepSoundTime",
      "contents": "PlayerStepSoundTime",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerStepSoundTime(ply, type, walking)"
    },
    {
      "trigger": "PlayerSwitchFlashlight",
      "contents": "PlayerSwitchFlashlight",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSwitchFlashlight(ply, enabled)"
    },
    {
      "trigger": "PlayerSwitchWeapon",
      "contents": "PlayerSwitchWeapon",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerSwitchWeapon(player, oldWeapon, newWeapon)"
    },
    {
      "trigger": "PlayerTick",
      "contents": "PlayerTick",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerTick(player, mv)"
    },
    {
      "trigger": "PlayerTraceAttack",
      "contents": "PlayerTraceAttack",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerTraceAttack(ply, dmginfo, dir, trace)"
    },
    {
      "trigger": "PlayerUnfrozeObject",
      "contents": "PlayerUnfrozeObject",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerUnfrozeObject(ply, ent, physobj)"
    },
    {
      "trigger": "PlayerUse",
      "contents": "PlayerUse",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PlayerUse(ply, ent)"
    },
    {
      "trigger": "PopulateMenuBar",
      "contents": "PopulateMenuBar",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PopulateMenuBar(menubar)"
    },
    {
      "trigger": "PostCleanupMap",
      "contents": "PostCleanupMap",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostCleanupMap()"
    },
    {
      "trigger": "PostDraw2DSkyBox",
      "contents": "PostDraw2DSkyBox",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDraw2DSkyBox()"
    },
    {
      "trigger": "PostDrawEffects",
      "contents": "PostDrawEffects",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawEffects()"
    },
    {
      "trigger": "PostDrawHUD",
      "contents": "PostDrawHUD",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawHUD()"
    },
    {
      "trigger": "PostDrawOpaqueRenderables",
      "contents": "PostDrawOpaqueRenderables",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)"
    },
    {
      "trigger": "PostDrawPlayerHands",
      "contents": "PostDrawPlayerHands",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawPlayerHands(hands, vm, ply, weapon)"
    },
    {
      "trigger": "PostDrawSkyBox",
      "contents": "PostDrawSkyBox",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawSkyBox()"
    },
    {
      "trigger": "PostDrawTranslucentRenderables",
      "contents": "PostDrawTranslucentRenderables",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawTranslucentRenderables(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)"
    },
    {
      "trigger": "PostDrawViewModel",
      "contents": "PostDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostDrawViewModel(viewmodel, player, weapon)"
    },
    {
      "trigger": "PostEntityFireBullets",
      "contents": "PostEntityFireBullets",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostEntityFireBullets(entity, data)"
    },
    {
      "trigger": "PostEntityTakeDamage",
      "contents": "PostEntityTakeDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostEntityTakeDamage(ent, dmg, took)"
    },
    {
      "trigger": "PostGamemodeLoaded",
      "contents": "PostGamemodeLoaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostGamemodeLoaded()"
    },
    {
      "trigger": "PostPlayerDeath",
      "contents": "PostPlayerDeath",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostPlayerDeath(ply)"
    },
    {
      "trigger": "PostPlayerDraw",
      "contents": "PostPlayerDraw",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostPlayerDraw(ply, flags)"
    },
    {
      "trigger": "PostProcessPermitted",
      "contents": "PostProcessPermitted",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostProcessPermitted(ppeffect)"
    },
    {
      "trigger": "PostRender",
      "contents": "PostRender",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostRender()"
    },
    {
      "trigger": "PostRenderVGUI",
      "contents": "PostRenderVGUI",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostRenderVGUI()"
    },
    {
      "trigger": "PostUndo",
      "contents": "PostUndo",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PostUndo(undo, count)"
    },
    {
      "trigger": "PreCleanupMap",
      "contents": "PreCleanupMap",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreCleanupMap()"
    },
    {
      "trigger": "PreDrawEffects",
      "contents": "PreDrawEffects",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawEffects()"
    },
    {
      "trigger": "PreDrawHalos",
      "contents": "PreDrawHalos",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawHalos()"
    },
    {
      "trigger": "PreDrawHUD",
      "contents": "PreDrawHUD",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawHUD()"
    },
    {
      "trigger": "PreDrawOpaqueRenderables",
      "contents": "PreDrawOpaqueRenderables",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawOpaqueRenderables(isDrawingDepth, isDrawSkybox, isDraw3DSkybox)"
    },
    {
      "trigger": "PreDrawPlayerHands",
      "contents": "PreDrawPlayerHands",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawPlayerHands(hands, vm, ply, weapon)"
    },
    {
      "trigger": "PreDrawSkyBox",
      "contents": "PreDrawSkyBox",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawSkyBox()"
    },
    {
      "trigger": "PreDrawTranslucentRenderables",
      "contents": "PreDrawTranslucentRenderables",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawTranslucentRenderables(isDrawingDepth, isDrawSkybox, isDraw3DSkybox)"
    },
    {
      "trigger": "PreDrawViewModel",
      "contents": "PreDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawViewModel(vm, ply, weapon)"
    },
    {
      "trigger": "PreDrawViewModels",
      "contents": "PreDrawViewModels",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreDrawViewModels()"
    },
    {
      "trigger": "PreGamemodeLoaded",
      "contents": "PreGamemodeLoaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreGamemodeLoaded()"
    },
    {
      "trigger": "PrePlayerDraw",
      "contents": "PrePlayerDraw",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PrePlayerDraw(player, flags)"
    },
    {
      "trigger": "PreRegisterSENT",
      "contents": "PreRegisterSENT",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreRegisterSENT(ent, class)"
    },
    {
      "trigger": "PreRegisterSWEP",
      "contents": "PreRegisterSWEP",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreRegisterSWEP(swep, class)"
    },
    {
      "trigger": "PreRender",
      "contents": "PreRender",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreRender()"
    },
    {
      "trigger": "PreUndo",
      "contents": "PreUndo",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreUndo(undo)"
    },
    {
      "trigger": "PreventScreenClicks",
      "contents": "PreventScreenClicks",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PreventScreenClicks()"
    },
    {
      "trigger": "PropBreak",
      "contents": "PropBreak",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:PropBreak(attacker, prop)"
    },
    {
      "trigger": "RenderScene",
      "contents": "RenderScene",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:RenderScene(origin, angles, fov)"
    },
    {
      "trigger": "RenderScreenspaceEffects",
      "contents": "RenderScreenspaceEffects",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:RenderScreenspaceEffects()"
    },
    {
      "trigger": "Restored",
      "contents": "Restored",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Restored()"
    },
    {
      "trigger": "Saved",
      "contents": "Saved",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Saved()"
    },
    {
      "trigger": "ScaleNPCDamage",
      "contents": "ScaleNPCDamage",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ScaleNPCDamage(npc, hitgroup, dmginfo)"
    },
    {
      "trigger": "ScalePlayerDamage",
      "contents": "ScalePlayerDamage",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ScalePlayerDamage(ply, hitgroup, dmginfo)"
    },
    {
      "trigger": "ScoreboardHide",
      "contents": "ScoreboardHide",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ScoreboardHide()"
    },
    {
      "trigger": "ScoreboardShow",
      "contents": "ScoreboardShow",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ScoreboardShow()"
    },
    {
      "trigger": "SendDeathNotice",
      "contents": "SendDeathNotice",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SendDeathNotice(attacker, inflictor, victim, flags)"
    },
    {
      "trigger": "SetPlayerSpeed",
      "contents": "SetPlayerSpeed",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SetPlayerSpeed(ply, walkSpeed, runSpeed)"
    },
    {
      "trigger": "SetupMove",
      "contents": "SetupMove",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SetupMove(ply, mv, cmd)"
    },
    {
      "trigger": "SetupPlayerVisibility",
      "contents": "SetupPlayerVisibility",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SetupPlayerVisibility(ply, viewEntity)"
    },
    {
      "trigger": "SetupSkyboxFog",
      "contents": "SetupSkyboxFog",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SetupSkyboxFog(scale)"
    },
    {
      "trigger": "SetupWorldFog",
      "contents": "SetupWorldFog",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SetupWorldFog()"
    },
    {
      "trigger": "ShouldCollide",
      "contents": "ShouldCollide",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShouldCollide(ent1, ent2)"
    },
    {
      "trigger": "ShouldDrawLocalPlayer",
      "contents": "ShouldDrawLocalPlayer",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShouldDrawLocalPlayer(ply)"
    },
    {
      "trigger": "ShowHelp",
      "contents": "ShowHelp",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShowHelp(ply)"
    },
    {
      "trigger": "ShowSpare1",
      "contents": "ShowSpare1",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShowSpare1(ply)"
    },
    {
      "trigger": "ShowSpare2",
      "contents": "ShowSpare2",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShowSpare2(ply)"
    },
    {
      "trigger": "ShowTeam",
      "contents": "ShowTeam",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShowTeam(ply)"
    },
    {
      "trigger": "ShutDown",
      "contents": "ShutDown",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:ShutDown()"
    },
    {
      "trigger": "SpawniconGenerated",
      "contents": "SpawniconGenerated",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SpawniconGenerated(lastmodel, imagename, modelsleft)"
    },
    {
      "trigger": "SpawnMenuCreated",
      "contents": "SpawnMenuCreated",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:SpawnMenuCreated()"
    },
    {
      "trigger": "StartChat",
      "contents": "StartChat",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:StartChat(isTeamChat)"
    },
    {
      "trigger": "StartCommand",
      "contents": "StartCommand",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:StartCommand(ply, ucmd)"
    },
    {
      "trigger": "StartEntityDriving",
      "contents": "StartEntityDriving",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:StartEntityDriving(ent, ply)"
    },
    {
      "trigger": "StartGame",
      "contents": "StartGame",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:StartGame()"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Think()"
    },
    {
      "trigger": "Tick",
      "contents": "Tick",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:Tick()"
    },
    {
      "trigger": "TranslateActivity",
      "contents": "TranslateActivity",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:TranslateActivity(ply, act)"
    },
    {
      "trigger": "UpdateAnimation",
      "contents": "UpdateAnimation",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:UpdateAnimation(ply, velocity, maxSeqGroundSpeed)"
    },
    {
      "trigger": "VariableEdited",
      "contents": "VariableEdited",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:VariableEdited(ent, ply, key, val, editor)"
    },
    {
      "trigger": "VehicleMove",
      "contents": "VehicleMove",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:VehicleMove(ply, veh, mv)"
    },
    {
      "trigger": "VGUIMousePressAllowed",
      "contents": "VGUIMousePressAllowed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:VGUIMousePressAllowed(button)"
    },
    {
      "trigger": "VGUIMousePressed",
      "contents": "VGUIMousePressed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:VGUIMousePressed(pnl, mouseCode)"
    },
    {
      "trigger": "WeaponEquip",
      "contents": "WeaponEquip",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WeaponEquip(weapon, owner)"
    },
    {
      "trigger": "WorkshopDownloadedFile",
      "contents": "WorkshopDownloadedFile",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopDownloadedFile(id, title)"
    },
    {
      "trigger": "WorkshopDownloadFile",
      "contents": "WorkshopDownloadFile",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopDownloadFile(id, imageID, title, size)"
    },
    {
      "trigger": "WorkshopDownloadProgress",
      "contents": "WorkshopDownloadProgress",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopDownloadProgress(id, imageID, title, downloaded, expected)"
    },
    {
      "trigger": "WorkshopDownloadTotals",
      "contents": "WorkshopDownloadTotals",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopDownloadTotals(remain, total)"
    },
    {
      "trigger": "WorkshopEnd",
      "contents": "WorkshopEnd",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopEnd()"
    },
    {
      "trigger": "WorkshopExtractProgress",
      "contents": "WorkshopExtractProgress",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopExtractProgress(id, ImageID, title, percent)"
    },
    {
      "trigger": "WorkshopStart",
      "contents": "WorkshopStart",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopStart()"
    },
    {
      "trigger": "WorkshopSubscriptionsChanged",
      "contents": "WorkshopSubscriptionsChanged",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopSubscriptionsChanged()"
    },
    {
      "trigger": "WorkshopSubscriptionsMessage",
      "contents": "WorkshopSubscriptionsMessage",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopSubscriptionsMessage(message)"
    },
    {
      "trigger": "WorkshopSubscriptionsProgress",
      "contents": "WorkshopSubscriptionsProgress",
      "annotation": "Menu",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "GM:WorkshopSubscriptionsProgress(num, max)"
    },
    {
      "trigger": "BehaveStart",
      "contents": "BehaveStart",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:BehaveStart()"
    },
    {
      "trigger": "BehaveUpdate",
      "contents": "BehaveUpdate",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:BehaveUpdate(interval)"
    },
    {
      "trigger": "BodyUpdate",
      "contents": "BodyUpdate",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:BodyUpdate()"
    },
    {
      "trigger": "OnContact",
      "contents": "OnContact",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnContact(ent)"
    },
    {
      "trigger": "OnEntitySight",
      "contents": "OnEntitySight",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnEntitySight(ent)"
    },
    {
      "trigger": "OnEntitySightLost",
      "contents": "OnEntitySightLost",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnEntitySightLost(ent)"
    },
    {
      "trigger": "OnIgnite",
      "contents": "OnIgnite",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnIgnite()"
    },
    {
      "trigger": "OnInjured",
      "contents": "OnInjured",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnInjured(info)"
    },
    {
      "trigger": "OnKilled",
      "contents": "OnKilled",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnKilled(info)"
    },
    {
      "trigger": "OnLandOnGround",
      "contents": "OnLandOnGround",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnLandOnGround(ent)"
    },
    {
      "trigger": "OnLeaveGround",
      "contents": "OnLeaveGround",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnLeaveGround(ent)"
    },
    {
      "trigger": "OnNavAreaChanged",
      "contents": "OnNavAreaChanged",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnNavAreaChanged(old, new)"
    },
    {
      "trigger": "OnOtherKilled",
      "contents": "OnOtherKilled",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnOtherKilled(victim, info)"
    },
    {
      "trigger": "OnStuck",
      "contents": "OnStuck",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnStuck()"
    },
    {
      "trigger": "OnTraceAttack",
      "contents": "OnTraceAttack",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnTraceAttack(info, dir, trace)"
    },
    {
      "trigger": "OnUnStuck",
      "contents": "OnUnStuck",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:OnUnStuck()"
    },
    {
      "trigger": "RunBehaviour",
      "contents": "RunBehaviour",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "NEXTBOT:RunBehaviour()"
    },
    {
      "trigger": "ActionSignal",
      "contents": "ActionSignal",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:ActionSignal(signalName, signalValue)"
    },
    {
      "trigger": "AnimationThink",
      "contents": "AnimationThink",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:AnimationThink()"
    },
    {
      "trigger": "ApplySchemeSettings",
      "contents": "ApplySchemeSettings",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:ApplySchemeSettings()"
    },
    {
      "trigger": "DragHoverClick",
      "contents": "DragHoverClick",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:DragHoverClick(hoverTime)"
    },
    {
      "trigger": "DroppedOn",
      "contents": "DroppedOn",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:DroppedOn(pnl)"
    },
    {
      "trigger": "GenerateExample",
      "contents": "GenerateExample",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:GenerateExample(class, dpropertysheet, width, height)"
    },
    {
      "trigger": "Init",
      "contents": "Init",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:Init()"
    },
    {
      "trigger": "LoadCookies",
      "contents": "LoadCookies",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:LoadCookies()"
    },
    {
      "trigger": "OnActivate",
      "contents": "OnActivate",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnActivate()"
    },
    {
      "trigger": "OnChildAdded",
      "contents": "OnChildAdded",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnChildAdded(child)"
    },
    {
      "trigger": "OnChildRemoved",
      "contents": "OnChildRemoved",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnChildRemoved(child)"
    },
    {
      "trigger": "OnCursorEntered",
      "contents": "OnCursorEntered",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnCursorEntered()"
    },
    {
      "trigger": "OnCursorExited",
      "contents": "OnCursorExited",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnCursorExited()"
    },
    {
      "trigger": "OnCursorMoved",
      "contents": "OnCursorMoved",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnCursorMoved(cursorX, cursorY)"
    },
    {
      "trigger": "OnDeactivate",
      "contents": "OnDeactivate",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnDeactivate()"
    },
    {
      "trigger": "OnDrop",
      "contents": "OnDrop",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnDrop()"
    },
    {
      "trigger": "OnFocusChanged",
      "contents": "OnFocusChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnFocusChanged(gained)"
    },
    {
      "trigger": "OnHScroll",
      "contents": "OnHScroll",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnHScroll(offset)"
    },
    {
      "trigger": "OnKeyCodePressed",
      "contents": "OnKeyCodePressed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnKeyCodePressed(keyCode)"
    },
    {
      "trigger": "OnKeyCodeReleased",
      "contents": "OnKeyCodeReleased",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnKeyCodeReleased(keyCode)"
    },
    {
      "trigger": "OnMousePressed",
      "contents": "OnMousePressed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnMousePressed(keyCode)"
    },
    {
      "trigger": "OnMouseReleased",
      "contents": "OnMouseReleased",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnMouseReleased(keyCode)"
    },
    {
      "trigger": "OnMouseWheeled",
      "contents": "OnMouseWheeled",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnMouseWheeled(scrollDelta)"
    },
    {
      "trigger": "OnRemove",
      "contents": "OnRemove",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnRemove()"
    },
    {
      "trigger": "OnScreenSizeChanged",
      "contents": "OnScreenSizeChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnScreenSizeChanged(oldWidth, oldHeight, newWidth, newHeight)"
    },
    {
      "trigger": "OnScrollbarAppear",
      "contents": "OnScrollbarAppear",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnScrollbarAppear()"
    },
    {
      "trigger": "OnSizeChanged",
      "contents": "OnSizeChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnSizeChanged(newWidth, newHeight)"
    },
    {
      "trigger": "OnStartDragging",
      "contents": "OnStartDragging",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnStartDragging()"
    },
    {
      "trigger": "OnStopDragging",
      "contents": "OnStopDragging",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnStopDragging()"
    },
    {
      "trigger": "OnVScroll",
      "contents": "OnVScroll",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:OnVScroll(offset)"
    },
    {
      "trigger": "Paint",
      "contents": "Paint",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:Paint(width, height)"
    },
    {
      "trigger": "PaintOver",
      "contents": "PaintOver",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:PaintOver(width, height)"
    },
    {
      "trigger": "PerformLayout",
      "contents": "PerformLayout",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:PerformLayout(width, height)"
    },
    {
      "trigger": "PostAutoRefresh",
      "contents": "PostAutoRefresh",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:PostAutoRefresh()"
    },
    {
      "trigger": "PreAutoRefresh",
      "contents": "PreAutoRefresh",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:PreAutoRefresh()"
    },
    {
      "trigger": "TestHover",
      "contents": "TestHover",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:TestHover(x, y)"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PANEL:Think()"
    },
    {
      "trigger": "ClassChanged",
      "contents": "ClassChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:ClassChanged()"
    },
    {
      "trigger": "Death",
      "contents": "Death",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:Death()"
    },
    {
      "trigger": "FinishMove",
      "contents": "FinishMove",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:FinishMove(mv)"
    },
    {
      "trigger": "GetHandsModel",
      "contents": "GetHandsModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:GetHandsModel()"
    },
    {
      "trigger": "Init",
      "contents": "Init",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:Init()"
    },
    {
      "trigger": "Loadout",
      "contents": "Loadout",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:Loadout()"
    },
    {
      "trigger": "Move",
      "contents": "Move",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:Move(mv)"
    },
    {
      "trigger": "PostDrawViewModel",
      "contents": "PostDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:PostDrawViewModel(viewmodel, weapon)"
    },
    {
      "trigger": "PreDrawViewModel",
      "contents": "PreDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:PreDrawViewModel(viewmodel, weapon)"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:SetModel()"
    },
    {
      "trigger": "SetupDataTables",
      "contents": "SetupDataTables",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:SetupDataTables()"
    },
    {
      "trigger": "Spawn",
      "contents": "Spawn",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:Spawn()"
    },
    {
      "trigger": "StartMove",
      "contents": "StartMove",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:StartMove(mv, cmd)"
    },
    {
      "trigger": "ViewModelChanged",
      "contents": "ViewModelChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "PLAYER:ViewModelChanged(viewmodel, old, new)"
    },
    {
      "trigger": "AddGamemodeToolMenuCategories",
      "contents": "AddGamemodeToolMenuCategories",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:AddGamemodeToolMenuCategories()"
    },
    {
      "trigger": "AddGamemodeToolMenuTabs",
      "contents": "AddGamemodeToolMenuTabs",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:AddGamemodeToolMenuTabs()"
    },
    {
      "trigger": "AddToolMenuCategories",
      "contents": "AddToolMenuCategories",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:AddToolMenuCategories()"
    },
    {
      "trigger": "AddToolMenuTabs",
      "contents": "AddToolMenuTabs",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:AddToolMenuTabs()"
    },
    {
      "trigger": "CanArmDupe",
      "contents": "CanArmDupe",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:CanArmDupe(ply)"
    },
    {
      "trigger": "CanDrive",
      "contents": "CanDrive",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:CanDrive(ply, ent)"
    },
    {
      "trigger": "CanTool",
      "contents": "CanTool",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:CanTool(ply, tr, toolname, tool, button)"
    },
    {
      "trigger": "ContentSidebarSelection",
      "contents": "ContentSidebarSelection",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContentSidebarSelection(parent, node)"
    },
    {
      "trigger": "ContextMenuClosed",
      "contents": "ContextMenuClosed",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuClosed()"
    },
    {
      "trigger": "ContextMenuCreated",
      "contents": "ContextMenuCreated",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuCreated(g_ContextMenu)"
    },
    {
      "trigger": "ContextMenuEnabled",
      "contents": "ContextMenuEnabled",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuEnabled()"
    },
    {
      "trigger": "ContextMenuOpen",
      "contents": "ContextMenuOpen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuOpen()"
    },
    {
      "trigger": "ContextMenuOpened",
      "contents": "ContextMenuOpened",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuOpened()"
    },
    {
      "trigger": "ContextMenuShowTool",
      "contents": "ContextMenuShowTool",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:ContextMenuShowTool()"
    },
    {
      "trigger": "OnRevertSpawnlist",
      "contents": "OnRevertSpawnlist",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:OnRevertSpawnlist()"
    },
    {
      "trigger": "OnSaveSpawnlist",
      "contents": "OnSaveSpawnlist",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:OnSaveSpawnlist()"
    },
    {
      "trigger": "OpenToolbox",
      "contents": "OpenToolbox",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:OpenToolbox()"
    },
    {
      "trigger": "PaintNotes",
      "contents": "PaintNotes",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PaintNotes()"
    },
    {
      "trigger": "PaintWorldTips",
      "contents": "PaintWorldTips",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PaintWorldTips()"
    },
    {
      "trigger": "PersistenceLoad",
      "contents": "PersistenceLoad",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PersistenceLoad(name)"
    },
    {
      "trigger": "PersistenceSave",
      "contents": "PersistenceSave",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PersistenceSave(name)"
    },
    {
      "trigger": "PlayerGiveSWEP",
      "contents": "PlayerGiveSWEP",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerGiveSWEP(ply, weapon, swep)"
    },
    {
      "trigger": "PlayerSpawnedEffect",
      "contents": "PlayerSpawnedEffect",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedEffect(ply, model, ent)"
    },
    {
      "trigger": "PlayerSpawnedNPC",
      "contents": "PlayerSpawnedNPC",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedNPC(ply, ent)"
    },
    {
      "trigger": "PlayerSpawnedProp",
      "contents": "PlayerSpawnedProp",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedProp(ply, model, entity)"
    },
    {
      "trigger": "PlayerSpawnedRagdoll",
      "contents": "PlayerSpawnedRagdoll",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedRagdoll(ply, model, ent)"
    },
    {
      "trigger": "PlayerSpawnedSENT",
      "contents": "PlayerSpawnedSENT",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedSENT(ply, ent)"
    },
    {
      "trigger": "PlayerSpawnedSWEP",
      "contents": "PlayerSpawnedSWEP",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedSWEP(ply, ent)"
    },
    {
      "trigger": "PlayerSpawnedVehicle",
      "contents": "PlayerSpawnedVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnedVehicle(ply, ent)"
    },
    {
      "trigger": "PlayerSpawnEffect",
      "contents": "PlayerSpawnEffect",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnEffect(ply, model)"
    },
    {
      "trigger": "PlayerSpawnNPC",
      "contents": "PlayerSpawnNPC",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnNPC(ply, npc_type, weapon)"
    },
    {
      "trigger": "PlayerSpawnObject",
      "contents": "PlayerSpawnObject",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnObject(ply, model, skin)"
    },
    {
      "trigger": "PlayerSpawnProp",
      "contents": "PlayerSpawnProp",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnProp(ply, model)"
    },
    {
      "trigger": "PlayerSpawnRagdoll",
      "contents": "PlayerSpawnRagdoll",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnRagdoll(ply, model)"
    },
    {
      "trigger": "PlayerSpawnSENT",
      "contents": "PlayerSpawnSENT",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnSENT(ply, class)"
    },
    {
      "trigger": "PlayerSpawnSWEP",
      "contents": "PlayerSpawnSWEP",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnSWEP(ply, weapon, swep)"
    },
    {
      "trigger": "PlayerSpawnVehicle",
      "contents": "PlayerSpawnVehicle",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PlayerSpawnVehicle(ply, model, name, table)"
    },
    {
      "trigger": "PopulateContent",
      "contents": "PopulateContent",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateContent(pnlContent, tree, node)"
    },
    {
      "trigger": "PopulateEntities",
      "contents": "PopulateEntities",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateEntities(pnlContent, tree, node)"
    },
    {
      "trigger": "PopulateNPCs",
      "contents": "PopulateNPCs",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateNPCs(pnlContent, tree, node)"
    },
    {
      "trigger": "PopulatePropMenu",
      "contents": "PopulatePropMenu",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulatePropMenu()"
    },
    {
      "trigger": "PopulateToolMenu",
      "contents": "PopulateToolMenu",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateToolMenu()"
    },
    {
      "trigger": "PopulateVehicles",
      "contents": "PopulateVehicles",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateVehicles(pnlContent, tree, node)"
    },
    {
      "trigger": "PopulateWeapons",
      "contents": "PopulateWeapons",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PopulateWeapons(pnlContent, tree, node)"
    },
    {
      "trigger": "PostReloadToolsMenu",
      "contents": "PostReloadToolsMenu",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PostReloadToolsMenu()"
    },
    {
      "trigger": "PreRegisterTOOL",
      "contents": "PreRegisterTOOL",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PreRegisterTOOL(tool, class)"
    },
    {
      "trigger": "PreReloadToolsMenu",
      "contents": "PreReloadToolsMenu",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:PreReloadToolsMenu()"
    },
    {
      "trigger": "SpawnlistContentChanged",
      "contents": "SpawnlistContentChanged",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:SpawnlistContentChanged()"
    },
    {
      "trigger": "SpawnlistOpenGenericMenu",
      "contents": "SpawnlistOpenGenericMenu",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:SpawnlistOpenGenericMenu(canvas)"
    },
    {
      "trigger": "SpawnMenuEnabled",
      "contents": "SpawnMenuEnabled",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:SpawnMenuEnabled()"
    },
    {
      "trigger": "SpawnMenuOpen",
      "contents": "SpawnMenuOpen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:SpawnMenuOpen()"
    },
    {
      "trigger": "SpawnMenuOpened",
      "contents": "SpawnMenuOpened",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "SANDBOX:SpawnMenuOpened()"
    },
    {
      "trigger": "BuildCPanel",
      "contents": "BuildCPanel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:BuildCPanel(cpanel)"
    },
    {
      "trigger": "Deploy",
      "contents": "Deploy",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:Deploy()"
    },
    {
      "trigger": "DrawHUD",
      "contents": "DrawHUD",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:DrawHUD()"
    },
    {
      "trigger": "DrawToolScreen",
      "contents": "DrawToolScreen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:DrawToolScreen(width, height)"
    },
    {
      "trigger": "FreezeMovement",
      "contents": "FreezeMovement",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:FreezeMovement()"
    },
    {
      "trigger": "Holster",
      "contents": "Holster",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:Holster()"
    },
    {
      "trigger": "LeftClick",
      "contents": "LeftClick",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:LeftClick(tr)"
    },
    {
      "trigger": "Reload",
      "contents": "Reload",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:Reload(tr)"
    },
    {
      "trigger": "RightClick",
      "contents": "RightClick",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:RightClick(tr)"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "TOOL:Think()"
    },
    {
      "trigger": "AcceptInput",
      "contents": "AcceptInput",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:AcceptInput(inputName, activator, called, data)"
    },
    {
      "trigger": "AdjustMouseSensitivity",
      "contents": "AdjustMouseSensitivity",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:AdjustMouseSensitivity()"
    },
    {
      "trigger": "Ammo1",
      "contents": "Ammo1",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Ammo1()"
    },
    {
      "trigger": "Ammo2",
      "contents": "Ammo2",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Ammo2()"
    },
    {
      "trigger": "CalcView",
      "contents": "CalcView",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CalcView(ply, pos, ang, fov)"
    },
    {
      "trigger": "CalcViewModelView",
      "contents": "CalcViewModelView",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CalcViewModelView(ViewModel, OldEyePos, OldEyeAng, EyePos, EyeAng)"
    },
    {
      "trigger": "CanBePickedUpByNPCs",
      "contents": "CanBePickedUpByNPCs",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CanBePickedUpByNPCs()"
    },
    {
      "trigger": "CanPrimaryAttack",
      "contents": "CanPrimaryAttack",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CanPrimaryAttack()"
    },
    {
      "trigger": "CanSecondaryAttack",
      "contents": "CanSecondaryAttack",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CanSecondaryAttack()"
    },
    {
      "trigger": "CustomAmmoDisplay",
      "contents": "CustomAmmoDisplay",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:CustomAmmoDisplay()"
    },
    {
      "trigger": "Deploy",
      "contents": "Deploy",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Deploy()"
    },
    {
      "trigger": "DoDrawCrosshair",
      "contents": "DoDrawCrosshair",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DoDrawCrosshair(x, y)"
    },
    {
      "trigger": "DoImpactEffect",
      "contents": "DoImpactEffect",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DoImpactEffect(tr, damageType)"
    },
    {
      "trigger": "DrawHUD",
      "contents": "DrawHUD",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DrawHUD()"
    },
    {
      "trigger": "DrawHUDBackground",
      "contents": "DrawHUDBackground",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DrawHUDBackground()"
    },
    {
      "trigger": "DrawWeaponSelection",
      "contents": "DrawWeaponSelection",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DrawWeaponSelection(x, y, width, height, alpha)"
    },
    {
      "trigger": "DrawWorldModel",
      "contents": "DrawWorldModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DrawWorldModel(flags)"
    },
    {
      "trigger": "DrawWorldModelTranslucent",
      "contents": "DrawWorldModelTranslucent",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:DrawWorldModelTranslucent(flags)"
    },
    {
      "trigger": "Equip",
      "contents": "Equip",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Equip(NewOwner)"
    },
    {
      "trigger": "EquipAmmo",
      "contents": "EquipAmmo",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:EquipAmmo(ply)"
    },
    {
      "trigger": "FireAnimationEvent",
      "contents": "FireAnimationEvent",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:FireAnimationEvent(pos, ang, event, options, source)"
    },
    {
      "trigger": "FreezeMovement",
      "contents": "FreezeMovement",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:FreezeMovement()"
    },
    {
      "trigger": "GetCapabilities",
      "contents": "GetCapabilities",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetCapabilities()"
    },
    {
      "trigger": "GetNPCBulletSpread",
      "contents": "GetNPCBulletSpread",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetNPCBulletSpread(proficiency)"
    },
    {
      "trigger": "GetNPCBurstSettings",
      "contents": "GetNPCBurstSettings",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetNPCBurstSettings()"
    },
    {
      "trigger": "GetNPCRestTimes",
      "contents": "GetNPCRestTimes",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetNPCRestTimes()"
    },
    {
      "trigger": "GetTracerOrigin",
      "contents": "GetTracerOrigin",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetTracerOrigin()"
    },
    {
      "trigger": "GetViewModelPosition",
      "contents": "GetViewModelPosition",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:GetViewModelPosition(EyePos, EyeAng)"
    },
    {
      "trigger": "Holster",
      "contents": "Holster",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Holster(weapon)"
    },
    {
      "trigger": "HUDShouldDraw",
      "contents": "HUDShouldDraw",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:HUDShouldDraw(element)"
    },
    {
      "trigger": "Initialize",
      "contents": "Initialize",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Initialize()"
    },
    {
      "trigger": "KeyValue",
      "contents": "KeyValue",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:KeyValue(key, value)"
    },
    {
      "trigger": "OnDrop",
      "contents": "OnDrop",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:OnDrop()"
    },
    {
      "trigger": "OnReloaded",
      "contents": "OnReloaded",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:OnReloaded()"
    },
    {
      "trigger": "OnRemove",
      "contents": "OnRemove",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:OnRemove()"
    },
    {
      "trigger": "OnRestore",
      "contents": "OnRestore",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:OnRestore()"
    },
    {
      "trigger": "OwnerChanged",
      "contents": "OwnerChanged",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:OwnerChanged()"
    },
    {
      "trigger": "PostDrawViewModel",
      "contents": "PostDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:PostDrawViewModel(vm, weapon, ply)"
    },
    {
      "trigger": "PreDrawViewModel",
      "contents": "PreDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:PreDrawViewModel(vm, weapon, ply)"
    },
    {
      "trigger": "PrimaryAttack",
      "contents": "PrimaryAttack",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:PrimaryAttack()"
    },
    {
      "trigger": "PrintWeaponInfo",
      "contents": "PrintWeaponInfo",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:PrintWeaponInfo(x, y, alpha)"
    },
    {
      "trigger": "Reload",
      "contents": "Reload",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Reload()"
    },
    {
      "trigger": "RenderScreen",
      "contents": "RenderScreen",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:RenderScreen()"
    },
    {
      "trigger": "SecondaryAttack",
      "contents": "SecondaryAttack",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:SecondaryAttack()"
    },
    {
      "trigger": "SetupDataTables",
      "contents": "SetupDataTables",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:SetupDataTables()"
    },
    {
      "trigger": "SetWeaponHoldType",
      "contents": "SetWeaponHoldType",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:SetWeaponHoldType(name)"
    },
    {
      "trigger": "ShootBullet",
      "contents": "ShootBullet",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:ShootBullet(damage, num_bullets, aimcone, ammo_type, force, tracer)"
    },
    {
      "trigger": "ShootEffects",
      "contents": "ShootEffects",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:ShootEffects()"
    },
    {
      "trigger": "ShouldDrawViewModel",
      "contents": "ShouldDrawViewModel",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:ShouldDrawViewModel()"
    },
    {
      "trigger": "ShouldDropOnDie",
      "contents": "ShouldDropOnDie",
      "annotation": "Server",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:ShouldDropOnDie()"
    },
    {
      "trigger": "TakePrimaryAmmo",
      "contents": "TakePrimaryAmmo",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:TakePrimaryAmmo(amount)"
    },
    {
      "trigger": "TakeSecondaryAmmo",
      "contents": "TakeSecondaryAmmo",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:TakeSecondaryAmmo(amount)"
    },
    {
      "trigger": "Think",
      "contents": "Think",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:Think()"
    },
    {
      "trigger": "TranslateActivity",
      "contents": "TranslateActivity",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:TranslateActivity(act)"
    },
    {
      "trigger": "TranslateFOV",
      "contents": "TranslateFOV",
      "annotation": "Shared",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:TranslateFOV(fov)"
    },
    {
      "trigger": "ViewModelDrawn",
      "contents": "ViewModelDrawn",
      "annotation": "Client",
      "kind": [
        "snippet",
        "H",
        "Hook"
      ],
      "details": "WEAPON:ViewModelDrawn(ViewModel)"
    },
    {
      "trigger": "AchievementIcon",
      "contents": "AchievementIcon",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"AchievementIcon\")"
    },
    {
      "trigger": "AvatarImage",
      "contents": "AvatarImage",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"AvatarImage\")"
    },
    {
      "trigger": "Awesomium",
      "contents": "Awesomium",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Awesomium\")"
    },
    {
      "trigger": "Button",
      "contents": "Button",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Button\")"
    },
    {
      "trigger": "CheckButton",
      "contents": "CheckButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"CheckButton\")"
    },
    {
      "trigger": "ContentHeader",
      "contents": "ContentHeader",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ContentHeader\")"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu(${1:string style}, ${2:string hookname = PopulateContent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentHeader:OpenMenu(style, hookname)"
    },
    {
      "trigger": "ContentIcon",
      "contents": "ContentIcon",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ContentIcon\")"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:GetColor()"
    },
    {
      "trigger": "GetContentType",
      "contents": "GetContentType()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:GetContentType()"
    },
    {
      "trigger": "GetNPCWeapon",
      "contents": "GetNPCWeapon()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:GetNPCWeapon()"
    },
    {
      "trigger": "GetSpawnName",
      "contents": "GetSpawnName()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:GetSpawnName()"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:OpenMenu()"
    },
    {
      "trigger": "SetAdminOnly",
      "contents": "SetAdminOnly(${1:boolean adminOnly})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetAdminOnly(adminOnly)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table clr})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetColor(clr)"
    },
    {
      "trigger": "SetContentType",
      "contents": "SetContentType(${1:string type})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetContentType(type)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string path})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetMaterial(path)"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetName(name)"
    },
    {
      "trigger": "SetNPCWeapon",
      "contents": "SetNPCWeapon(${1:table weapons})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetNPCWeapon(weapons)"
    },
    {
      "trigger": "SetSpawnName",
      "contents": "SetSpawnName(${1:string name})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentIcon:SetSpawnName(name)"
    },
    {
      "trigger": "ContentSidebar",
      "contents": "ContentSidebar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ContentSidebar\")"
    },
    {
      "trigger": "CreateSaveNotification",
      "contents": "CreateSaveNotification(${1:string style}, ${2:string hookname = PopulateContent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentSidebar:CreateSaveNotification(style, hookname)"
    },
    {
      "trigger": "EnableModify",
      "contents": "EnableModify()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentSidebar:EnableModify()"
    },
    {
      "trigger": "EnableSearch",
      "contents": "EnableSearch(${1:string style}, ${2:string hookname = PopulateContent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContentSidebar:EnableSearch(style, hookname)"
    },
    {
      "trigger": "ContentSidebarToolbox",
      "contents": "ContentSidebarToolbox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ContentSidebarToolbox\")"
    },
    {
      "trigger": "ContextBase",
      "contents": "ContextBase",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ContextBase\")"
    },
    {
      "trigger": "ControlValues",
      "contents": "ControlValues(${1:table contextData})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContextBase:ControlValues(contextData)"
    },
    {
      "trigger": "ConVar",
      "contents": "ConVar()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContextBase:ConVar()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string cvar})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContextBase:SetConVar(cvar)"
    },
    {
      "trigger": "TestForChanges",
      "contents": "TestForChanges()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ContextBase:TestForChanges()"
    },
    {
      "trigger": "ControlPanel",
      "contents": "ControlPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ControlPanel\")"
    },
    {
      "trigger": "AddControl",
      "contents": "AddControl(${1:string type}, ${2:table controlinfo})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:AddControl(type, controlinfo)"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel panel})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:AddPanel(panel)"
    },
    {
      "trigger": "ClearControls",
      "contents": "ClearControls()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:ClearControls()"
    },
    {
      "trigger": "ColorPicker",
      "contents": "ColorPicker(${1:string label}, ${2:string convarR}, ${3:string convarG}, ${4:string convarB}, ${5:string convarA})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:ColorPicker(label, convarR, convarG, convarB, convarA)"
    },
    {
      "trigger": "ControlValues",
      "contents": "ControlValues(${1:table data})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:ControlValues(data)"
    },
    {
      "trigger": "FillViaFunction",
      "contents": "FillViaFunction(${1:function func})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:FillViaFunction(func)"
    },
    {
      "trigger": "GetEmbeddedPanel",
      "contents": "GetEmbeddedPanel()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:GetEmbeddedPanel()"
    },
    {
      "trigger": "KeyBinder",
      "contents": "KeyBinder(${1:string label1}, ${2:string convar1}, ${3:string label2 = nil}, ${4:string convar2 = nil})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:KeyBinder(label1, convar1, label2, convar2)"
    },
    {
      "trigger": "MatSelect",
      "contents": "MatSelect(${1:string convar}, ${2:table options = nil}, ${3:boolean autostretch = nil}, ${4:number width = nil}, ${5:number height = nil})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:MatSelect(convar, options, autostretch, width, height)"
    },
    {
      "trigger": "ToolPresets",
      "contents": "ToolPresets(${1:string group}, ${2:table cvarList})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPanel:ToolPresets(group, cvarList)"
    },
    {
      "trigger": "ControlPresets",
      "contents": "ControlPresets",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ControlPresets\")"
    },
    {
      "trigger": "AddConVar",
      "contents": "AddConVar(${1:string convar})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPresets:AddConVar(convar)"
    },
    {
      "trigger": "GetConVars",
      "contents": "GetConVars()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPresets:GetConVars()"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string name})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ControlPresets:SetLabel(name)"
    },
    {
      "trigger": "CtrlListBox",
      "contents": "CtrlListBox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"CtrlListBox\")"
    },
    {
      "trigger": "DAdjustableModelPanel",
      "contents": "DAdjustableModelPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DAdjustableModelPanel\")"
    },
    {
      "trigger": "CaptureMouse",
      "contents": "CaptureMouse()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAdjustableModelPanel:CaptureMouse()"
    },
    {
      "trigger": "FirstPersonControls",
      "contents": "FirstPersonControls()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAdjustableModelPanel:FirstPersonControls()"
    },
    {
      "trigger": "GetFirstPerson",
      "contents": "GetFirstPerson()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAdjustableModelPanel:GetFirstPerson()"
    },
    {
      "trigger": "SetFirstPerson",
      "contents": "SetFirstPerson(${1:boolean enable})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAdjustableModelPanel:SetFirstPerson(enable)"
    },
    {
      "trigger": "DAlphaBar",
      "contents": "DAlphaBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DAlphaBar\")"
    },
    {
      "trigger": "GetBarColor",
      "contents": "GetBarColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAlphaBar:GetBarColor()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAlphaBar:GetValue()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:number alpha})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAlphaBar:OnChange(alpha)"
    },
    {
      "trigger": "SetBarColor",
      "contents": "SetBarColor(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAlphaBar:SetBarColor(clr)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number alpha})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DAlphaBar:SetValue(alpha)"
    },
    {
      "trigger": "DBinder",
      "contents": "DBinder",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DBinder\")"
    },
    {
      "trigger": "GetSelectedNumber",
      "contents": "GetSelectedNumber()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:GetSelectedNumber()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:GetValue()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:number iNum})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:OnChange(iNum)"
    },
    {
      "trigger": "SetSelectedNumber",
      "contents": "SetSelectedNumber(${1:number keyCode})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:SetSelectedNumber(keyCode)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number keyCode})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:SetValue(keyCode)"
    },
    {
      "trigger": "UpdateText",
      "contents": "UpdateText()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBinder:UpdateText()"
    },
    {
      "trigger": "DBubbleContainer",
      "contents": "DBubbleContainer",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DBubbleContainer\")"
    },
    {
      "trigger": "OpenForPos",
      "contents": "OpenForPos(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DBubbleContainer:OpenForPos(x, y, w, h)"
    },
    {
      "trigger": "DButton",
      "contents": "DButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DButton\")"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:DoClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:DoRightClick()"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:GetDrawBorder()"
    },
    {
      "trigger": "IsDown",
      "contents": "IsDown()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:IsDown()"
    },
    {
      "trigger": "SetConsoleCommand",
      "contents": "SetConsoleCommand(${1:string command}, ${2:string args})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetConsoleCommand(command, args)"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetDisabled(disable)"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetDrawBorder(draw)"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:string img = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetIcon(img)"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string img = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetImage(img)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial img = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:SetMaterial(img)"
    },
    {
      "trigger": "UpdateColours",
      "contents": "UpdateColours(${1:table skin})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DButton:UpdateColours(skin)"
    },
    {
      "trigger": "DCategoryHeader",
      "contents": "DCategoryHeader",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DCategoryHeader\")"
    },
    {
      "trigger": "DCategoryList",
      "contents": "DCategoryList",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DCategoryList\")"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:string categoryName})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCategoryList:Add(categoryName)"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel element})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCategoryList:AddItem(element)"
    },
    {
      "trigger": "UnselectAll",
      "contents": "UnselectAll()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCategoryList:UnselectAll()"
    },
    {
      "trigger": "DCheckBox",
      "contents": "DCheckBox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DCheckBox\")"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:GetChecked()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:IsEditing()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:boolean bVal})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:OnChange(bVal)"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:SetChecked(checked)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:SetValue(checked)"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBox:Toggle()"
    },
    {
      "trigger": "DCheckBoxLabel",
      "contents": "DCheckBoxLabel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DCheckBoxLabel\")"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:GetChecked()"
    },
    {
      "trigger": "GetIndent",
      "contents": "GetIndent()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:GetIndent()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:boolean bVal})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:OnChange(bVal)"
    },
    {
      "trigger": "SetBright",
      "contents": "SetBright(${1:boolean bright})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetBright(bright)"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetChecked(checked)"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetConVar(convar)"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean darkify})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetDark(darkify)"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont(${1:string font})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetFont(font)"
    },
    {
      "trigger": "SetIndent",
      "contents": "SetIndent(${1:number ident})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetIndent(ident)"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetTextColor(color)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:SetValue(checked)"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCheckBoxLabel:Toggle()"
    },
    {
      "trigger": "DCollapsibleCategory",
      "contents": "DCollapsibleCategory",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DCollapsibleCategory\")"
    },
    {
      "trigger": "Add",
      "contents": "Add(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:Add(name)"
    },
    {
      "trigger": "AnimSlide",
      "contents": "AnimSlide(${1:table anim}, ${2:number delta}, ${3:table data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:AnimSlide(anim, delta, data)"
    },
    {
      "trigger": "DoExpansion",
      "contents": "DoExpansion(${1:boolean expand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:DoExpansion(expand)"
    },
    {
      "trigger": "GetAnimTime",
      "contents": "GetAnimTime()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetAnimTime()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetDrawBackground()"
    },
    {
      "trigger": "GetExpanded",
      "contents": "GetExpanded()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetExpanded()"
    },
    {
      "trigger": "GetHeaderHeight",
      "contents": "GetHeaderHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetHeaderHeight()"
    },
    {
      "trigger": "GetList",
      "contents": "GetList()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetList()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetPadding()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetPaintBackground()"
    },
    {
      "trigger": "GetStartHeight",
      "contents": "GetStartHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:GetStartHeight()"
    },
    {
      "trigger": "OnToggle",
      "contents": "OnToggle(${1:boolean expanded})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:OnToggle(expanded)"
    },
    {
      "trigger": "SetAnimTime",
      "contents": "SetAnimTime(${1:number time})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetAnimTime(time)"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetContents(pnl)"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetDrawBackground(draw)"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean expanded = true})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetExpanded(expanded)"
    },
    {
      "trigger": "SetHeaderHeight",
      "contents": "SetHeaderHeight(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetHeaderHeight(height)"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string label})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetLabel(label)"
    },
    {
      "trigger": "SetList",
      "contents": "SetList(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetList(pnl)"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetPadding(padding)"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean paint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetPaintBackground(paint)"
    },
    {
      "trigger": "SetStartHeight",
      "contents": "SetStartHeight(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:SetStartHeight(height)"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:Toggle()"
    },
    {
      "trigger": "UpdateAltLines",
      "contents": "UpdateAltLines()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DCollapsibleCategory:UpdateAltLines()"
    },
    {
      "trigger": "DColorButton",
      "contents": "DColorButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColorButton\")"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:GetColor()"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:GetDrawBorder()"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:GetID()"
    },
    {
      "trigger": "GetSelected",
      "contents": "GetSelected()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:GetSelected()"
    },
    {
      "trigger": "IsDown",
      "contents": "IsDown()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:IsDown()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color}, ${2:boolean noTooltip = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:SetColor(color, noTooltip)"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:SetDrawBorder(draw)"
    },
    {
      "trigger": "SetID",
      "contents": "SetID(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorButton:SetID(id)"
    },
    {
      "trigger": "DColorCombo",
      "contents": "DColorCombo",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColorCombo\")"
    },
    {
      "trigger": "BuildControls",
      "contents": "BuildControls()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCombo:BuildControls()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCombo:GetColor()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCombo:IsEditing()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:table newcol})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCombo:OnValueChanged(newcol)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table clr})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCombo:SetColor(clr)"
    },
    {
      "trigger": "DColorCube",
      "contents": "DColorCube",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColorCube\")"
    },
    {
      "trigger": "GetBaseRGB",
      "contents": "GetBaseRGB()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:GetBaseRGB()"
    },
    {
      "trigger": "GetHue",
      "contents": "GetHue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:GetHue()"
    },
    {
      "trigger": "GetRGB",
      "contents": "GetRGB()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:GetRGB()"
    },
    {
      "trigger": "OnUserChanged",
      "contents": "OnUserChanged(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:OnUserChanged(color)"
    },
    {
      "trigger": "SetBaseRGB",
      "contents": "SetBaseRGB(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:SetBaseRGB(color)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:SetColor(color)"
    },
    {
      "trigger": "SetHue",
      "contents": "SetHue(${1:number hue})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:SetHue(hue)"
    },
    {
      "trigger": "SetRGB",
      "contents": "SetRGB(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:SetRGB(clr)"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:TranslateValues(x, y)"
    },
    {
      "trigger": "UpdateColor",
      "contents": "UpdateColor(${1:number x = nil}, ${2:number y = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorCube:UpdateColor(x, y)"
    },
    {
      "trigger": "DColorMixer",
      "contents": "DColorMixer",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColorMixer\")"
    },
    {
      "trigger": "ConVarThink",
      "contents": "ConVarThink()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:ConVarThink()"
    },
    {
      "trigger": "DoConVarThink",
      "contents": "DoConVarThink(${1:string cvar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:DoConVarThink(cvar)"
    },
    {
      "trigger": "GetAlphaBar",
      "contents": "GetAlphaBar()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetAlphaBar()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetColor()"
    },
    {
      "trigger": "GetConVarA",
      "contents": "GetConVarA()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetConVarA()"
    },
    {
      "trigger": "GetConVarB",
      "contents": "GetConVarB()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetConVarB()"
    },
    {
      "trigger": "GetConVarG",
      "contents": "GetConVarG()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetConVarG()"
    },
    {
      "trigger": "GetConVarR",
      "contents": "GetConVarR()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetConVarR()"
    },
    {
      "trigger": "GetPalette",
      "contents": "GetPalette()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetPalette()"
    },
    {
      "trigger": "GetVector",
      "contents": "GetVector()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetVector()"
    },
    {
      "trigger": "GetWangs",
      "contents": "GetWangs()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:GetWangs()"
    },
    {
      "trigger": "SetAlphaBar",
      "contents": "SetAlphaBar(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetAlphaBar(show)"
    },
    {
      "trigger": "SetBaseColor",
      "contents": "SetBaseColor(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetBaseColor(clr)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetColor(color)"
    },
    {
      "trigger": "SetConVarA",
      "contents": "SetConVarA(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetConVarA(convar)"
    },
    {
      "trigger": "SetConVarB",
      "contents": "SetConVarB(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetConVarB(convar)"
    },
    {
      "trigger": "SetConVarG",
      "contents": "SetConVarG(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetConVarG(convar)"
    },
    {
      "trigger": "SetConVarR",
      "contents": "SetConVarR(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetConVarR(convar)"
    },
    {
      "trigger": "SetLabel",
      "contents": "SetLabel(${1:string text = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetLabel(text)"
    },
    {
      "trigger": "SetPalette",
      "contents": "SetPalette(${1:boolean enabled})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetPalette(enabled)"
    },
    {
      "trigger": "SetVector",
      "contents": "SetVector(${1:Vector vec})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetVector(vec)"
    },
    {
      "trigger": "SetWangs",
      "contents": "SetWangs(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:SetWangs(show)"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:TranslateValues()"
    },
    {
      "trigger": "UpdateColor",
      "contents": "UpdateColor(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:UpdateColor(clr)"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar(${1:string cvar}, ${2:string part}, ${3:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:UpdateConVar(cvar, part, clr)"
    },
    {
      "trigger": "UpdateConVars",
      "contents": "UpdateConVars(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:UpdateConVars(clr)"
    },
    {
      "trigger": "ValueChanged",
      "contents": "ValueChanged(${1:table col})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorMixer:ValueChanged(col)"
    },
    {
      "trigger": "DColorPalette",
      "contents": "DColorPalette",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColorPalette\")"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick(${1:table clr}, ${2:Panel btn})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:DoClick(clr, btn)"
    },
    {
      "trigger": "GetButtonSize",
      "contents": "GetButtonSize()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetButtonSize()"
    },
    {
      "trigger": "GetConVarA",
      "contents": "GetConVarA()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetConVarA()"
    },
    {
      "trigger": "GetConVarB",
      "contents": "GetConVarB()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetConVarB()"
    },
    {
      "trigger": "GetConVarG",
      "contents": "GetConVarG()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetConVarG()"
    },
    {
      "trigger": "GetConVarR",
      "contents": "GetConVarR()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetConVarR()"
    },
    {
      "trigger": "GetNumRows",
      "contents": "GetNumRows()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:GetNumRows()"
    },
    {
      "trigger": "NetworkColorChange",
      "contents": "NetworkColorChange()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:NetworkColorChange()"
    },
    {
      "trigger": "OnRightClickButton",
      "contents": "OnRightClickButton(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:OnRightClickButton(pnl)"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:table newcol})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:OnValueChanged(newcol)"
    },
    {
      "trigger": "Reset",
      "contents": "Reset()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:Reset()"
    },
    {
      "trigger": "ResetSavedColors",
      "contents": "ResetSavedColors()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:ResetSavedColors()"
    },
    {
      "trigger": "SaveColor",
      "contents": "SaveColor(${1:Panel btn}, ${2:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SaveColor(btn, clr)"
    },
    {
      "trigger": "SetButtonSize",
      "contents": "SetButtonSize(${1:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetButtonSize(size)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetColor(clr)"
    },
    {
      "trigger": "SetColorButtons",
      "contents": "SetColorButtons(${1:table tab})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetColorButtons(tab)"
    },
    {
      "trigger": "SetConVarA",
      "contents": "SetConVarA(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetConVarA(convar)"
    },
    {
      "trigger": "SetConVarB",
      "contents": "SetConVarB(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetConVarB(convar)"
    },
    {
      "trigger": "SetConVarG",
      "contents": "SetConVarG(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetConVarG(convar)"
    },
    {
      "trigger": "SetConVarR",
      "contents": "SetConVarR(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetConVarR(convar)"
    },
    {
      "trigger": "SetNumRows",
      "contents": "SetNumRows(${1:number rows})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:SetNumRows(rows)"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar(${1:string name}, ${2:string key}, ${3:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:UpdateConVar(name, key, clr)"
    },
    {
      "trigger": "UpdateConVars",
      "contents": "UpdateConVars(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColorPalette:UpdateConVars(clr)"
    },
    {
      "trigger": "DColumnSheet",
      "contents": "DColumnSheet",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DColumnSheet\")"
    },
    {
      "trigger": "AddSheet",
      "contents": "AddSheet(${1:string name}, ${2:Panel pnl}, ${3:string icon = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColumnSheet:AddSheet(name, pnl, icon)"
    },
    {
      "trigger": "GetActiveButton",
      "contents": "GetActiveButton()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColumnSheet:GetActiveButton()"
    },
    {
      "trigger": "SetActiveButton",
      "contents": "SetActiveButton(${1:Panel active})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColumnSheet:SetActiveButton(active)"
    },
    {
      "trigger": "UseButtonOnlyStyle",
      "contents": "UseButtonOnlyStyle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DColumnSheet:UseButtonOnlyStyle()"
    },
    {
      "trigger": "DComboBox",
      "contents": "DComboBox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DComboBox\")"
    },
    {
      "trigger": "AddChoice",
      "contents": "AddChoice(${1:string value}, ${2:any data = nil}, ${3:boolean select = false}, ${4:string icon = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:AddChoice(value, data, select, icon)"
    },
    {
      "trigger": "AddSpacer",
      "contents": "AddSpacer()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:AddSpacer()"
    },
    {
      "trigger": "CheckConVarChanges",
      "contents": "CheckConVarChanges()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:CheckConVarChanges()"
    },
    {
      "trigger": "ChooseOption",
      "contents": "ChooseOption(${1:string value}, ${2:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:ChooseOption(value, index)"
    },
    {
      "trigger": "ChooseOptionID",
      "contents": "ChooseOptionID(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:ChooseOptionID(index)"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:Clear()"
    },
    {
      "trigger": "CloseMenu",
      "contents": "CloseMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:CloseMenu()"
    },
    {
      "trigger": "GetOptionData",
      "contents": "GetOptionData(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetOptionData(index)"
    },
    {
      "trigger": "GetOptionText",
      "contents": "GetOptionText(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetOptionText(index)"
    },
    {
      "trigger": "GetOptionTextByData",
      "contents": "GetOptionTextByData(${1:string data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetOptionTextByData(data)"
    },
    {
      "trigger": "GetSelected",
      "contents": "GetSelected()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetSelected()"
    },
    {
      "trigger": "GetSelectedID",
      "contents": "GetSelectedID()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetSelectedID()"
    },
    {
      "trigger": "GetSortItems",
      "contents": "GetSortItems()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:GetSortItems()"
    },
    {
      "trigger": "IsMenuOpen",
      "contents": "IsMenuOpen()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:IsMenuOpen()"
    },
    {
      "trigger": "OnMenuOpened",
      "contents": "OnMenuOpened(${1:Panel menu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:OnMenuOpened(menu)"
    },
    {
      "trigger": "OnSelect",
      "contents": "OnSelect(${1:number index}, ${2:string value}, ${3:any data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:OnSelect(index, value, data)"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:OpenMenu()"
    },
    {
      "trigger": "RemoveChoice",
      "contents": "RemoveChoice(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:RemoveChoice(index)"
    },
    {
      "trigger": "SetSortItems",
      "contents": "SetSortItems(${1:boolean sort})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:SetSortItems(sort)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:string value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DComboBox:SetValue(value)"
    },
    {
      "trigger": "DDragBase",
      "contents": "DDragBase",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DDragBase\")"
    },
    {
      "trigger": "DropAction_Copy",
      "contents": "DropAction_Copy(${1:table drops}, ${2:boolean bDoDrop}, ${3:string command}, ${4:number y}, ${5:number x})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:DropAction_Copy(drops, bDoDrop, command, y, x)"
    },
    {
      "trigger": "DropAction_Normal",
      "contents": "DropAction_Normal(${1:table drops}, ${2:boolean bDoDrop}, ${3:string command}, ${4:number y}, ${5:number x})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:DropAction_Normal(drops, bDoDrop, command, y, x)"
    },
    {
      "trigger": "DropAction_Simple",
      "contents": "DropAction_Simple(${1:table drops}, ${2:boolean bDoDrop}, ${3:string command}, ${4:number y}, ${5:number x})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:DropAction_Simple(drops, bDoDrop, command, y, x)"
    },
    {
      "trigger": "GetDnD",
      "contents": "GetDnD()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:GetDnD()"
    },
    {
      "trigger": "GetReadOnly",
      "contents": "GetReadOnly()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:GetReadOnly()"
    },
    {
      "trigger": "GetUseLiveDrag",
      "contents": "GetUseLiveDrag()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:GetUseLiveDrag()"
    },
    {
      "trigger": "MakeDroppable",
      "contents": "MakeDroppable(${1:string name}, ${2:boolean allowCopy})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:MakeDroppable(name, allowCopy)"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:OnModified()"
    },
    {
      "trigger": "SetDnD",
      "contents": "SetDnD(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:SetDnD(name)"
    },
    {
      "trigger": "SetDropPos",
      "contents": "SetDropPos(${1:string pos = 5})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:SetDropPos(pos)"
    },
    {
      "trigger": "SetReadOnly",
      "contents": "SetReadOnly(${1:boolean name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:SetReadOnly(name)"
    },
    {
      "trigger": "SetUseLiveDrag",
      "contents": "SetUseLiveDrag(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:SetUseLiveDrag(newState)"
    },
    {
      "trigger": "UpdateDropTarget",
      "contents": "UpdateDropTarget(${1:number drop}, ${2:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDragBase:UpdateDropTarget(drop, pnl)"
    },
    {
      "trigger": "DDrawer",
      "contents": "DDrawer",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DDrawer\")"
    },
    {
      "trigger": "Close",
      "contents": "Close()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:Close()"
    },
    {
      "trigger": "GetOpenSize",
      "contents": "GetOpenSize()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:GetOpenSize()"
    },
    {
      "trigger": "GetOpenTime",
      "contents": "GetOpenTime()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:GetOpenTime()"
    },
    {
      "trigger": "Open",
      "contents": "Open()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:Open()"
    },
    {
      "trigger": "SetOpenSize",
      "contents": "SetOpenSize(${1:number Value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:SetOpenSize(Value)"
    },
    {
      "trigger": "SetOpenTime",
      "contents": "SetOpenTime(${1:number value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:SetOpenTime(value)"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DDrawer:Toggle()"
    },
    {
      "trigger": "DEntityProperties",
      "contents": "DEntityProperties",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DEntityProperties\")"
    },
    {
      "trigger": "EditVariable",
      "contents": "EditVariable(${1:string varname}, ${2:table editdata})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DEntityProperties:EditVariable(varname, editdata)"
    },
    {
      "trigger": "EntityLost",
      "contents": "EntityLost()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DEntityProperties:EntityLost()"
    },
    {
      "trigger": "OnEntityLost",
      "contents": "OnEntityLost()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DEntityProperties:OnEntityLost()"
    },
    {
      "trigger": "RebuildControls",
      "contents": "RebuildControls()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DEntityProperties:RebuildControls()"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DEntityProperties:SetEntity(ent)"
    },
    {
      "trigger": "DExpandButton",
      "contents": "DExpandButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DExpandButton\")"
    },
    {
      "trigger": "GetExpanded",
      "contents": "GetExpanded()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DExpandButton:GetExpanded()"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean expanded})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DExpandButton:SetExpanded(expanded)"
    },
    {
      "trigger": "DFileBrowser",
      "contents": "DFileBrowser",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DFileBrowser\")"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:Clear()"
    },
    {
      "trigger": "GetBaseFolder",
      "contents": "GetBaseFolder()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetBaseFolder()"
    },
    {
      "trigger": "GetCurrentFolder",
      "contents": "GetCurrentFolder()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetCurrentFolder()"
    },
    {
      "trigger": "GetFileTypes",
      "contents": "GetFileTypes()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetFileTypes()"
    },
    {
      "trigger": "GetFolderNode",
      "contents": "GetFolderNode()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetFolderNode()"
    },
    {
      "trigger": "GetModels",
      "contents": "GetModels()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetModels()"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetName()"
    },
    {
      "trigger": "GetOpen",
      "contents": "GetOpen()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetOpen()"
    },
    {
      "trigger": "GetPath",
      "contents": "GetPath()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetPath()"
    },
    {
      "trigger": "GetSearch",
      "contents": "GetSearch()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:GetSearch()"
    },
    {
      "trigger": "OnDoubleClick",
      "contents": "OnDoubleClick(${1:Panel selectedPanel}, ${2:string filePath})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:OnDoubleClick(selectedPanel, filePath)"
    },
    {
      "trigger": "OnRightClick",
      "contents": "OnRightClick(${1:string filePath}, ${2:Panel selectedPanel})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:OnRightClick(filePath, selectedPanel)"
    },
    {
      "trigger": "OnSelect",
      "contents": "OnSelect(${1:Panel selectedPanel}, ${2:string filePath})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:OnSelect(selectedPanel, filePath)"
    },
    {
      "trigger": "SetBaseFolder",
      "contents": "SetBaseFolder(${1:string baseDir})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetBaseFolder(baseDir)"
    },
    {
      "trigger": "SetCurrentFolder",
      "contents": "SetCurrentFolder(${1:string currentDir})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetCurrentFolder(currentDir)"
    },
    {
      "trigger": "SetFileTypes",
      "contents": "SetFileTypes(${1:string fileTypes = *.*})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetFileTypes(fileTypes)"
    },
    {
      "trigger": "SetModels",
      "contents": "SetModels(${1:boolean showModels = false})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetModels(showModels)"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string treeName = `baseFolder`})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetName(treeName)"
    },
    {
      "trigger": "SetOpen",
      "contents": "SetOpen(${1:boolean open = false}, ${2:boolean useAnim = false})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetOpen(open, useAnim)"
    },
    {
      "trigger": "SetPath",
      "contents": "SetPath(${1:string path})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetPath(path)"
    },
    {
      "trigger": "SetSearch",
      "contents": "SetSearch(${1:string filter = *})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetSearch(filter)"
    },
    {
      "trigger": "Setup",
      "contents": "Setup()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:Setup()"
    },
    {
      "trigger": "SetupFiles",
      "contents": "SetupFiles()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetupFiles()"
    },
    {
      "trigger": "SetupTree",
      "contents": "SetupTree()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SetupTree()"
    },
    {
      "trigger": "ShowFolder",
      "contents": "ShowFolder(${1:string currentDir})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:ShowFolder(currentDir)"
    },
    {
      "trigger": "SortFiles",
      "contents": "SortFiles(${1:boolean descending = false})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFileBrowser:SortFiles(descending)"
    },
    {
      "trigger": "DForm",
      "contents": "DForm",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DForm\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel left}, ${2:Panel right = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:AddItem(left, right)"
    },
    {
      "trigger": "Button",
      "contents": "Button(${1:string text}, ${2:string concommand}, ${3:vararg args})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:Button(text, concommand, args)"
    },
    {
      "trigger": "CheckBox",
      "contents": "CheckBox(${1:string label}, ${2:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:CheckBox(label, convar)"
    },
    {
      "trigger": "ComboBox",
      "contents": "ComboBox(${1:string title}, ${2:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:ComboBox(title, convar)"
    },
    {
      "trigger": "ControlHelp",
      "contents": "ControlHelp(${1:string help})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:ControlHelp(help)"
    },
    {
      "trigger": "GetAutoSize",
      "contents": "GetAutoSize()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:GetAutoSize()"
    },
    {
      "trigger": "GetSpacing",
      "contents": "GetSpacing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:GetSpacing()"
    },
    {
      "trigger": "Help",
      "contents": "Help(${1:string help})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:Help(help)"
    },
    {
      "trigger": "ListBox",
      "contents": "ListBox(${1:string label})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:ListBox(label)"
    },
    {
      "trigger": "NumberWang",
      "contents": "NumberWang(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:NumberWang(label, convar, min, max, decimals)"
    },
    {
      "trigger": "NumSlider",
      "contents": "NumSlider(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:NumSlider(label, convar, min, max, decimals)"
    },
    {
      "trigger": "PanelSelect",
      "contents": "PanelSelect()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:PanelSelect()"
    },
    {
      "trigger": "PropSelect",
      "contents": "PropSelect(${1:string label}, ${2:string convar}, ${3:table models}, ${4:number height = 2})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:PropSelect(label, convar, models, height)"
    },
    {
      "trigger": "Rebuild",
      "contents": "Rebuild()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:Rebuild()"
    },
    {
      "trigger": "SetAutoSize",
      "contents": "SetAutoSize(${1:boolean undefined})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:SetAutoSize()"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:SetName(name)"
    },
    {
      "trigger": "SetSpacing",
      "contents": "SetSpacing(${1:number undefined})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:SetSpacing()"
    },
    {
      "trigger": "TextEntry",
      "contents": "TextEntry(${1:string label}, ${2:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DForm:TextEntry(label, convar)"
    },
    {
      "trigger": "DFrame",
      "contents": "DFrame",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DFrame\")"
    },
    {
      "trigger": "Center",
      "contents": "Center()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:Center()"
    },
    {
      "trigger": "Close",
      "contents": "Close()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:Close()"
    },
    {
      "trigger": "GetBackgroundBlur",
      "contents": "GetBackgroundBlur()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetBackgroundBlur()"
    },
    {
      "trigger": "GetDeleteOnClose",
      "contents": "GetDeleteOnClose()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetDeleteOnClose()"
    },
    {
      "trigger": "GetDraggable",
      "contents": "GetDraggable()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetDraggable()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetIsMenu()"
    },
    {
      "trigger": "GetMinHeight",
      "contents": "GetMinHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetMinHeight()"
    },
    {
      "trigger": "GetMinWidth",
      "contents": "GetMinWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetMinWidth()"
    },
    {
      "trigger": "GetPaintShadow",
      "contents": "GetPaintShadow()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetPaintShadow()"
    },
    {
      "trigger": "GetScreenLock",
      "contents": "GetScreenLock()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetScreenLock()"
    },
    {
      "trigger": "GetSizable",
      "contents": "GetSizable()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetSizable()"
    },
    {
      "trigger": "GetTitle",
      "contents": "GetTitle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:GetTitle()"
    },
    {
      "trigger": "IsActive",
      "contents": "IsActive()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:IsActive()"
    },
    {
      "trigger": "OnClose",
      "contents": "OnClose()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:OnClose()"
    },
    {
      "trigger": "SetBackgroundBlur",
      "contents": "SetBackgroundBlur(${1:boolean blur})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetBackgroundBlur(blur)"
    },
    {
      "trigger": "SetDeleteOnClose",
      "contents": "SetDeleteOnClose(${1:boolean shouldDelete})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetDeleteOnClose(shouldDelete)"
    },
    {
      "trigger": "SetDraggable",
      "contents": "SetDraggable(${1:boolean draggable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetDraggable(draggable)"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetIcon(path)"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetIsMenu(isMenu)"
    },
    {
      "trigger": "SetMinHeight",
      "contents": "SetMinHeight(${1:number minH})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetMinHeight(minH)"
    },
    {
      "trigger": "SetMinWidth",
      "contents": "SetMinWidth(${1:number minW})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetMinWidth(minW)"
    },
    {
      "trigger": "SetPaintShadow",
      "contents": "SetPaintShadow(${1:boolean shouldPaint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetPaintShadow(shouldPaint)"
    },
    {
      "trigger": "SetScreenLock",
      "contents": "SetScreenLock(${1:boolean lock})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetScreenLock(lock)"
    },
    {
      "trigger": "SetSizable",
      "contents": "SetSizable(${1:boolean sizeable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetSizable(sizeable)"
    },
    {
      "trigger": "SetTitle",
      "contents": "SetTitle(${1:string title})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:SetTitle(title)"
    },
    {
      "trigger": "ShowCloseButton",
      "contents": "ShowCloseButton(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DFrame:ShowCloseButton(show)"
    },
    {
      "trigger": "DGrid",
      "contents": "DGrid",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DGrid\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel item})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:AddItem(item)"
    },
    {
      "trigger": "GetCols",
      "contents": "GetCols()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:GetCols()"
    },
    {
      "trigger": "GetColWide",
      "contents": "GetColWide()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:GetColWide()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:GetItems()"
    },
    {
      "trigger": "GetRowHeight",
      "contents": "GetRowHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:GetRowHeight()"
    },
    {
      "trigger": "RemoveItem",
      "contents": "RemoveItem(${1:Panel item}, ${2:boolean bDontDelete = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:RemoveItem(item, bDontDelete)"
    },
    {
      "trigger": "SetCols",
      "contents": "SetCols(${1:number cols})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:SetCols(cols)"
    },
    {
      "trigger": "SetColWide",
      "contents": "SetColWide(${1:number colWidth})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:SetColWide(colWidth)"
    },
    {
      "trigger": "SetRowHeight",
      "contents": "SetRowHeight(${1:number rowHeight})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:SetRowHeight(rowHeight)"
    },
    {
      "trigger": "SortByMember",
      "contents": "SortByMember(${1:string key}, ${2:boolean desc = true})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DGrid:SortByMember(key, desc)"
    },
    {
      "trigger": "DHorizontalDivider",
      "contents": "DHorizontalDivider",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DHorizontalDivider\")"
    },
    {
      "trigger": "GetDividerWidth",
      "contents": "GetDividerWidth()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetDividerWidth()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetDragging()"
    },
    {
      "trigger": "GetHoldPos",
      "contents": "GetHoldPos()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetHoldPos()"
    },
    {
      "trigger": "GetLeft",
      "contents": "GetLeft()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetLeft()"
    },
    {
      "trigger": "GetLeftMin",
      "contents": "GetLeftMin()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetLeftMin()"
    },
    {
      "trigger": "GetLeftWidth",
      "contents": "GetLeftWidth()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetLeftWidth()"
    },
    {
      "trigger": "GetMiddle",
      "contents": "GetMiddle()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetMiddle()"
    },
    {
      "trigger": "GetRight",
      "contents": "GetRight()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetRight()"
    },
    {
      "trigger": "GetRightMin",
      "contents": "GetRightMin()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:GetRightMin()"
    },
    {
      "trigger": "SetDividerWidth",
      "contents": "SetDividerWidth(${1:number width})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetDividerWidth(width)"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean dragonot})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetDragging(dragonot)"
    },
    {
      "trigger": "SetHoldPos",
      "contents": "SetHoldPos(${1:number x})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetHoldPos(x)"
    },
    {
      "trigger": "SetLeft",
      "contents": "SetLeft(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetLeft(pnl)"
    },
    {
      "trigger": "SetLeftMin",
      "contents": "SetLeftMin(${1:number minWidth})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetLeftMin(minWidth)"
    },
    {
      "trigger": "SetLeftWidth",
      "contents": "SetLeftWidth(${1:number width})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetLeftWidth(width)"
    },
    {
      "trigger": "SetMiddle",
      "contents": "SetMiddle(${1:Panel middle})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetMiddle(middle)"
    },
    {
      "trigger": "SetRight",
      "contents": "SetRight(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetRight(pnl)"
    },
    {
      "trigger": "SetRightMin",
      "contents": "SetRightMin(${1:number minWidth})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:SetRightMin(minWidth)"
    },
    {
      "trigger": "StartGrab",
      "contents": "StartGrab()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalDivider:StartGrab()"
    },
    {
      "trigger": "DHorizontalScroller",
      "contents": "DHorizontalScroller",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DHorizontalScroller\")"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:AddPanel(pnl)"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:GetCanvas()"
    },
    {
      "trigger": "GetOverlap",
      "contents": "GetOverlap()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:GetOverlap()"
    },
    {
      "trigger": "GetShowDropTargets",
      "contents": "GetShowDropTargets()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:GetShowDropTargets()"
    },
    {
      "trigger": "MakeDroppable",
      "contents": "MakeDroppable(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:MakeDroppable(name)"
    },
    {
      "trigger": "OnDragModified",
      "contents": "OnDragModified()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:OnDragModified()"
    },
    {
      "trigger": "ScrollToChild",
      "contents": "ScrollToChild(${1:Panel target})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:ScrollToChild(target)"
    },
    {
      "trigger": "SetOverlap",
      "contents": "SetOverlap(${1:number overlap})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:SetOverlap(overlap)"
    },
    {
      "trigger": "SetScroll",
      "contents": "SetScroll(${1:number scroll})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:SetScroll(scroll)"
    },
    {
      "trigger": "SetShowDropTargets",
      "contents": "SetShowDropTargets(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:SetShowDropTargets(newState)"
    },
    {
      "trigger": "SetUseLiveDrag",
      "contents": "SetUseLiveDrag(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHorizontalScroller:SetUseLiveDrag(newState)"
    },
    {
      "trigger": "DHScrollBar",
      "contents": "DHScrollBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DHScrollBar\")"
    },
    {
      "trigger": "AddScroll",
      "contents": "AddScroll(${1:number add})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:AddScroll(add)"
    },
    {
      "trigger": "AnimateTo",
      "contents": "AnimateTo(${1:number scroll}, ${2:number length}, ${3:number delay = 0}, ${4:number ease = -1})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:AnimateTo(scroll, length, delay, ease)"
    },
    {
      "trigger": "BarScale",
      "contents": "BarScale()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:BarScale()"
    },
    {
      "trigger": "GetHideButtons",
      "contents": "GetHideButtons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:GetHideButtons()"
    },
    {
      "trigger": "GetOffset",
      "contents": "GetOffset()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:GetOffset()"
    },
    {
      "trigger": "GetScroll",
      "contents": "GetScroll()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:GetScroll()"
    },
    {
      "trigger": "Grip",
      "contents": "Grip()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:Grip()"
    },
    {
      "trigger": "SetHideButtons",
      "contents": "SetHideButtons(${1:boolean hide})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:SetHideButtons(hide)"
    },
    {
      "trigger": "SetScroll",
      "contents": "SetScroll(${1:number scroll})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:SetScroll(scroll)"
    },
    {
      "trigger": "SetUp",
      "contents": "SetUp(${1:number barSize}, ${2:number canvasSize})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHScrollBar:SetUp(barSize, canvasSize)"
    },
    {
      "trigger": "DHTML",
      "contents": "DHTML",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DHTML\")"
    },
    {
      "trigger": "AddFunction",
      "contents": "AddFunction(${1:string library}, ${2:string name}, ${3:function callback})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:AddFunction(library, name, callback)"
    },
    {
      "trigger": "Call",
      "contents": "Call(${1:string js})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:Call(js)"
    },
    {
      "trigger": "ConsoleMessage",
      "contents": "ConsoleMessage(${1:string msg})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:ConsoleMessage(msg)"
    },
    {
      "trigger": "GetAllowLua",
      "contents": "GetAllowLua()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:GetAllowLua()"
    },
    {
      "trigger": "GetScrollbars",
      "contents": "GetScrollbars()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:GetScrollbars()"
    },
    {
      "trigger": "OnBeginLoadingDocument",
      "contents": "OnBeginLoadingDocument(${1:string url})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnBeginLoadingDocument(url)"
    },
    {
      "trigger": "OnCallback",
      "contents": "OnCallback(${1:string library}, ${2:string name}, ${3:table arguments})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnCallback(library, name, arguments)"
    },
    {
      "trigger": "OnChangeTargetURL",
      "contents": "OnChangeTargetURL(${1:string url})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnChangeTargetURL(url)"
    },
    {
      "trigger": "OnChangeTitle",
      "contents": "OnChangeTitle(${1:string newTitle})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnChangeTitle(newTitle)"
    },
    {
      "trigger": "OnChildViewCreated",
      "contents": "OnChildViewCreated(${1:string sourceURL}, ${2:string targetURL}, ${3:boolean isPopup})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnChildViewCreated(sourceURL, targetURL, isPopup)"
    },
    {
      "trigger": "OnDocumentReady",
      "contents": "OnDocumentReady(${1:string url})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnDocumentReady(url)"
    },
    {
      "trigger": "OnFinishLoadingDocument",
      "contents": "OnFinishLoadingDocument(${1:string url})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:OnFinishLoadingDocument(url)"
    },
    {
      "trigger": "QueueJavascript",
      "contents": "QueueJavascript(${1:string js})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:QueueJavascript(js)"
    },
    {
      "trigger": "SetAllowLua",
      "contents": "SetAllowLua(${1:boolean allow = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:SetAllowLua(allow)"
    },
    {
      "trigger": "SetScrollbars",
      "contents": "SetScrollbars(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTML:SetScrollbars(show)"
    },
    {
      "trigger": "DHTMLControls",
      "contents": "DHTMLControls",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DHTMLControls\")"
    },
    {
      "trigger": "FinishedLoading",
      "contents": "FinishedLoading()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:FinishedLoading()"
    },
    {
      "trigger": "SetButtonColor",
      "contents": "SetButtonColor(${1:table clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:SetButtonColor(clr)"
    },
    {
      "trigger": "SetHTML",
      "contents": "SetHTML(${1:Panel dhtml})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:SetHTML(dhtml)"
    },
    {
      "trigger": "StartedLoading",
      "contents": "StartedLoading()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:StartedLoading()"
    },
    {
      "trigger": "UpdateHistory",
      "contents": "UpdateHistory(${1:string url})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:UpdateHistory(url)"
    },
    {
      "trigger": "UpdateNavButtonStatus",
      "contents": "UpdateNavButtonStatus()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DHTMLControls:UpdateNavButtonStatus()"
    },
    {
      "trigger": "DIconBrowser",
      "contents": "DIconBrowser",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DIconBrowser\")"
    },
    {
      "trigger": "Fill",
      "contents": "Fill()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:Fill()"
    },
    {
      "trigger": "FilterByText",
      "contents": "FilterByText(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:FilterByText(text)"
    },
    {
      "trigger": "GetManual",
      "contents": "GetManual()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:GetManual()"
    },
    {
      "trigger": "GetSelectedIcon",
      "contents": "GetSelectedIcon()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:GetSelectedIcon()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:OnChange()"
    },
    {
      "trigger": "OnChangeInternal",
      "contents": "OnChangeInternal()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:OnChangeInternal()"
    },
    {
      "trigger": "ScrollToSelected",
      "contents": "ScrollToSelected()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:ScrollToSelected()"
    },
    {
      "trigger": "SelectIcon",
      "contents": "SelectIcon(${1:string icon})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:SelectIcon(icon)"
    },
    {
      "trigger": "SetManual",
      "contents": "SetManual(${1:boolean manual})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:SetManual(manual)"
    },
    {
      "trigger": "SetSelectedIcon",
      "contents": "SetSelectedIcon(${1:string str})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconBrowser:SetSelectedIcon(str)"
    },
    {
      "trigger": "DIconLayout",
      "contents": "DIconLayout",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DIconLayout\")"
    },
    {
      "trigger": "Copy",
      "contents": "Copy()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:Copy()"
    },
    {
      "trigger": "CopyContents",
      "contents": "CopyContents(${1:Panel from})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:CopyContents(from)"
    },
    {
      "trigger": "GetBorder",
      "contents": "GetBorder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetBorder()"
    },
    {
      "trigger": "GetLayoutDir",
      "contents": "GetLayoutDir()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetLayoutDir()"
    },
    {
      "trigger": "GetSpaceX",
      "contents": "GetSpaceX()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetSpaceX()"
    },
    {
      "trigger": "GetSpaceY",
      "contents": "GetSpaceY()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetSpaceY()"
    },
    {
      "trigger": "GetStretchHeight",
      "contents": "GetStretchHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetStretchHeight()"
    },
    {
      "trigger": "GetStretchWidth",
      "contents": "GetStretchWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:GetStretchWidth()"
    },
    {
      "trigger": "Layout",
      "contents": "Layout()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:Layout()"
    },
    {
      "trigger": "LayoutIcons_LEFT",
      "contents": "LayoutIcons_LEFT()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:LayoutIcons_LEFT()"
    },
    {
      "trigger": "LayoutIcons_TOP",
      "contents": "LayoutIcons_TOP()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:LayoutIcons_TOP()"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:OnModified()"
    },
    {
      "trigger": "SetBorder",
      "contents": "SetBorder(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetBorder(width)"
    },
    {
      "trigger": "SetLayoutDir",
      "contents": "SetLayoutDir(${1:number direction})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetLayoutDir(direction)"
    },
    {
      "trigger": "SetSpaceX",
      "contents": "SetSpaceX(${1:number xSpacing})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetSpaceX(xSpacing)"
    },
    {
      "trigger": "SetSpaceY",
      "contents": "SetSpaceY(${1:number ySpacing})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetSpaceY(ySpacing)"
    },
    {
      "trigger": "SetStretchHeight",
      "contents": "SetStretchHeight(${1:boolean do_stretch})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetStretchHeight(do_stretch)"
    },
    {
      "trigger": "SetStretchWidth",
      "contents": "SetStretchWidth(${1:boolean stretchW})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DIconLayout:SetStretchWidth(stretchW)"
    },
    {
      "trigger": "DImage",
      "contents": "DImage",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DImage\")"
    },
    {
      "trigger": "DoLoadMaterial",
      "contents": "DoLoadMaterial()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:DoLoadMaterial()"
    },
    {
      "trigger": "FixVertexLitMaterial",
      "contents": "FixVertexLitMaterial()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:FixVertexLitMaterial()"
    },
    {
      "trigger": "GetFailsafeMatName",
      "contents": "GetFailsafeMatName()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetFailsafeMatName()"
    },
    {
      "trigger": "GetImage",
      "contents": "GetImage()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetImage()"
    },
    {
      "trigger": "GetImageColor",
      "contents": "GetImageColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetImageColor()"
    },
    {
      "trigger": "GetKeepAspect",
      "contents": "GetKeepAspect()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetKeepAspect()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetMaterial()"
    },
    {
      "trigger": "GetMatName",
      "contents": "GetMatName()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:GetMatName()"
    },
    {
      "trigger": "LoadMaterial",
      "contents": "LoadMaterial()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:LoadMaterial()"
    },
    {
      "trigger": "PaintAt",
      "contents": "PaintAt(${1:number posX}, ${2:number posY}, ${3:number width}, ${4:number height})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:PaintAt(posX, posY, width, height)"
    },
    {
      "trigger": "SetFailsafeMatName",
      "contents": "SetFailsafeMatName(${1:string backupMat})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetFailsafeMatName(backupMat)"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string strImage}, ${2:string strBackup = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetImage(strImage, strBackup)"
    },
    {
      "trigger": "SetImageColor",
      "contents": "SetImageColor(${1:table col})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetImageColor(col)"
    },
    {
      "trigger": "SetKeepAspect",
      "contents": "SetKeepAspect(${1:boolean keep})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetKeepAspect(keep)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial mat})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetMaterial(mat)"
    },
    {
      "trigger": "SetMatName",
      "contents": "SetMatName(${1:string mat})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetMatName(mat)"
    },
    {
      "trigger": "SetOnViewMaterial",
      "contents": "SetOnViewMaterial(${1:string mat}, ${2:string backupMat})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:SetOnViewMaterial(mat, backupMat)"
    },
    {
      "trigger": "Unloaded",
      "contents": "Unloaded()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImage:Unloaded()"
    },
    {
      "trigger": "DImageButton",
      "contents": "DImageButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DImageButton\")"
    },
    {
      "trigger": "DepressImage",
      "contents": "DepressImage()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:DepressImage()"
    },
    {
      "trigger": "GetDepressImage",
      "contents": "GetDepressImage()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:GetDepressImage()"
    },
    {
      "trigger": "GetImage",
      "contents": "GetImage()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:GetImage()"
    },
    {
      "trigger": "GetStretchToFit",
      "contents": "GetStretchToFit()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:GetStretchToFit()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetColor(color)"
    },
    {
      "trigger": "SetDepressImage",
      "contents": "SetDepressImage(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetDepressImage(enable)"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetIcon()"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage(${1:string strImage}, ${2:string strBackup})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetImage(strImage, strBackup)"
    },
    {
      "trigger": "SetImageVisible",
      "contents": "SetImageVisible(${1:boolean visible})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetImageVisible(visible)"
    },
    {
      "trigger": "SetKeepAspect",
      "contents": "SetKeepAspect(${1:boolean keep})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetKeepAspect(keep)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial mat})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetMaterial(mat)"
    },
    {
      "trigger": "SetOnViewMaterial",
      "contents": "SetOnViewMaterial(${1:string mat}, ${2:string backup})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetOnViewMaterial(mat, backup)"
    },
    {
      "trigger": "SetStretchToFit",
      "contents": "SetStretchToFit(${1:boolean stretch})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DImageButton:SetStretchToFit(stretch)"
    },
    {
      "trigger": "DKillIcon",
      "contents": "DKillIcon",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DKillIcon\")"
    },
    {
      "trigger": "GetName",
      "contents": "GetName()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DKillIcon:GetName()"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string iconName})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DKillIcon:SetName(iconName)"
    },
    {
      "trigger": "DLabel",
      "contents": "DLabel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DLabel\")"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoClick()"
    },
    {
      "trigger": "DoClickInternal",
      "contents": "DoClickInternal()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoClickInternal()"
    },
    {
      "trigger": "DoDoubleClick",
      "contents": "DoDoubleClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoDoubleClick()"
    },
    {
      "trigger": "DoDoubleClickInternal",
      "contents": "DoDoubleClickInternal()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoDoubleClickInternal()"
    },
    {
      "trigger": "DoMiddleClick",
      "contents": "DoMiddleClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoMiddleClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:DoRightClick()"
    },
    {
      "trigger": "GetAutoStretchVertical",
      "contents": "GetAutoStretchVertical()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetAutoStretchVertical()"
    },
    {
      "trigger": "GetBright",
      "contents": "GetBright()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetBright()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetColor()"
    },
    {
      "trigger": "GetDark",
      "contents": "GetDark()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetDark()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetDisabled()"
    },
    {
      "trigger": "GetDoubleClickingEnabled",
      "contents": "GetDoubleClickingEnabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetDoubleClickingEnabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetDrawBackground()"
    },
    {
      "trigger": "GetFont",
      "contents": "GetFont()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetFont()"
    },
    {
      "trigger": "GetHighlight",
      "contents": "GetHighlight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetHighlight()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetIsMenu()"
    },
    {
      "trigger": "GetIsToggle",
      "contents": "GetIsToggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetIsToggle()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetPaintBackground()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetTextColor()"
    },
    {
      "trigger": "GetTextStyleColor",
      "contents": "GetTextStyleColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetTextStyleColor()"
    },
    {
      "trigger": "GetToggle",
      "contents": "GetToggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:GetToggle()"
    },
    {
      "trigger": "OnDepressed",
      "contents": "OnDepressed()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:OnDepressed()"
    },
    {
      "trigger": "OnReleased",
      "contents": "OnReleased()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:OnReleased()"
    },
    {
      "trigger": "OnToggled",
      "contents": "OnToggled(${1:boolean toggleState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:OnToggled(toggleState)"
    },
    {
      "trigger": "SetAutoStretchVertical",
      "contents": "SetAutoStretchVertical(${1:boolean stretch})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetAutoStretchVertical(stretch)"
    },
    {
      "trigger": "SetBright",
      "contents": "SetBright(${1:boolean bright})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetBright(bright)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetColor(color)"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean dark})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetDark(dark)"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetDisabled(disable)"
    },
    {
      "trigger": "SetDoubleClickingEnabled",
      "contents": "SetDoubleClickingEnabled(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetDoubleClickingEnabled(enable)"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetDrawBackground(draw)"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont(${1:string fontName})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetFont(fontName)"
    },
    {
      "trigger": "SetHighlight",
      "contents": "SetHighlight(${1:boolean highlight})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetHighlight(highlight)"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetIsMenu(isMenu)"
    },
    {
      "trigger": "SetIsToggle",
      "contents": "SetIsToggle(${1:boolean allowToggle})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetIsToggle(allowToggle)"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean paint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetPaintBackground(paint)"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetTextColor(color)"
    },
    {
      "trigger": "SetTextStyleColor",
      "contents": "SetTextStyleColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetTextStyleColor(color)"
    },
    {
      "trigger": "SetToggle",
      "contents": "SetToggle(${1:boolean toggleState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:SetToggle(toggleState)"
    },
    {
      "trigger": "Toggle",
      "contents": "Toggle()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:Toggle()"
    },
    {
      "trigger": "UpdateColours",
      "contents": "UpdateColours(${1:table skin})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:UpdateColours(skin)"
    },
    {
      "trigger": "UpdateFGColor",
      "contents": "UpdateFGColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabel:UpdateFGColor()"
    },
    {
      "trigger": "DLabelEditable",
      "contents": "DLabelEditable",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DLabelEditable\")"
    },
    {
      "trigger": "GetAutoStretch",
      "contents": "GetAutoStretch()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelEditable:GetAutoStretch()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelEditable:IsEditing()"
    },
    {
      "trigger": "OnLabelTextChanged",
      "contents": "OnLabelTextChanged(${1:string txt})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelEditable:OnLabelTextChanged(txt)"
    },
    {
      "trigger": "SetAutoStretch",
      "contents": "SetAutoStretch(${1:boolean stretch})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelEditable:SetAutoStretch(stretch)"
    },
    {
      "trigger": "DLabelURL",
      "contents": "DLabelURL",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DLabelURL\")"
    },
    {
      "trigger": "GetAutoStretchVertical",
      "contents": "GetAutoStretchVertical()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:GetAutoStretchVertical()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:GetColor()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:GetTextColor()"
    },
    {
      "trigger": "GetTextStyleColor",
      "contents": "GetTextStyleColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:GetTextStyleColor()"
    },
    {
      "trigger": "SetAutoStretchVertical",
      "contents": "SetAutoStretchVertical(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:SetAutoStretchVertical(draw)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table col})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:SetColor(col)"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor(${1:table col})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:SetTextColor(col)"
    },
    {
      "trigger": "SetTextStyleColor",
      "contents": "SetTextStyleColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:SetTextStyleColor(color)"
    },
    {
      "trigger": "UpdateFGColor",
      "contents": "UpdateFGColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DLabelURL:UpdateFGColor()"
    },
    {
      "trigger": "DListBox",
      "contents": "DListBox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListBox\")"
    },
    {
      "trigger": "GetMultiple",
      "contents": "GetMultiple()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:GetMultiple()"
    },
    {
      "trigger": "GetSelectedItems",
      "contents": "GetSelectedItems()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:GetSelectedItems()"
    },
    {
      "trigger": "GetSelectedValues",
      "contents": "GetSelectedValues()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:GetSelectedValues()"
    },
    {
      "trigger": "SelectByName",
      "contents": "SelectByName(${1:string val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:SelectByName(val)"
    },
    {
      "trigger": "SelectItem",
      "contents": "SelectItem(${1:Panel item}, ${2:boolean onlyme})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:SelectItem(item, onlyme)"
    },
    {
      "trigger": "SetMultiple",
      "contents": "SetMultiple(${1:boolean multiple})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:SetMultiple(multiple)"
    },
    {
      "trigger": "SetSelectedItems",
      "contents": "SetSelectedItems(${1:table items})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBox:SetSelectedItems(items)"
    },
    {
      "trigger": "DListBoxItem",
      "contents": "DListBoxItem",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListBoxItem\")"
    },
    {
      "trigger": "GetMother",
      "contents": "GetMother()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBoxItem:GetMother()"
    },
    {
      "trigger": "Select",
      "contents": "Select(${1:boolean onlyMe})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBoxItem:Select(onlyMe)"
    },
    {
      "trigger": "SetMother",
      "contents": "SetMother(${1:Panel parent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListBoxItem:SetMother(parent)"
    },
    {
      "trigger": "DListLayout",
      "contents": "DListLayout",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListLayout\")"
    },
    {
      "trigger": "DListView",
      "contents": "DListView",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListView\")"
    },
    {
      "trigger": "AddColumn",
      "contents": "AddColumn(${1:string column}, ${2:number position = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:AddColumn(column, position)"
    },
    {
      "trigger": "AddLine",
      "contents": "AddLine(${1:vararg text})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:AddLine(text)"
    },
    {
      "trigger": "ClearSelection",
      "contents": "ClearSelection()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:ClearSelection()"
    },
    {
      "trigger": "ColumnWidth",
      "contents": "ColumnWidth(${1:number column})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:ColumnWidth(column)"
    },
    {
      "trigger": "DataLayout",
      "contents": "DataLayout()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:DataLayout()"
    },
    {
      "trigger": "DisableScrollbar",
      "contents": "DisableScrollbar()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:DisableScrollbar()"
    },
    {
      "trigger": "DoDoubleClick",
      "contents": "DoDoubleClick(${1:number lineID}, ${2:Panel line})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:DoDoubleClick(lineID, line)"
    },
    {
      "trigger": "FixColumnsLayout",
      "contents": "FixColumnsLayout()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:FixColumnsLayout()"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetCanvas()"
    },
    {
      "trigger": "GetDataHeight",
      "contents": "GetDataHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetDataHeight()"
    },
    {
      "trigger": "GetDirty",
      "contents": "GetDirty()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetDirty()"
    },
    {
      "trigger": "GetHeaderHeight",
      "contents": "GetHeaderHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetHeaderHeight()"
    },
    {
      "trigger": "GetHideHeaders",
      "contents": "GetHideHeaders()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetHideHeaders()"
    },
    {
      "trigger": "GetInnerTall",
      "contents": "GetInnerTall()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetInnerTall()"
    },
    {
      "trigger": "GetLine",
      "contents": "GetLine(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetLine(id)"
    },
    {
      "trigger": "GetLines",
      "contents": "GetLines()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetLines()"
    },
    {
      "trigger": "GetMultiSelect",
      "contents": "GetMultiSelect()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetMultiSelect()"
    },
    {
      "trigger": "GetSelected",
      "contents": "GetSelected()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetSelected()"
    },
    {
      "trigger": "GetSelectedLine",
      "contents": "GetSelectedLine()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetSelectedLine()"
    },
    {
      "trigger": "GetSortable",
      "contents": "GetSortable()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetSortable()"
    },
    {
      "trigger": "GetSortedID",
      "contents": "GetSortedID(${1:number lineId})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:GetSortedID(lineId)"
    },
    {
      "trigger": "OnClickLine",
      "contents": "OnClickLine(${1:Panel line}, ${2:boolean isSelected})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:OnClickLine(line, isSelected)"
    },
    {
      "trigger": "OnRequestResize",
      "contents": "OnRequestResize(${1:Panel column}, ${2:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:OnRequestResize(column, size)"
    },
    {
      "trigger": "OnRowRightClick",
      "contents": "OnRowRightClick(${1:number lineID}, ${2:Panel line})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:OnRowRightClick(lineID, line)"
    },
    {
      "trigger": "OnRowSelected",
      "contents": "OnRowSelected(${1:number rowIndex}, ${2:Panel row})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:OnRowSelected(rowIndex, row)"
    },
    {
      "trigger": "RemoveLine",
      "contents": "RemoveLine(${1:number line})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:RemoveLine(line)"
    },
    {
      "trigger": "SelectFirstItem",
      "contents": "SelectFirstItem()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SelectFirstItem()"
    },
    {
      "trigger": "SelectItem",
      "contents": "SelectItem(${1:Panel Line})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SelectItem(Line)"
    },
    {
      "trigger": "SetDataHeight",
      "contents": "SetDataHeight(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetDataHeight(height)"
    },
    {
      "trigger": "SetDirty",
      "contents": "SetDirty(${1:boolean isDirty})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetDirty(isDirty)"
    },
    {
      "trigger": "SetHeaderHeight",
      "contents": "SetHeaderHeight(${1:number height})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetHeaderHeight(height)"
    },
    {
      "trigger": "SetHideHeaders",
      "contents": "SetHideHeaders(${1:boolean hide})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetHideHeaders(hide)"
    },
    {
      "trigger": "SetMultiSelect",
      "contents": "SetMultiSelect(${1:boolean allowMultiSelect})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetMultiSelect(allowMultiSelect)"
    },
    {
      "trigger": "SetSortable",
      "contents": "SetSortable(${1:boolean isSortable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SetSortable(isSortable)"
    },
    {
      "trigger": "SortByColumn",
      "contents": "SortByColumn(${1:number columnIndex}, ${2:boolean descending = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SortByColumn(columnIndex, descending)"
    },
    {
      "trigger": "SortByColumns",
      "contents": "SortByColumns(${1:number column1 = nil}, ${2:boolean descrending1 = false}, ${3:number column2 = nil}, ${4:boolean descrending2 = false}, ${5:number column3 = nil}, ${6:boolean descrending3 = false}, ${7:number column4 = nil}, ${8:boolean descrending4 = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView:SortByColumns(column1, descrending1, column2, descrending2, column3, descrending3, column4, descrending4)"
    },
    {
      "trigger": "DListView_Column",
      "contents": "DListView_Column",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListView_Column\")"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:DoClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:DoRightClick()"
    },
    {
      "trigger": "GetColumnID",
      "contents": "GetColumnID()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetColumnID()"
    },
    {
      "trigger": "GetDescending",
      "contents": "GetDescending()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetDescending()"
    },
    {
      "trigger": "GetFixedWidth",
      "contents": "GetFixedWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetFixedWidth()"
    },
    {
      "trigger": "GetMaxWidth",
      "contents": "GetMaxWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetMaxWidth()"
    },
    {
      "trigger": "GetMinWidth",
      "contents": "GetMinWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetMinWidth()"
    },
    {
      "trigger": "GetTextAlign",
      "contents": "GetTextAlign()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:GetTextAlign()"
    },
    {
      "trigger": "ResizeColumn",
      "contents": "ResizeColumn(${1:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:ResizeColumn(size)"
    },
    {
      "trigger": "SetColumnID",
      "contents": "SetColumnID(${1:number index})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetColumnID(index)"
    },
    {
      "trigger": "SetDescending",
      "contents": "SetDescending(${1:boolean desc})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetDescending(desc)"
    },
    {
      "trigger": "SetFixedWidth",
      "contents": "SetFixedWidth(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetFixedWidth(width)"
    },
    {
      "trigger": "SetMaxWidth",
      "contents": "SetMaxWidth(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetMaxWidth(width)"
    },
    {
      "trigger": "SetMinWidth",
      "contents": "SetMinWidth(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetMinWidth(width)"
    },
    {
      "trigger": "SetName",
      "contents": "SetName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetName(name)"
    },
    {
      "trigger": "SetTextAlign",
      "contents": "SetTextAlign(${1:number alignment})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetTextAlign(alignment)"
    },
    {
      "trigger": "SetWidth",
      "contents": "SetWidth(${1:number width})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Column:SetWidth(width)"
    },
    {
      "trigger": "DListView_ColumnPlain",
      "contents": "DListView_ColumnPlain",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListView_ColumnPlain\")"
    },
    {
      "trigger": "DListView_DraggerBar",
      "contents": "DListView_DraggerBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListView_DraggerBar\")"
    },
    {
      "trigger": "DListView_Line",
      "contents": "DListView_Line",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListView_Line\")"
    },
    {
      "trigger": "DataLayout",
      "contents": "DataLayout(${1:DListView pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:DataLayout(pnl)"
    },
    {
      "trigger": "GetAltLine",
      "contents": "GetAltLine()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetAltLine()"
    },
    {
      "trigger": "GetColumnText",
      "contents": "GetColumnText(${1:number column})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetColumnText(column)"
    },
    {
      "trigger": "GetID",
      "contents": "GetID()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetID()"
    },
    {
      "trigger": "GetListView",
      "contents": "GetListView()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetListView()"
    },
    {
      "trigger": "GetSortValue",
      "contents": "GetSortValue(${1:number column})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetSortValue(column)"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue(${1:number column})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:GetValue(column)"
    },
    {
      "trigger": "IsLineSelected",
      "contents": "IsLineSelected()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:IsLineSelected()"
    },
    {
      "trigger": "OnRightClick",
      "contents": "OnRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:OnRightClick()"
    },
    {
      "trigger": "OnSelect",
      "contents": "OnSelect()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:OnSelect()"
    },
    {
      "trigger": "SetAltLine",
      "contents": "SetAltLine(${1:boolean alt})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetAltLine(alt)"
    },
    {
      "trigger": "SetColumnText",
      "contents": "SetColumnText(${1:number column}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetColumnText(column, value)"
    },
    {
      "trigger": "SetID",
      "contents": "SetID(${1:number id})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetID(id)"
    },
    {
      "trigger": "SetListView",
      "contents": "SetListView(${1:DListView pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetListView(pnl)"
    },
    {
      "trigger": "SetSelected",
      "contents": "SetSelected(${1:boolean selected})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetSelected(selected)"
    },
    {
      "trigger": "SetSortValue",
      "contents": "SetSortValue(${1:number column}, ${2:any data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetSortValue(column, data)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number column}, ${2:string value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DListView_Line:SetValue(column, value)"
    },
    {
      "trigger": "DListViewHeaderLabel",
      "contents": "DListViewHeaderLabel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListViewHeaderLabel\")"
    },
    {
      "trigger": "DListViewLabel",
      "contents": "DListViewLabel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListViewLabel\")"
    },
    {
      "trigger": "DListViewLine",
      "contents": "DListViewLine",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DListViewLine\")"
    },
    {
      "trigger": "DMenu",
      "contents": "DMenu",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DMenu\")"
    },
    {
      "trigger": "AddCVar",
      "contents": "AddCVar(${1:string strText}, ${2:string convar}, ${3:string on}, ${4:string off}, ${5:function funcFunction = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:AddCVar(strText, convar, on, off, funcFunction)"
    },
    {
      "trigger": "AddOption",
      "contents": "AddOption(${1:string name}, ${2:function func = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:AddOption(name, func)"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:AddPanel(pnl)"
    },
    {
      "trigger": "AddSpacer",
      "contents": "AddSpacer()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:AddSpacer()"
    },
    {
      "trigger": "AddSubMenu",
      "contents": "AddSubMenu(${1:string Name}, ${2:function func = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:AddSubMenu(Name, func)"
    },
    {
      "trigger": "ChildCount",
      "contents": "ChildCount()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:ChildCount()"
    },
    {
      "trigger": "ClearHighlights",
      "contents": "ClearHighlights()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:ClearHighlights()"
    },
    {
      "trigger": "CloseSubMenu",
      "contents": "CloseSubMenu(${1:Panel menu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:CloseSubMenu(menu)"
    },
    {
      "trigger": "GetChild",
      "contents": "GetChild(${1:number childIndex})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetChild(childIndex)"
    },
    {
      "trigger": "GetDeleteSelf",
      "contents": "GetDeleteSelf()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetDeleteSelf()"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetDrawBorder()"
    },
    {
      "trigger": "GetDrawColumn",
      "contents": "GetDrawColumn()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetDrawColumn()"
    },
    {
      "trigger": "GetMaxHeight",
      "contents": "GetMaxHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetMaxHeight()"
    },
    {
      "trigger": "GetMinimumWidth",
      "contents": "GetMinimumWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetMinimumWidth()"
    },
    {
      "trigger": "GetOpenSubMenu",
      "contents": "GetOpenSubMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:GetOpenSubMenu()"
    },
    {
      "trigger": "Hide",
      "contents": "Hide()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:Hide()"
    },
    {
      "trigger": "HighlightItem",
      "contents": "HighlightItem(${1:Panel item})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:HighlightItem(item)"
    },
    {
      "trigger": "Open",
      "contents": "Open(${1:number x = gui.MouseX()}, ${2:number y = gui.MouseY()}, ${3:any skipanimation = nil}, ${4:Panel ownerpanel = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:Open(x, y, skipanimation, ownerpanel)"
    },
    {
      "trigger": "OpenSubMenu",
      "contents": "OpenSubMenu(${1:Panel item}, ${2:Panel menu = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:OpenSubMenu(item, menu)"
    },
    {
      "trigger": "OptionSelected",
      "contents": "OptionSelected(${1:Panel option}, ${2:string optionText})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:OptionSelected(option, optionText)"
    },
    {
      "trigger": "OptionSelectedInternal",
      "contents": "OptionSelectedInternal(${1:Panel option})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:OptionSelectedInternal(option)"
    },
    {
      "trigger": "SetDeleteSelf",
      "contents": "SetDeleteSelf(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetDeleteSelf(newState)"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetDrawBorder(bool)"
    },
    {
      "trigger": "SetDrawColumn",
      "contents": "SetDrawColumn(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetDrawColumn(draw)"
    },
    {
      "trigger": "SetMaxHeight",
      "contents": "SetMaxHeight(${1:number maxHeight})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetMaxHeight(maxHeight)"
    },
    {
      "trigger": "SetMinimumWidth",
      "contents": "SetMinimumWidth(${1:number minWidth})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetMinimumWidth(minWidth)"
    },
    {
      "trigger": "SetOpenSubMenu",
      "contents": "SetOpenSubMenu(${1:Panel item})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenu:SetOpenSubMenu(item)"
    },
    {
      "trigger": "DMenuBar",
      "contents": "DMenuBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DMenuBar\")"
    },
    {
      "trigger": "AddMenu",
      "contents": "AddMenu(${1:string label})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:AddMenu(label)"
    },
    {
      "trigger": "AddOrGetMenu",
      "contents": "AddOrGetMenu(${1:string label})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:AddOrGetMenu(label)"
    },
    {
      "trigger": "GetBackgroundColor",
      "contents": "GetBackgroundColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetBackgroundColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetDisabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetDrawBackground()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetIsMenu()"
    },
    {
      "trigger": "GetOpenMenu",
      "contents": "GetOpenMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetOpenMenu()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:GetPaintBackground()"
    },
    {
      "trigger": "SetBackgroundColor",
      "contents": "SetBackgroundColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:SetBackgroundColor(color)"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:SetDisabled(disable)"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean shouldPaint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:SetDrawBackground(shouldPaint)"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:SetIsMenu(isMenu)"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean shouldPaint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuBar:SetPaintBackground(shouldPaint)"
    },
    {
      "trigger": "DMenuOption",
      "contents": "DMenuOption",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DMenuOption\")"
    },
    {
      "trigger": "AddSubMenu",
      "contents": "AddSubMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:AddSubMenu()"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:GetChecked()"
    },
    {
      "trigger": "GetIsCheckable",
      "contents": "GetIsCheckable()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:GetIsCheckable()"
    },
    {
      "trigger": "GetMenu",
      "contents": "GetMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:GetMenu()"
    },
    {
      "trigger": "OnChecked",
      "contents": "OnChecked(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:OnChecked(checked)"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean checked})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:SetChecked(checked)"
    },
    {
      "trigger": "SetIsCheckable",
      "contents": "SetIsCheckable(${1:boolean checkable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:SetIsCheckable(checkable)"
    },
    {
      "trigger": "SetMenu",
      "contents": "SetMenu(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:SetMenu(pnl)"
    },
    {
      "trigger": "SetSubMenu",
      "contents": "SetSubMenu(${1:Panel menu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:SetSubMenu(menu)"
    },
    {
      "trigger": "ToggleCheck",
      "contents": "ToggleCheck()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOption:ToggleCheck()"
    },
    {
      "trigger": "DMenuOptionCVar",
      "contents": "DMenuOptionCVar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DMenuOptionCVar\")"
    },
    {
      "trigger": "GetConVar",
      "contents": "GetConVar()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:GetConVar()"
    },
    {
      "trigger": "GetValueOff",
      "contents": "GetValueOff()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:GetValueOff()"
    },
    {
      "trigger": "GetValueOn",
      "contents": "GetValueOn()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:GetValueOn()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string cvar})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:SetConVar(cvar)"
    },
    {
      "trigger": "SetValueOff",
      "contents": "SetValueOff(${1:string value})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:SetValueOff(value)"
    },
    {
      "trigger": "SetValueOn",
      "contents": "SetValueOn(${1:string value})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DMenuOptionCVar:SetValueOn(value)"
    },
    {
      "trigger": "DModelPanel",
      "contents": "DModelPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DModelPanel\")"
    },
    {
      "trigger": "DrawModel",
      "contents": "DrawModel()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:DrawModel()"
    },
    {
      "trigger": "GetAmbientLight",
      "contents": "GetAmbientLight()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetAmbientLight()"
    },
    {
      "trigger": "GetAnimated",
      "contents": "GetAnimated()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetAnimated()"
    },
    {
      "trigger": "GetAnimSpeed",
      "contents": "GetAnimSpeed()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetAnimSpeed()"
    },
    {
      "trigger": "GetCamPos",
      "contents": "GetCamPos()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetCamPos()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetColor()"
    },
    {
      "trigger": "GetEntity",
      "contents": "GetEntity()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetEntity()"
    },
    {
      "trigger": "GetFOV",
      "contents": "GetFOV()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetFOV()"
    },
    {
      "trigger": "GetLookAng",
      "contents": "GetLookAng()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetLookAng()"
    },
    {
      "trigger": "GetLookAt",
      "contents": "GetLookAt()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetLookAt()"
    },
    {
      "trigger": "GetModel",
      "contents": "GetModel()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:GetModel()"
    },
    {
      "trigger": "LayoutEntity",
      "contents": "LayoutEntity(${1:Entity entity})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:LayoutEntity(entity)"
    },
    {
      "trigger": "PostDrawModel",
      "contents": "PostDrawModel(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:PostDrawModel(ent)"
    },
    {
      "trigger": "PreDrawModel",
      "contents": "PreDrawModel(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:PreDrawModel(ent)"
    },
    {
      "trigger": "RunAnimation",
      "contents": "RunAnimation()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:RunAnimation()"
    },
    {
      "trigger": "SetAmbientLight",
      "contents": "SetAmbientLight(${1:table color})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetAmbientLight(color)"
    },
    {
      "trigger": "SetAnimated",
      "contents": "SetAnimated(${1:boolean animated})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetAnimated(animated)"
    },
    {
      "trigger": "SetAnimSpeed",
      "contents": "SetAnimSpeed(${1:number animSpeed})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetAnimSpeed(animSpeed)"
    },
    {
      "trigger": "SetCamPos",
      "contents": "SetCamPos(${1:Vector pos})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetCamPos(pos)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetColor(color)"
    },
    {
      "trigger": "SetDirectionalLight",
      "contents": "SetDirectionalLight(${1:number direction}, ${2:table color})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetDirectionalLight(direction, color)"
    },
    {
      "trigger": "SetEntity",
      "contents": "SetEntity(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetEntity(ent)"
    },
    {
      "trigger": "SetFOV",
      "contents": "SetFOV(${1:number fov})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetFOV(fov)"
    },
    {
      "trigger": "SetLookAng",
      "contents": "SetLookAng(${1:Angle ang})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetLookAng(ang)"
    },
    {
      "trigger": "SetLookAt",
      "contents": "SetLookAt(${1:Vector pos})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetLookAt(pos)"
    },
    {
      "trigger": "SetModel",
      "contents": "SetModel(${1:string model})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:SetModel(model)"
    },
    {
      "trigger": "StartScene",
      "contents": "StartScene(${1:string path})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelPanel:StartScene(path)"
    },
    {
      "trigger": "DModelSelect",
      "contents": "DModelSelect",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DModelSelect\")"
    },
    {
      "trigger": "SetHeight",
      "contents": "SetHeight(${1:number num = 2})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelSelect:SetHeight(num)"
    },
    {
      "trigger": "SetModelList",
      "contents": "SetModelList(${1:table models}, ${2:string convar}, ${3:boolean dontSort}, ${4:boolean dontCallListConVars})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelSelect:SetModelList(models, convar, dontSort, dontCallListConVars)"
    },
    {
      "trigger": "DModelSelectMulti",
      "contents": "DModelSelectMulti",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DModelSelectMulti\")"
    },
    {
      "trigger": "AddModelList",
      "contents": "AddModelList(${1:string name}, ${2:table models}, ${3:string convar}, ${4:boolean dontSort}, ${5:boolean dontCallListConVars})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DModelSelectMulti:AddModelList(name, models, convar, dontSort, dontCallListConVars)"
    },
    {
      "trigger": "DNotify",
      "contents": "DNotify",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DNotify\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl}, ${2:number lifeLength = nil})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:AddItem(pnl, lifeLength)"
    },
    {
      "trigger": "GetAlignment",
      "contents": "GetAlignment()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:GetAlignment()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:GetItems()"
    },
    {
      "trigger": "GetLife",
      "contents": "GetLife()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:GetLife()"
    },
    {
      "trigger": "GetSpacing",
      "contents": "GetSpacing()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:GetSpacing()"
    },
    {
      "trigger": "SetAlignment",
      "contents": "SetAlignment(${1:number alignment})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:SetAlignment(alignment)"
    },
    {
      "trigger": "SetLife",
      "contents": "SetLife(${1:number time})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:SetLife(time)"
    },
    {
      "trigger": "SetSpacing",
      "contents": "SetSpacing(${1:number spacing})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:SetSpacing(spacing)"
    },
    {
      "trigger": "Shuffle",
      "contents": "Shuffle()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNotify:Shuffle()"
    },
    {
      "trigger": "DNumberScratch",
      "contents": "DNumberScratch",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DNumberScratch\")"
    },
    {
      "trigger": "DrawNotches",
      "contents": "DrawNotches(${1:number level}, ${2:number x}, ${3:number y}, ${4:number w}, ${5:number h}, ${6:number range}, ${7:number value}, ${8:number min}, ${9:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:DrawNotches(level, x, y, w, h, range, value, min, max)"
    },
    {
      "trigger": "DrawScreen",
      "contents": "DrawScreen(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:DrawScreen(x, y, w, h)"
    },
    {
      "trigger": "GetActive",
      "contents": "GetActive()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetActive()"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetDecimals()"
    },
    {
      "trigger": "GetFloatValue",
      "contents": "GetFloatValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetFloatValue()"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetFraction()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetMin()"
    },
    {
      "trigger": "GetRange",
      "contents": "GetRange()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetRange()"
    },
    {
      "trigger": "GetShouldDrawScreen",
      "contents": "GetShouldDrawScreen()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetShouldDrawScreen()"
    },
    {
      "trigger": "GetTextValue",
      "contents": "GetTextValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetTextValue()"
    },
    {
      "trigger": "GetZoom",
      "contents": "GetZoom()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:GetZoom()"
    },
    {
      "trigger": "IdealZoom",
      "contents": "IdealZoom()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:IdealZoom()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:IsEditing()"
    },
    {
      "trigger": "LockCursor",
      "contents": "LockCursor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:LockCursor()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number newValue})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:OnValueChanged(newValue)"
    },
    {
      "trigger": "PaintScratchWindow",
      "contents": "PaintScratchWindow()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:PaintScratchWindow()"
    },
    {
      "trigger": "SetActive",
      "contents": "SetActive(${1:boolean active})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetActive(active)"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number decimals})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetDecimals(decimals)"
    },
    {
      "trigger": "SetFloatValue",
      "contents": "SetFloatValue(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetFloatValue(val)"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number frac})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetFraction(frac)"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetMax(max)"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetMin(min)"
    },
    {
      "trigger": "SetShouldDrawScreen",
      "contents": "SetShouldDrawScreen(${1:boolean shouldDraw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetShouldDrawScreen(shouldDraw)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetValue(val)"
    },
    {
      "trigger": "SetZoom",
      "contents": "SetZoom(${1:number zoom})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:SetZoom(zoom)"
    },
    {
      "trigger": "UpdateConVar",
      "contents": "UpdateConVar()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberScratch:UpdateConVar()"
    },
    {
      "trigger": "DNumberWang",
      "contents": "DNumberWang",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DNumberWang\")"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetDecimals()"
    },
    {
      "trigger": "GetFloatValue",
      "contents": "GetFloatValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetFloatValue()"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetFraction(val)"
    },
    {
      "trigger": "GetInterval",
      "contents": "GetInterval()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetInterval()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetMin()"
    },
    {
      "trigger": "GetTextArea",
      "contents": "GetTextArea()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetTextArea()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:GetValue()"
    },
    {
      "trigger": "HideWang",
      "contents": "HideWang()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:HideWang()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:OnValueChanged(val)"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number num})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetDecimals(num)"
    },
    {
      "trigger": "SetFloatValue",
      "contents": "SetFloatValue(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetFloatValue(val)"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetFraction(val)"
    },
    {
      "trigger": "SetInterval",
      "contents": "SetInterval(${1:number min})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetInterval(min)"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetMax(max)"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetMin(min)"
    },
    {
      "trigger": "SetMinMax",
      "contents": "SetMinMax(${1:number min}, ${2:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetMinMax(min, max)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumberWang:SetValue(val)"
    },
    {
      "trigger": "DNumPad",
      "contents": "DNumPad",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DNumPad\")"
    },
    {
      "trigger": "DNumSlider",
      "contents": "DNumSlider",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DNumSlider\")"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetDecimals()"
    },
    {
      "trigger": "GetDefaultValue",
      "contents": "GetDefaultValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetDefaultValue()"
    },
    {
      "trigger": "GetMax",
      "contents": "GetMax()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetMax()"
    },
    {
      "trigger": "GetMin",
      "contents": "GetMin()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetMin()"
    },
    {
      "trigger": "GetRange",
      "contents": "GetRange()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetRange()"
    },
    {
      "trigger": "GetTextArea",
      "contents": "GetTextArea()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetTextArea()"
    },
    {
      "trigger": "GetValue",
      "contents": "GetValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:GetValue()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:IsEditing()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:OnValueChanged(value)"
    },
    {
      "trigger": "ResetToDefaultValue",
      "contents": "ResetToDefaultValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:ResetToDefaultValue()"
    },
    {
      "trigger": "SetConVar",
      "contents": "SetConVar(${1:string cvar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetConVar(cvar)"
    },
    {
      "trigger": "SetDark",
      "contents": "SetDark(${1:boolean dark})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetDark(dark)"
    },
    {
      "trigger": "SetDecimals",
      "contents": "SetDecimals(${1:number decimals})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetDecimals(decimals)"
    },
    {
      "trigger": "SetDefaultValue",
      "contents": "SetDefaultValue(${1:number default})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetDefaultValue(default)"
    },
    {
      "trigger": "SetMax",
      "contents": "SetMax(${1:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetMax(max)"
    },
    {
      "trigger": "SetMin",
      "contents": "SetMin(${1:number min})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetMin(min)"
    },
    {
      "trigger": "SetMinMax",
      "contents": "SetMinMax(${1:number min}, ${2:number max})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetMinMax(min, max)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:number val})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:SetValue(val)"
    },
    {
      "trigger": "TranslateSliderValues",
      "contents": "TranslateSliderValues(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:TranslateSliderValues(x, y)"
    },
    {
      "trigger": "UpdateNotches",
      "contents": "UpdateNotches()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:UpdateNotches()"
    },
    {
      "trigger": "ValueChanged",
      "contents": "ValueChanged(${1:number value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DNumSlider:ValueChanged(value)"
    },
    {
      "trigger": "DPanel",
      "contents": "DPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPanel\")"
    },
    {
      "trigger": "GetBackgroundColor",
      "contents": "GetBackgroundColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetBackgroundColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetDisabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetDrawBackground()"
    },
    {
      "trigger": "GetIsMenu",
      "contents": "GetIsMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetIsMenu()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetPaintBackground()"
    },
    {
      "trigger": "GetTabbingDisabled",
      "contents": "GetTabbingDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:GetTabbingDisabled()"
    },
    {
      "trigger": "SetBackgroundColor",
      "contents": "SetBackgroundColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetBackgroundColor(color)"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disabled})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetDisabled(disabled)"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetDrawBackground(draw)"
    },
    {
      "trigger": "SetIsMenu",
      "contents": "SetIsMenu(${1:boolean isMenu})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetIsMenu(isMenu)"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean paint})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetPaintBackground(paint)"
    },
    {
      "trigger": "SetTabbingDisabled",
      "contents": "SetTabbingDisabled(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:SetTabbingDisabled(draw)"
    },
    {
      "trigger": "UpdateColours",
      "contents": "UpdateColours()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanel:UpdateColours()"
    },
    {
      "trigger": "DPanelList",
      "contents": "DPanelList",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPanelList\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl}, ${2:string state = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:AddItem(pnl, state)"
    },
    {
      "trigger": "CleanList",
      "contents": "CleanList()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:CleanList()"
    },
    {
      "trigger": "EnableVerticalScrollbar",
      "contents": "EnableVerticalScrollbar()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:EnableVerticalScrollbar()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:GetItems()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:GetPadding()"
    },
    {
      "trigger": "GetSpacing",
      "contents": "GetSpacing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:GetSpacing()"
    },
    {
      "trigger": "InsertAtTop",
      "contents": "InsertAtTop(${1:Panel insert}, ${2:string strLineState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:InsertAtTop(insert, strLineState)"
    },
    {
      "trigger": "Rebuild",
      "contents": "Rebuild()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:Rebuild()"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number Offset})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:SetPadding(Offset)"
    },
    {
      "trigger": "SetSpacing",
      "contents": "SetSpacing(${1:number Distance})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelList:SetSpacing(Distance)"
    },
    {
      "trigger": "DPanelOverlay",
      "contents": "DPanelOverlay",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPanelOverlay\")"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:GetColor()"
    },
    {
      "trigger": "GetType",
      "contents": "GetType()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:GetType()"
    },
    {
      "trigger": "PaintDifferentColours",
      "contents": "PaintDifferentColours(${1:table cola}, ${2:table colb}, ${3:table colc}, ${4:table cold}, ${5:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:PaintDifferentColours(cola, colb, colc, cold, size)"
    },
    {
      "trigger": "PaintInnerCorners",
      "contents": "PaintInnerCorners(${1:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:PaintInnerCorners(size)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:SetColor(color)"
    },
    {
      "trigger": "SetType",
      "contents": "SetType(${1:number type})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelOverlay:SetType(type)"
    },
    {
      "trigger": "DPanelSelect",
      "contents": "DPanelSelect",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPanelSelect\")"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl}, ${2:table conVars = nil})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelSelect:AddPanel(pnl, conVars)"
    },
    {
      "trigger": "FindBestActive",
      "contents": "FindBestActive()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelSelect:FindBestActive()"
    },
    {
      "trigger": "OnActivePanelChanged",
      "contents": "OnActivePanelChanged(${1:Panel oldPnl}, ${2:Panel newPnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelSelect:OnActivePanelChanged(oldPnl, newPnl)"
    },
    {
      "trigger": "SelectPanel",
      "contents": "SelectPanel(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanelSelect:SelectPanel(pnl)"
    },
    {
      "trigger": "DPanPanel",
      "contents": "DPanPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPanPanel\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanPanel:AddItem(pnl)"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanPanel:GetCanvas()"
    },
    {
      "trigger": "OnScroll",
      "contents": "OnScroll(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanPanel:OnScroll(x, y)"
    },
    {
      "trigger": "ScrollToChild",
      "contents": "ScrollToChild(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanPanel:ScrollToChild(pnl)"
    },
    {
      "trigger": "SetCanvas",
      "contents": "SetCanvas(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPanPanel:SetCanvas(pnl)"
    },
    {
      "trigger": "DProgress",
      "contents": "DProgress",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProgress\")"
    },
    {
      "trigger": "GetFraction",
      "contents": "GetFraction()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProgress:GetFraction()"
    },
    {
      "trigger": "SetFraction",
      "contents": "SetFraction(${1:number fraction})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProgress:SetFraction(fraction)"
    },
    {
      "trigger": "DProperties",
      "contents": "DProperties",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperties\")"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperties:GetCanvas()"
    },
    {
      "trigger": "GetCategory",
      "contents": "GetCategory(${1:string name}, ${2:boolean create})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperties:GetCategory(name, create)"
    },
    {
      "trigger": "DProperty_Boolean",
      "contents": "DProperty_Boolean",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Boolean\")"
    },
    {
      "trigger": "DProperty_Combo",
      "contents": "DProperty_Combo",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Combo\")"
    },
    {
      "trigger": "AddChoice",
      "contents": "AddChoice(${1:string Text}, ${2:any data}, ${3:boolean select = false})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Combo:AddChoice(Text, data, select)"
    },
    {
      "trigger": "DataChanged",
      "contents": "DataChanged(${1:any data})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Combo:DataChanged(data)"
    },
    {
      "trigger": "SetSelected",
      "contents": "SetSelected(${1:number Id})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Combo:SetSelected(Id)"
    },
    {
      "trigger": "Setup",
      "contents": "Setup(${1:table data = { text = 'Select...' }})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Combo:Setup(data)"
    },
    {
      "trigger": "DProperty_Entity",
      "contents": "DProperty_Entity",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Entity\")"
    },
    {
      "trigger": "DProperty_Float",
      "contents": "DProperty_Float",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Float\")"
    },
    {
      "trigger": "GetDecimals",
      "contents": "GetDecimals()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Float:GetDecimals()"
    },
    {
      "trigger": "DProperty_Generic",
      "contents": "DProperty_Generic",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Generic\")"
    },
    {
      "trigger": "GetRow",
      "contents": "GetRow()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Generic:GetRow()"
    },
    {
      "trigger": "SetRow",
      "contents": "SetRow(${1:Panel row})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Generic:SetRow(row)"
    },
    {
      "trigger": "Setup",
      "contents": "Setup(${1:table data})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Generic:Setup(data)"
    },
    {
      "trigger": "ValueChanged",
      "contents": "ValueChanged(${1:any newVal}, ${2:boolean force})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_Generic:ValueChanged(newVal, force)"
    },
    {
      "trigger": "DProperty_Int",
      "contents": "DProperty_Int",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_Int\")"
    },
    {
      "trigger": "DProperty_VectorColor",
      "contents": "DProperty_VectorColor",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DProperty_VectorColor\")"
    },
    {
      "trigger": "Setup",
      "contents": "Setup(${1:table settings})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_VectorColor:Setup(settings)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:Vector color})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DProperty_VectorColor:SetValue(color)"
    },
    {
      "trigger": "DPropertySheet",
      "contents": "DPropertySheet",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DPropertySheet\")"
    },
    {
      "trigger": "AddSheet",
      "contents": "AddSheet(${1:string name}, ${2:Panel pnl}, ${3:string icon = nil}, ${4:boolean noStretchX = false}, ${5:boolean noStretchY = false}, ${6:string tooltip = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:AddSheet(name, pnl, icon, noStretchX, noStretchY, tooltip)"
    },
    {
      "trigger": "CloseTab",
      "contents": "CloseTab(${1:Panel tab}, ${2:boolean removePanel})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:CloseTab(tab, removePanel)"
    },
    {
      "trigger": "CrossFade",
      "contents": "CrossFade(${1:table anim}, ${2:number delta}, ${3:table data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:CrossFade(anim, delta, data)"
    },
    {
      "trigger": "GetActiveTab",
      "contents": "GetActiveTab()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:GetActiveTab()"
    },
    {
      "trigger": "GetFadeTime",
      "contents": "GetFadeTime()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:GetFadeTime()"
    },
    {
      "trigger": "GetItems",
      "contents": "GetItems()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:GetItems()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:GetPadding()"
    },
    {
      "trigger": "GetShowIcons",
      "contents": "GetShowIcons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:GetShowIcons()"
    },
    {
      "trigger": "OnActiveTabChanged",
      "contents": "OnActiveTabChanged(${1:Panel old}, ${2:Panel new})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:OnActiveTabChanged(old, new)"
    },
    {
      "trigger": "SetActiveTab",
      "contents": "SetActiveTab(${1:Panel tab})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SetActiveTab(tab)"
    },
    {
      "trigger": "SetFadeTime",
      "contents": "SetFadeTime(${1:number time = 0.1})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SetFadeTime(time)"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding = 8})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SetPadding(padding)"
    },
    {
      "trigger": "SetShowIcons",
      "contents": "SetShowIcons(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SetShowIcons(show)"
    },
    {
      "trigger": "SetupCloseButton",
      "contents": "SetupCloseButton(${1:function func})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SetupCloseButton(func)"
    },
    {
      "trigger": "SizeToContentWidth",
      "contents": "SizeToContentWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SizeToContentWidth()"
    },
    {
      "trigger": "SwitchToName",
      "contents": "SwitchToName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DPropertySheet:SwitchToName(name)"
    },
    {
      "trigger": "DRGBPicker",
      "contents": "DRGBPicker",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DRGBPicker\")"
    },
    {
      "trigger": "GetPosColor",
      "contents": "GetPosColor(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DRGBPicker:GetPosColor(x, y)"
    },
    {
      "trigger": "GetRGB",
      "contents": "GetRGB()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DRGBPicker:GetRGB()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange(${1:table col})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DRGBPicker:OnChange(col)"
    },
    {
      "trigger": "SetRGB",
      "contents": "SetRGB(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DRGBPicker:SetRGB(color)"
    },
    {
      "trigger": "DScrollBarGrip",
      "contents": "DScrollBarGrip",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DScrollBarGrip\")"
    },
    {
      "trigger": "DScrollPanel",
      "contents": "DScrollPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DScrollPanel\")"
    },
    {
      "trigger": "AddItem",
      "contents": "AddItem(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:AddItem(pnl)"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:Clear()"
    },
    {
      "trigger": "GetCanvas",
      "contents": "GetCanvas()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:GetCanvas()"
    },
    {
      "trigger": "GetPadding",
      "contents": "GetPadding()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:GetPadding()"
    },
    {
      "trigger": "GetVBar",
      "contents": "GetVBar()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:GetVBar()"
    },
    {
      "trigger": "InnerWidth",
      "contents": "InnerWidth()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:InnerWidth()"
    },
    {
      "trigger": "PerformLayoutInternal",
      "contents": "PerformLayoutInternal()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:PerformLayoutInternal()"
    },
    {
      "trigger": "Rebuild",
      "contents": "Rebuild()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:Rebuild()"
    },
    {
      "trigger": "ScrollToChild",
      "contents": "ScrollToChild(${1:Panel panel})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:ScrollToChild(panel)"
    },
    {
      "trigger": "SetCanvas",
      "contents": "SetCanvas(${1:Panel canvas})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:SetCanvas(canvas)"
    },
    {
      "trigger": "SetPadding",
      "contents": "SetPadding(${1:number padding})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DScrollPanel:SetPadding(padding)"
    },
    {
      "trigger": "DShape",
      "contents": "DShape",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DShape\")"
    },
    {
      "trigger": "GetBorderColor",
      "contents": "GetBorderColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:GetBorderColor()"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:GetColor()"
    },
    {
      "trigger": "GetType",
      "contents": "GetType()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:GetType()"
    },
    {
      "trigger": "SetBorderColor",
      "contents": "SetBorderColor(${1:table clr})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:SetBorderColor(clr)"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table clr})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:SetColor(clr)"
    },
    {
      "trigger": "SetType",
      "contents": "SetType(${1:string type})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DShape:SetType(type)"
    },
    {
      "trigger": "DSizeToContents",
      "contents": "DSizeToContents",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DSizeToContents\")"
    },
    {
      "trigger": "GetSizeX",
      "contents": "GetSizeX()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSizeToContents:GetSizeX()"
    },
    {
      "trigger": "GetSizeY",
      "contents": "GetSizeY()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSizeToContents:GetSizeY()"
    },
    {
      "trigger": "SetSizeX",
      "contents": "SetSizeX(${1:number })",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSizeToContents:SetSizeX()"
    },
    {
      "trigger": "SetSizeY",
      "contents": "SetSizeY(${1:number })",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSizeToContents:SetSizeY()"
    },
    {
      "trigger": "DSlider",
      "contents": "DSlider",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DSlider\")"
    },
    {
      "trigger": "ConVarXNumberThink",
      "contents": "ConVarXNumberThink()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:ConVarXNumberThink()"
    },
    {
      "trigger": "ConVarYNumberThink",
      "contents": "ConVarYNumberThink()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:ConVarYNumberThink()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetDragging()"
    },
    {
      "trigger": "GetLockX",
      "contents": "GetLockX()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetLockX()"
    },
    {
      "trigger": "GetLockY",
      "contents": "GetLockY()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetLockY()"
    },
    {
      "trigger": "GetNotchColor",
      "contents": "GetNotchColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetNotchColor()"
    },
    {
      "trigger": "GetNotches",
      "contents": "GetNotches()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetNotches()"
    },
    {
      "trigger": "GetNumSlider",
      "contents": "GetNumSlider()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetNumSlider()"
    },
    {
      "trigger": "GetSlideX",
      "contents": "GetSlideX()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetSlideX()"
    },
    {
      "trigger": "GetSlideY",
      "contents": "GetSlideY()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetSlideY()"
    },
    {
      "trigger": "GetTrapInside",
      "contents": "GetTrapInside()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:GetTrapInside()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:IsEditing()"
    },
    {
      "trigger": "OnValueChanged",
      "contents": "OnValueChanged(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:OnValueChanged(x, y)"
    },
    {
      "trigger": "OnValuesChangedInternal",
      "contents": "OnValuesChangedInternal()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:OnValuesChangedInternal()"
    },
    {
      "trigger": "SetBackground",
      "contents": "SetBackground(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetBackground(path)"
    },
    {
      "trigger": "SetConVarX",
      "contents": "SetConVarX(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetConVarX(convar)"
    },
    {
      "trigger": "SetConVarY",
      "contents": "SetConVarY(${1:string convar})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetConVarY(convar)"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean dragging})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetDragging(dragging)"
    },
    {
      "trigger": "SetImage",
      "contents": "SetImage()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetImage()"
    },
    {
      "trigger": "SetImageColor",
      "contents": "SetImageColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetImageColor()"
    },
    {
      "trigger": "SetLockX",
      "contents": "SetLockX(${1:number lockX = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetLockX(lockX)"
    },
    {
      "trigger": "SetLockY",
      "contents": "SetLockY(${1:number lockY = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetLockY(lockY)"
    },
    {
      "trigger": "SetNotchColor",
      "contents": "SetNotchColor(${1:Color clr})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetNotchColor(clr)"
    },
    {
      "trigger": "SetNotches",
      "contents": "SetNotches(${1:number notches})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetNotches(notches)"
    },
    {
      "trigger": "SetNumSlider",
      "contents": "SetNumSlider(${1:any slider})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetNumSlider(slider)"
    },
    {
      "trigger": "SetSlideX",
      "contents": "SetSlideX(${1:number x})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetSlideX(x)"
    },
    {
      "trigger": "SetSlideY",
      "contents": "SetSlideY(${1:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetSlideY(y)"
    },
    {
      "trigger": "SetTrapInside",
      "contents": "SetTrapInside(${1:boolean trap})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:SetTrapInside(trap)"
    },
    {
      "trigger": "TranslateValues",
      "contents": "TranslateValues(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSlider:TranslateValues(x, y)"
    },
    {
      "trigger": "DSprite",
      "contents": "DSprite",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DSprite\")"
    },
    {
      "trigger": "GetColor",
      "contents": "GetColor()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:GetColor()"
    },
    {
      "trigger": "GetHandle",
      "contents": "GetHandle()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:GetHandle()"
    },
    {
      "trigger": "GetMaterial",
      "contents": "GetMaterial()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:GetMaterial()"
    },
    {
      "trigger": "GetRotation",
      "contents": "GetRotation()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:GetRotation()"
    },
    {
      "trigger": "SetColor",
      "contents": "SetColor(${1:table color})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:SetColor(color)"
    },
    {
      "trigger": "SetHandle",
      "contents": "SetHandle(${1:Vector vec})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:SetHandle(vec)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:IMaterial material})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:SetMaterial(material)"
    },
    {
      "trigger": "SetRotation",
      "contents": "SetRotation(${1:number ang})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DSprite:SetRotation(ang)"
    },
    {
      "trigger": "DTab",
      "contents": "DTab",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTab\")"
    },
    {
      "trigger": "GetPanel",
      "contents": "GetPanel()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:GetPanel()"
    },
    {
      "trigger": "GetPropertySheet",
      "contents": "GetPropertySheet()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:GetPropertySheet()"
    },
    {
      "trigger": "GetTabHeight",
      "contents": "GetTabHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:GetTabHeight()"
    },
    {
      "trigger": "IsActive",
      "contents": "IsActive()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:IsActive()"
    },
    {
      "trigger": "SetPanel",
      "contents": "SetPanel(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:SetPanel(pnl)"
    },
    {
      "trigger": "SetPropertySheet",
      "contents": "SetPropertySheet(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:SetPropertySheet(pnl)"
    },
    {
      "trigger": "Setup",
      "contents": "Setup(${1:string label}, ${2:Panel sheet}, ${3:Panel pnl}, ${4:string icon = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTab:Setup(label, sheet, pnl, icon)"
    },
    {
      "trigger": "DTextEntry",
      "contents": "DTextEntry",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTextEntry\")"
    },
    {
      "trigger": "AddHistory",
      "contents": "AddHistory(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:AddHistory(text)"
    },
    {
      "trigger": "AllowInput",
      "contents": "AllowInput(${1:string char})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:AllowInput(char)"
    },
    {
      "trigger": "CheckNumeric",
      "contents": "CheckNumeric(${1:string strValue})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:CheckNumeric(strValue)"
    },
    {
      "trigger": "GetAutoComplete",
      "contents": "GetAutoComplete(${1:string inputText})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetAutoComplete(inputText)"
    },
    {
      "trigger": "GetCursorColor",
      "contents": "GetCursorColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetCursorColor()"
    },
    {
      "trigger": "GetDisabled",
      "contents": "GetDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetDisabled()"
    },
    {
      "trigger": "GetDrawBackground",
      "contents": "GetDrawBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetDrawBackground()"
    },
    {
      "trigger": "GetDrawBorder",
      "contents": "GetDrawBorder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetDrawBorder()"
    },
    {
      "trigger": "GetEnterAllowed",
      "contents": "GetEnterAllowed()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetEnterAllowed()"
    },
    {
      "trigger": "GetFloat",
      "contents": "GetFloat()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetFloat()"
    },
    {
      "trigger": "GetHighlightColor",
      "contents": "GetHighlightColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetHighlightColor()"
    },
    {
      "trigger": "GetHistoryEnabled",
      "contents": "GetHistoryEnabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetHistoryEnabled()"
    },
    {
      "trigger": "GetInt",
      "contents": "GetInt()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetInt()"
    },
    {
      "trigger": "GetNumeric",
      "contents": "GetNumeric()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetNumeric()"
    },
    {
      "trigger": "GetPaintBackground",
      "contents": "GetPaintBackground()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetPaintBackground()"
    },
    {
      "trigger": "GetPlaceholderColor",
      "contents": "GetPlaceholderColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetPlaceholderColor()"
    },
    {
      "trigger": "GetPlaceholderText",
      "contents": "GetPlaceholderText()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetPlaceholderText()"
    },
    {
      "trigger": "GetTabbingDisabled",
      "contents": "GetTabbingDisabled()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetTabbingDisabled()"
    },
    {
      "trigger": "GetTextColor",
      "contents": "GetTextColor()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetTextColor()"
    },
    {
      "trigger": "GetUpdateOnType",
      "contents": "GetUpdateOnType()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:GetUpdateOnType()"
    },
    {
      "trigger": "IsEditing",
      "contents": "IsEditing()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:IsEditing()"
    },
    {
      "trigger": "OnChange",
      "contents": "OnChange()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnChange()"
    },
    {
      "trigger": "OnEnter",
      "contents": "OnEnter(${1:string value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnEnter(value)"
    },
    {
      "trigger": "OnGetFocus",
      "contents": "OnGetFocus()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnGetFocus()"
    },
    {
      "trigger": "OnKeyCode",
      "contents": "OnKeyCode(${1:number keyCode})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnKeyCode(keyCode)"
    },
    {
      "trigger": "OnLoseFocus",
      "contents": "OnLoseFocus()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnLoseFocus()"
    },
    {
      "trigger": "OnTextChanged",
      "contents": "OnTextChanged(${1:boolean noMenuRemoval})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnTextChanged(noMenuRemoval)"
    },
    {
      "trigger": "OnValueChange",
      "contents": "OnValueChange(${1:string value})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OnValueChange(value)"
    },
    {
      "trigger": "OpenAutoComplete",
      "contents": "OpenAutoComplete(${1:table tab})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:OpenAutoComplete(tab)"
    },
    {
      "trigger": "SetCursorColor",
      "contents": "SetCursorColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetCursorColor(color)"
    },
    {
      "trigger": "SetDisabled",
      "contents": "SetDisabled(${1:boolean disabled})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetDisabled(disabled)"
    },
    {
      "trigger": "SetDrawBackground",
      "contents": "SetDrawBackground(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetDrawBackground(show)"
    },
    {
      "trigger": "SetDrawBorder",
      "contents": "SetDrawBorder(${1:boolean bool})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetDrawBorder(bool)"
    },
    {
      "trigger": "SetEditable",
      "contents": "SetEditable(${1:boolean enabled})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetEditable(enabled)"
    },
    {
      "trigger": "SetEnterAllowed",
      "contents": "SetEnterAllowed(${1:boolean allowEnter})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetEnterAllowed(allowEnter)"
    },
    {
      "trigger": "SetFont",
      "contents": "SetFont(${1:string font})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetFont(font)"
    },
    {
      "trigger": "SetHighlightColor",
      "contents": "SetHighlightColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetHighlightColor(color)"
    },
    {
      "trigger": "SetHistoryEnabled",
      "contents": "SetHistoryEnabled(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetHistoryEnabled(enable)"
    },
    {
      "trigger": "SetNumeric",
      "contents": "SetNumeric(${1:boolean numericOnly})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetNumeric(numericOnly)"
    },
    {
      "trigger": "SetPaintBackground",
      "contents": "SetPaintBackground(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetPaintBackground(show)"
    },
    {
      "trigger": "SetPlaceholderColor",
      "contents": "SetPlaceholderColor(${1:table color = Color(128, 128, 128)})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetPlaceholderColor(color)"
    },
    {
      "trigger": "SetPlaceholderText",
      "contents": "SetPlaceholderText(${1:string text = nil})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetPlaceholderText(text)"
    },
    {
      "trigger": "SetTabbingDisabled",
      "contents": "SetTabbingDisabled(${1:boolean enabled})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetTabbingDisabled(enabled)"
    },
    {
      "trigger": "SetTextColor",
      "contents": "SetTextColor(${1:table color})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetTextColor(color)"
    },
    {
      "trigger": "SetUpdateOnType",
      "contents": "SetUpdateOnType(${1:boolean updateOnType})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetUpdateOnType(updateOnType)"
    },
    {
      "trigger": "SetValue",
      "contents": "SetValue(${1:string text})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:SetValue(text)"
    },
    {
      "trigger": "UpdateConvarValue",
      "contents": "UpdateConvarValue()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:UpdateConvarValue()"
    },
    {
      "trigger": "UpdateFromHistory",
      "contents": "UpdateFromHistory()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:UpdateFromHistory()"
    },
    {
      "trigger": "UpdateFromMenu",
      "contents": "UpdateFromMenu()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTextEntry:UpdateFromMenu()"
    },
    {
      "trigger": "DTileLayout",
      "contents": "DTileLayout",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTileLayout\")"
    },
    {
      "trigger": "ClearTiles",
      "contents": "ClearTiles()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:ClearTiles()"
    },
    {
      "trigger": "ConsumeTiles",
      "contents": "ConsumeTiles(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:ConsumeTiles(x, y, w, h)"
    },
    {
      "trigger": "Copy",
      "contents": "Copy()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:Copy()"
    },
    {
      "trigger": "CopyContents",
      "contents": "CopyContents(${1:Panel source})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:CopyContents(source)"
    },
    {
      "trigger": "FindFreeTile",
      "contents": "FindFreeTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:FindFreeTile(x, y, w, h)"
    },
    {
      "trigger": "FitsInTile",
      "contents": "FitsInTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:FitsInTile(x, y, w, h)"
    },
    {
      "trigger": "GetBaseSize",
      "contents": "GetBaseSize()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetBaseSize()"
    },
    {
      "trigger": "GetBorder",
      "contents": "GetBorder()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetBorder()"
    },
    {
      "trigger": "GetMinHeight",
      "contents": "GetMinHeight()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetMinHeight()"
    },
    {
      "trigger": "GetSpaceX",
      "contents": "GetSpaceX()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetSpaceX()"
    },
    {
      "trigger": "GetSpaceY",
      "contents": "GetSpaceY()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetSpaceY()"
    },
    {
      "trigger": "GetTile",
      "contents": "GetTile(${1:number x}, ${2:number y})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:GetTile(x, y)"
    },
    {
      "trigger": "Layout",
      "contents": "Layout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:Layout()"
    },
    {
      "trigger": "LayoutTiles",
      "contents": "LayoutTiles()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:LayoutTiles()"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:OnModified()"
    },
    {
      "trigger": "SetBaseSize",
      "contents": "SetBaseSize(${1:number size})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetBaseSize(size)"
    },
    {
      "trigger": "SetBorder",
      "contents": "SetBorder(${1:number border})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetBorder(border)"
    },
    {
      "trigger": "SetMinHeight",
      "contents": "SetMinHeight(${1:number minH})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetMinHeight(minH)"
    },
    {
      "trigger": "SetSpaceX",
      "contents": "SetSpaceX(${1:number spacingX})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetSpaceX(spacingX)"
    },
    {
      "trigger": "SetSpaceY",
      "contents": "SetSpaceY(${1:number spaceY})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetSpaceY(spaceY)"
    },
    {
      "trigger": "SetTile",
      "contents": "SetTile(${1:number x}, ${2:number y}, ${3:any state})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTileLayout:SetTile(x, y, state)"
    },
    {
      "trigger": "DTooltip",
      "contents": "DTooltip",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTooltip\")"
    },
    {
      "trigger": "Close",
      "contents": "Close()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTooltip:Close()"
    },
    {
      "trigger": "DrawArrow",
      "contents": "DrawArrow(${1:number x}, ${2:number y})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTooltip:DrawArrow(x, y)"
    },
    {
      "trigger": "OpenForPanel",
      "contents": "OpenForPanel(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTooltip:OpenForPanel(pnl)"
    },
    {
      "trigger": "PositionTooltip",
      "contents": "PositionTooltip()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTooltip:PositionTooltip()"
    },
    {
      "trigger": "SetContents",
      "contents": "SetContents(${1:Panel panel}, ${2:boolean delete = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTooltip:SetContents(panel, delete)"
    },
    {
      "trigger": "DTree",
      "contents": "DTree",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTree\")"
    },
    {
      "trigger": "AddNode",
      "contents": "AddNode(${1:string name}, ${2:string icon = icon16/folder.png})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:AddNode(name, icon)"
    },
    {
      "trigger": "ChildExpanded",
      "contents": "ChildExpanded(${1:boolean bExpand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:ChildExpanded(bExpand)"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick(${1:DTree_Node node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:DoClick(node)"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick(${1:DTree_Node node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:DoRightClick(node)"
    },
    {
      "trigger": "ExpandTo",
      "contents": "ExpandTo(${1:boolean bExpand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:ExpandTo(bExpand)"
    },
    {
      "trigger": "GetClickOnDragHover",
      "contents": "GetClickOnDragHover()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:GetClickOnDragHover()"
    },
    {
      "trigger": "GetIndentSize",
      "contents": "GetIndentSize()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:GetIndentSize()"
    },
    {
      "trigger": "GetLineHeight",
      "contents": "GetLineHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:GetLineHeight()"
    },
    {
      "trigger": "GetSelectedItem",
      "contents": "GetSelectedItem()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:GetSelectedItem()"
    },
    {
      "trigger": "GetShowIcons",
      "contents": "GetShowIcons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:GetShowIcons()"
    },
    {
      "trigger": "LayoutTree",
      "contents": "LayoutTree()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:LayoutTree()"
    },
    {
      "trigger": "MoveChildTo",
      "contents": "MoveChildTo(${1:Panel child}, ${2:number pos})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:MoveChildTo(child, pos)"
    },
    {
      "trigger": "OnNodeSelected",
      "contents": "OnNodeSelected(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:OnNodeSelected(node)"
    },
    {
      "trigger": "Root",
      "contents": "Root()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:Root()"
    },
    {
      "trigger": "SetClickOnDragHover",
      "contents": "SetClickOnDragHover(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetClickOnDragHover(enable)"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean bExpand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetExpanded(bExpand)"
    },
    {
      "trigger": "SetIndentSize",
      "contents": "SetIndentSize(${1:number size})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetIndentSize(size)"
    },
    {
      "trigger": "SetLineHeight",
      "contents": "SetLineHeight(${1:number h})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetLineHeight(h)"
    },
    {
      "trigger": "SetSelectedItem",
      "contents": "SetSelectedItem(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetSelectedItem(node)"
    },
    {
      "trigger": "SetShowIcons",
      "contents": "SetShowIcons(${1:boolean show})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:SetShowIcons(show)"
    },
    {
      "trigger": "ShowIcons",
      "contents": "ShowIcons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree:ShowIcons()"
    },
    {
      "trigger": "DTree_Node",
      "contents": "DTree_Node",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTree_Node\")"
    },
    {
      "trigger": "AddFolder",
      "contents": "AddFolder(${1:string name}, ${2:string folder}, ${3:string path}, ${4:boolean showFiles = false}, ${5:string wildcard = *}, ${6:boolean bDontForceExpandable = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:AddFolder(name, folder, path, showFiles, wildcard, bDontForceExpandable)"
    },
    {
      "trigger": "AddNode",
      "contents": "AddNode(${1:string name}, ${2:string icon = icon16/folder.png})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:AddNode(name, icon)"
    },
    {
      "trigger": "AddPanel",
      "contents": "AddPanel(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:AddPanel(pnl)"
    },
    {
      "trigger": "AnimSlide",
      "contents": "AnimSlide(${1:table anim}, ${2:number delta}, ${3:table data})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:AnimSlide(anim, delta, data)"
    },
    {
      "trigger": "ChildExpanded",
      "contents": "ChildExpanded(${1:boolean expanded})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:ChildExpanded(expanded)"
    },
    {
      "trigger": "CleanList",
      "contents": "CleanList()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:CleanList()"
    },
    {
      "trigger": "Copy",
      "contents": "Copy()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:Copy()"
    },
    {
      "trigger": "CreateChildNodes",
      "contents": "CreateChildNodes()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:CreateChildNodes()"
    },
    {
      "trigger": "DoChildrenOrder",
      "contents": "DoChildrenOrder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:DoChildrenOrder()"
    },
    {
      "trigger": "DoClick",
      "contents": "DoClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:DoClick()"
    },
    {
      "trigger": "DoRightClick",
      "contents": "DoRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:DoRightClick()"
    },
    {
      "trigger": "ExpandRecurse",
      "contents": "ExpandRecurse(${1:boolean expand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:ExpandRecurse(expand)"
    },
    {
      "trigger": "ExpandTo",
      "contents": "ExpandTo(${1:boolean expand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:ExpandTo(expand)"
    },
    {
      "trigger": "FilePopulate",
      "contents": "FilePopulate(${1:boolean bAndChildren}, ${2:boolean bExpand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:FilePopulate(bAndChildren, bExpand)"
    },
    {
      "trigger": "FilePopulateCallback",
      "contents": "FilePopulateCallback(${1:table files}, ${2:table folders}, ${3:string foldername}, ${4:string path}, ${5:boolean bAndChildren}, ${6:string wildcard})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:FilePopulateCallback(files, folders, foldername, path, bAndChildren, wildcard)"
    },
    {
      "trigger": "GetChildNode",
      "contents": "GetChildNode(${1:number num})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetChildNode(num)"
    },
    {
      "trigger": "GetChildNodeCount",
      "contents": "GetChildNodeCount()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetChildNodeCount()"
    },
    {
      "trigger": "GetChildNodes",
      "contents": "GetChildNodes()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetChildNodes()"
    },
    {
      "trigger": "GetDirty",
      "contents": "GetDirty()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetDirty()"
    },
    {
      "trigger": "GetDoubleClickToOpen",
      "contents": "GetDoubleClickToOpen()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetDoubleClickToOpen()"
    },
    {
      "trigger": "GetDraggableName",
      "contents": "GetDraggableName()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetDraggableName()"
    },
    {
      "trigger": "GetDrawLines",
      "contents": "GetDrawLines()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetDrawLines()"
    },
    {
      "trigger": "GetExpanded",
      "contents": "GetExpanded()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetExpanded()"
    },
    {
      "trigger": "GetFileName",
      "contents": "GetFileName()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetFileName()"
    },
    {
      "trigger": "GetFolder",
      "contents": "GetFolder()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetFolder()"
    },
    {
      "trigger": "GetForceShowExpander",
      "contents": "GetForceShowExpander()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetForceShowExpander()"
    },
    {
      "trigger": "GetHideExpander",
      "contents": "GetHideExpander()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetHideExpander()"
    },
    {
      "trigger": "GetIcon",
      "contents": "GetIcon()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetIcon()"
    },
    {
      "trigger": "GetIndentSize",
      "contents": "GetIndentSize()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetIndentSize()"
    },
    {
      "trigger": "GetLastChild",
      "contents": "GetLastChild()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetLastChild()"
    },
    {
      "trigger": "GetLineHeight",
      "contents": "GetLineHeight()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetLineHeight()"
    },
    {
      "trigger": "GetNeedsChildSearch",
      "contents": "GetNeedsChildSearch()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetNeedsChildSearch()"
    },
    {
      "trigger": "GetNeedsPopulating",
      "contents": "GetNeedsPopulating()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetNeedsPopulating()"
    },
    {
      "trigger": "GetParentNode",
      "contents": "GetParentNode()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetParentNode()"
    },
    {
      "trigger": "GetPathID",
      "contents": "GetPathID()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetPathID()"
    },
    {
      "trigger": "GetRoot",
      "contents": "GetRoot()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetRoot()"
    },
    {
      "trigger": "GetShowFiles",
      "contents": "GetShowFiles()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetShowFiles()"
    },
    {
      "trigger": "GetWildCard",
      "contents": "GetWildCard()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:GetWildCard()"
    },
    {
      "trigger": "Insert",
      "contents": "Insert(${1:Panel node}, ${2:Panel nodeNextTo}, ${3:boolean before})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:Insert(node, nodeNextTo, before)"
    },
    {
      "trigger": "InsertNode",
      "contents": "InsertNode(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:InsertNode(node)"
    },
    {
      "trigger": "InstallDraggable",
      "contents": "InstallDraggable(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:InstallDraggable(node)"
    },
    {
      "trigger": "InternalDoClick",
      "contents": "InternalDoClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:InternalDoClick()"
    },
    {
      "trigger": "InternalDoRightClick",
      "contents": "InternalDoRightClick()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:InternalDoRightClick()"
    },
    {
      "trigger": "IsRootNode",
      "contents": "IsRootNode()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:IsRootNode()"
    },
    {
      "trigger": "LeaveTree",
      "contents": "LeaveTree(${1:Panel pnl})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:LeaveTree(pnl)"
    },
    {
      "trigger": "MakeFolder",
      "contents": "MakeFolder(${1:string folder}, ${2:string path}, ${3:boolean showFiles = false}, ${4:string wildcard = *}, ${5:boolean dontForceExpandable = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:MakeFolder(folder, path, showFiles, wildcard, dontForceExpandable)"
    },
    {
      "trigger": "MoveChildTo",
      "contents": "MoveChildTo(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:MoveChildTo(node)"
    },
    {
      "trigger": "MoveToTop",
      "contents": "MoveToTop()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:MoveToTop()"
    },
    {
      "trigger": "OnModified",
      "contents": "OnModified()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:OnModified()"
    },
    {
      "trigger": "OnNodeAdded",
      "contents": "OnNodeAdded(${1:DTree_Node newNode})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:OnNodeAdded(newNode)"
    },
    {
      "trigger": "OnNodeSelected",
      "contents": "OnNodeSelected(${1:Panel node})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:OnNodeSelected(node)"
    },
    {
      "trigger": "PerformRootNodeLayout",
      "contents": "PerformRootNodeLayout()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:PerformRootNodeLayout()"
    },
    {
      "trigger": "PopulateChildren",
      "contents": "PopulateChildren()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:PopulateChildren()"
    },
    {
      "trigger": "PopulateChildrenAndSelf",
      "contents": "PopulateChildrenAndSelf(${1:boolean expand})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:PopulateChildrenAndSelf(expand)"
    },
    {
      "trigger": "SetDirty",
      "contents": "SetDirty(${1:boolean dirty})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetDirty(dirty)"
    },
    {
      "trigger": "SetDoubleClickToOpen",
      "contents": "SetDoubleClickToOpen(${1:boolean enable})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetDoubleClickToOpen(enable)"
    },
    {
      "trigger": "SetDraggableName",
      "contents": "SetDraggableName(${1:string name})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetDraggableName(name)"
    },
    {
      "trigger": "SetDrawLines",
      "contents": "SetDrawLines(${1:boolean draw})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetDrawLines(draw)"
    },
    {
      "trigger": "SetExpanded",
      "contents": "SetExpanded(${1:boolean expand}, ${2:boolean surpressAnimation = false})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetExpanded(expand, surpressAnimation)"
    },
    {
      "trigger": "SetFileName",
      "contents": "SetFileName(${1:string filename})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetFileName(filename)"
    },
    {
      "trigger": "SetFolder",
      "contents": "SetFolder(${1:string folder})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetFolder(folder)"
    },
    {
      "trigger": "SetForceShowExpander",
      "contents": "SetForceShowExpander(${1:boolean forceShow})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetForceShowExpander(forceShow)"
    },
    {
      "trigger": "SetHideExpander",
      "contents": "SetHideExpander(${1:boolean hide})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetHideExpander(hide)"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetIcon(path)"
    },
    {
      "trigger": "SetLastChild",
      "contents": "SetLastChild(${1:boolean last})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetLastChild(last)"
    },
    {
      "trigger": "SetNeedsChildSearch",
      "contents": "SetNeedsChildSearch(${1:boolean newState})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetNeedsChildSearch(newState)"
    },
    {
      "trigger": "SetNeedsPopulating",
      "contents": "SetNeedsPopulating(${1:boolean needs})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetNeedsPopulating(needs)"
    },
    {
      "trigger": "SetParentNode",
      "contents": "SetParentNode(${1:Panel parent})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetParentNode(parent)"
    },
    {
      "trigger": "SetPathID",
      "contents": "SetPathID(${1:string path})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetPathID(path)"
    },
    {
      "trigger": "SetRoot",
      "contents": "SetRoot(${1:Panel root})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetRoot(root)"
    },
    {
      "trigger": "SetSelected",
      "contents": "SetSelected(${1:boolean selected})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetSelected(selected)"
    },
    {
      "trigger": "SetShowFiles",
      "contents": "SetShowFiles(${1:boolean showFiles})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetShowFiles(showFiles)"
    },
    {
      "trigger": "SetupCopy",
      "contents": "SetupCopy()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetupCopy()"
    },
    {
      "trigger": "SetWildCard",
      "contents": "SetWildCard(${1:string wildcard})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:SetWildCard(wildcard)"
    },
    {
      "trigger": "ShowIcons",
      "contents": "ShowIcons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DTree_Node:ShowIcons()"
    },
    {
      "trigger": "DTree_Node_Button",
      "contents": "DTree_Node_Button",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DTree_Node_Button\")"
    },
    {
      "trigger": "DVerticalDivider",
      "contents": "DVerticalDivider",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DVerticalDivider\")"
    },
    {
      "trigger": "DoConstraints",
      "contents": "DoConstraints()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:DoConstraints()"
    },
    {
      "trigger": "GetBottom",
      "contents": "GetBottom()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetBottom()"
    },
    {
      "trigger": "GetBottomMin",
      "contents": "GetBottomMin()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetBottomMin()"
    },
    {
      "trigger": "GetDividerHeight",
      "contents": "GetDividerHeight()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetDividerHeight()"
    },
    {
      "trigger": "GetDragging",
      "contents": "GetDragging()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetDragging()"
    },
    {
      "trigger": "GetHoldPos",
      "contents": "GetHoldPos()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetHoldPos()"
    },
    {
      "trigger": "GetMiddle",
      "contents": "GetMiddle()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetMiddle()"
    },
    {
      "trigger": "GetTop",
      "contents": "GetTop()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetTop()"
    },
    {
      "trigger": "GetTopHeight",
      "contents": "GetTopHeight()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetTopHeight()"
    },
    {
      "trigger": "GetTopMax",
      "contents": "GetTopMax()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetTopMax()"
    },
    {
      "trigger": "GetTopMin",
      "contents": "GetTopMin()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:GetTopMin()"
    },
    {
      "trigger": "SetBottom",
      "contents": "SetBottom(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetBottom(pnl)"
    },
    {
      "trigger": "SetBottomMin",
      "contents": "SetBottomMin(${1:number height})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetBottomMin(height)"
    },
    {
      "trigger": "SetDividerHeight",
      "contents": "SetDividerHeight(${1:number height})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetDividerHeight(height)"
    },
    {
      "trigger": "SetDragging",
      "contents": "SetDragging(${1:boolean isDragging})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetDragging(isDragging)"
    },
    {
      "trigger": "SetHoldPos",
      "contents": "SetHoldPos(${1:number y})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetHoldPos(y)"
    },
    {
      "trigger": "SetMiddle",
      "contents": "SetMiddle(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetMiddle(pnl)"
    },
    {
      "trigger": "SetTop",
      "contents": "SetTop(${1:Panel pnl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetTop(pnl)"
    },
    {
      "trigger": "SetTopHeight",
      "contents": "SetTopHeight(${1:number height})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetTopHeight(height)"
    },
    {
      "trigger": "SetTopMax",
      "contents": "SetTopMax(${1:number height})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetTopMax(height)"
    },
    {
      "trigger": "SetTopMin",
      "contents": "SetTopMin(${1:number height})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:SetTopMin(height)"
    },
    {
      "trigger": "StartGrab",
      "contents": "StartGrab()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVerticalDivider:StartGrab()"
    },
    {
      "trigger": "DVScrollBar",
      "contents": "DVScrollBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"DVScrollBar\")"
    },
    {
      "trigger": "AddScroll",
      "contents": "AddScroll(${1:number add})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:AddScroll(add)"
    },
    {
      "trigger": "AnimateTo",
      "contents": "AnimateTo(${1:number scroll}, ${2:number length}, ${3:number delay = 0}, ${4:number ease = -1})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:AnimateTo(scroll, length, delay, ease)"
    },
    {
      "trigger": "BarScale",
      "contents": "BarScale()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:BarScale()"
    },
    {
      "trigger": "GetHideButtons",
      "contents": "GetHideButtons()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:GetHideButtons()"
    },
    {
      "trigger": "GetOffset",
      "contents": "GetOffset()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:GetOffset()"
    },
    {
      "trigger": "GetScroll",
      "contents": "GetScroll()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:GetScroll()"
    },
    {
      "trigger": "Grip",
      "contents": "Grip()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:Grip()"
    },
    {
      "trigger": "SetHideButtons",
      "contents": "SetHideButtons(${1:boolean hide})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:SetHideButtons(hide)"
    },
    {
      "trigger": "SetScroll",
      "contents": "SetScroll(${1:number scroll})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:SetScroll(scroll)"
    },
    {
      "trigger": "SetUp",
      "contents": "SetUp(${1:number barSize}, ${2:number canvasSize})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "DVScrollBar:SetUp(barSize, canvasSize)"
    },
    {
      "trigger": "EditablePanel",
      "contents": "EditablePanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"EditablePanel\")"
    },
    {
      "trigger": "fingerposer",
      "contents": "fingerposer",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"fingerposer\")"
    },
    {
      "trigger": "FingerVar",
      "contents": "FingerVar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"FingerVar\")"
    },
    {
      "trigger": "Frame",
      "contents": "Frame",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Frame\")"
    },
    {
      "trigger": "HTML",
      "contents": "HTML",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"HTML\")"
    },
    {
      "trigger": "IconEditor",
      "contents": "IconEditor",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"IconEditor\")"
    },
    {
      "trigger": "AboveLayout",
      "contents": "AboveLayout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:AboveLayout()"
    },
    {
      "trigger": "BestGuessLayout",
      "contents": "BestGuessLayout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:BestGuessLayout()"
    },
    {
      "trigger": "FillAnimations",
      "contents": "FillAnimations(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:FillAnimations(ent)"
    },
    {
      "trigger": "FullFrontalLayout",
      "contents": "FullFrontalLayout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:FullFrontalLayout()"
    },
    {
      "trigger": "OriginLayout",
      "contents": "OriginLayout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:OriginLayout()"
    },
    {
      "trigger": "Refresh",
      "contents": "Refresh()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:Refresh()"
    },
    {
      "trigger": "RenderIcon",
      "contents": "RenderIcon()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:RenderIcon()"
    },
    {
      "trigger": "RightLayout",
      "contents": "RightLayout()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:RightLayout()"
    },
    {
      "trigger": "SetDefaultLighting",
      "contents": "SetDefaultLighting()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:SetDefaultLighting()"
    },
    {
      "trigger": "SetFromEntity",
      "contents": "SetFromEntity(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:SetFromEntity(ent)"
    },
    {
      "trigger": "SetIcon",
      "contents": "SetIcon(${1:Panel icon})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:SetIcon(icon)"
    },
    {
      "trigger": "UpdateEntity",
      "contents": "UpdateEntity(${1:Entity ent})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "IconEditor:UpdateEntity(ent)"
    },
    {
      "trigger": "ImageCheckBox",
      "contents": "ImageCheckBox",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ImageCheckBox\")"
    },
    {
      "trigger": "GetChecked",
      "contents": "GetChecked()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ImageCheckBox:GetChecked()"
    },
    {
      "trigger": "Set",
      "contents": "Set(${1:boolean OnOff})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ImageCheckBox:Set(OnOff)"
    },
    {
      "trigger": "SetChecked",
      "contents": "SetChecked(${1:boolean bOn})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ImageCheckBox:SetChecked(bOn)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string mat})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "ImageCheckBox:SetMaterial(mat)"
    },
    {
      "trigger": "Label",
      "contents": "Label",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Label\")"
    },
    {
      "trigger": "Material",
      "contents": "Material",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Material\")"
    },
    {
      "trigger": "SetAlpha",
      "contents": "SetAlpha(${1:number alpha})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "Material:SetAlpha(alpha)"
    },
    {
      "trigger": "SetMaterial",
      "contents": "SetMaterial(${1:string matname})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "Material:SetMaterial(matname)"
    },
    {
      "trigger": "MatSelect",
      "contents": "MatSelect",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"MatSelect\")"
    },
    {
      "trigger": "Clear",
      "contents": "Clear()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "MatSelect:Clear()"
    },
    {
      "trigger": "FindMaterialByValue",
      "contents": "FindMaterialByValue(${1:string mat})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "MatSelect:FindMaterialByValue(mat)"
    },
    {
      "trigger": "SelectedItemPaintOver",
      "contents": "SelectedItemPaintOver(${1:number w}, ${2:number h})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "MatSelect:SelectedItemPaintOver(w, h)"
    },
    {
      "trigger": "SelectMaterial",
      "contents": "SelectMaterial(${1:DImageButton mat})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "MatSelect:SelectMaterial(mat)"
    },
    {
      "trigger": "ModelImage",
      "contents": "ModelImage",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"ModelImage\")"
    },
    {
      "trigger": "PanelList",
      "contents": "PanelList",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"PanelList\")"
    },
    {
      "trigger": "PresetEditor",
      "contents": "PresetEditor",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"PresetEditor\")"
    },
    {
      "trigger": "PropSelect",
      "contents": "PropSelect",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"PropSelect\")"
    },
    {
      "trigger": "RadioButton",
      "contents": "RadioButton",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"RadioButton\")"
    },
    {
      "trigger": "RichText",
      "contents": "RichText",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"RichText\")"
    },
    {
      "trigger": "SlideBar",
      "contents": "SlideBar",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"SlideBar\")"
    },
    {
      "trigger": "Slider",
      "contents": "Slider",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"Slider\")"
    },
    {
      "trigger": "SpawnIcon",
      "contents": "SpawnIcon",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"SpawnIcon\")"
    },
    {
      "trigger": "GetBodyGroup",
      "contents": "GetBodyGroup()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:GetBodyGroup()"
    },
    {
      "trigger": "GetModelName",
      "contents": "GetModelName()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:GetModelName()"
    },
    {
      "trigger": "GetSkinID",
      "contents": "GetSkinID()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:GetSkinID()"
    },
    {
      "trigger": "OpenMenu",
      "contents": "OpenMenu()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:OpenMenu()"
    },
    {
      "trigger": "SetBodyGroup",
      "contents": "SetBodyGroup(${1:number bodygroup}, ${2:number value})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:SetBodyGroup(bodygroup, value)"
    },
    {
      "trigger": "SetModelName",
      "contents": "SetModelName(${1:string mdl})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:SetModelName(mdl)"
    },
    {
      "trigger": "SetSkinID",
      "contents": "SetSkinID(${1:number skin})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnIcon:SetSkinID(skin)"
    },
    {
      "trigger": "SpawnmenuContentPanel",
      "contents": "SpawnmenuContentPanel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"SpawnmenuContentPanel\")"
    },
    {
      "trigger": "CallPopulateHook",
      "contents": "CallPopulateHook(${1:string hookname})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnmenuContentPanel:CallPopulateHook(hookname)"
    },
    {
      "trigger": "EnableModify",
      "contents": "EnableModify()",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnmenuContentPanel:EnableModify()"
    },
    {
      "trigger": "EnableSearch",
      "contents": "EnableSearch(${1:string category}, ${2:string hookname})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnmenuContentPanel:EnableSearch(category, hookname)"
    },
    {
      "trigger": "SwitchPanel",
      "contents": "SwitchPanel(${1:Panel panel})",
      "annotation": "Client",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "SpawnmenuContentPanel:SwitchPanel(panel)"
    },
    {
      "trigger": "TextEntry",
      "contents": "TextEntry",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"TextEntry\")"
    },
    {
      "trigger": "OnKeyCodeTyped",
      "contents": "OnKeyCodeTyped(${1:number keyCode})",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "TextEntry:OnKeyCodeTyped(keyCode)"
    },
    {
      "trigger": "OnTextChanged",
      "contents": "OnTextChanged()",
      "annotation": "Shared",
      "kind": [
        "markup",
        "m",
        "Panel Method"
      ],
      "details": "TextEntry:OnTextChanged()"
    },
    {
      "trigger": "TGAImage",
      "contents": "TGAImage",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"TGAImage\")"
    },
    {
      "trigger": "URLLabel",
      "contents": "URLLabel",
      "annotation": "Panel",
      "kind": [
        "navigation",
        "P",
        "Panel"
      ],
      "details": "vgui.Create(\"URLLabel\")"
    },
    {
      "trigger": "CONTINUOUS_USE",
      "contents": "CONTINUOUS_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTINUOUS_USE = 0"
    },
    {
      "trigger": "ONOFF_USE",
      "contents": "ONOFF_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ONOFF_USE = 1"
    },
    {
      "trigger": "DIRECTIONAL_USE",
      "contents": "DIRECTIONAL_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DIRECTIONAL_USE = 2"
    },
    {
      "trigger": "SIMPLE_USE",
      "contents": "SIMPLE_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIMPLE_USE = 3"
    },
    {
      "trigger": "ACT_INVALID",
      "contents": "ACT_INVALID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_INVALID = -1"
    },
    {
      "trigger": "ACT_RESET",
      "contents": "ACT_RESET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RESET = 0"
    },
    {
      "trigger": "ACT_IDLE",
      "contents": "ACT_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE = 1"
    },
    {
      "trigger": "ACT_TRANSITION",
      "contents": "ACT_TRANSITION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TRANSITION = 2"
    },
    {
      "trigger": "ACT_COVER",
      "contents": "ACT_COVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER = 3"
    },
    {
      "trigger": "ACT_COVER_MED",
      "contents": "ACT_COVER_MED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER_MED = 4"
    },
    {
      "trigger": "ACT_COVER_LOW",
      "contents": "ACT_COVER_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER_LOW = 5"
    },
    {
      "trigger": "ACT_WALK",
      "contents": "ACT_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK = 6"
    },
    {
      "trigger": "ACT_WALK_AIM",
      "contents": "ACT_WALK_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM = 7"
    },
    {
      "trigger": "ACT_WALK_CROUCH",
      "contents": "ACT_WALK_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CROUCH = 8"
    },
    {
      "trigger": "ACT_WALK_CROUCH_AIM",
      "contents": "ACT_WALK_CROUCH_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CROUCH_AIM = 9"
    },
    {
      "trigger": "ACT_RUN",
      "contents": "ACT_RUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN = 10"
    },
    {
      "trigger": "ACT_RUN_AIM",
      "contents": "ACT_RUN_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM = 11"
    },
    {
      "trigger": "ACT_RUN_CROUCH",
      "contents": "ACT_RUN_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_CROUCH = 12"
    },
    {
      "trigger": "ACT_RUN_CROUCH_AIM",
      "contents": "ACT_RUN_CROUCH_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_CROUCH_AIM = 13"
    },
    {
      "trigger": "ACT_RUN_PROTECTED",
      "contents": "ACT_RUN_PROTECTED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_PROTECTED = 14"
    },
    {
      "trigger": "ACT_SCRIPT_CUSTOM_MOVE",
      "contents": "ACT_SCRIPT_CUSTOM_MOVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SCRIPT_CUSTOM_MOVE = 15"
    },
    {
      "trigger": "ACT_RANGE_ATTACK1",
      "contents": "ACT_RANGE_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK1 = 16"
    },
    {
      "trigger": "ACT_RANGE_ATTACK2",
      "contents": "ACT_RANGE_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK2 = 17"
    },
    {
      "trigger": "ACT_RANGE_ATTACK1_LOW",
      "contents": "ACT_RANGE_ATTACK1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK1_LOW = 18"
    },
    {
      "trigger": "ACT_RANGE_ATTACK2_LOW",
      "contents": "ACT_RANGE_ATTACK2_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK2_LOW = 19"
    },
    {
      "trigger": "ACT_DIESIMPLE",
      "contents": "ACT_DIESIMPLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIESIMPLE = 20"
    },
    {
      "trigger": "ACT_DIEBACKWARD",
      "contents": "ACT_DIEBACKWARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIEBACKWARD = 21"
    },
    {
      "trigger": "ACT_DIEFORWARD",
      "contents": "ACT_DIEFORWARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIEFORWARD = 22"
    },
    {
      "trigger": "ACT_DIEVIOLENT",
      "contents": "ACT_DIEVIOLENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIEVIOLENT = 23"
    },
    {
      "trigger": "ACT_DIERAGDOLL",
      "contents": "ACT_DIERAGDOLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIERAGDOLL = 24"
    },
    {
      "trigger": "ACT_FLY",
      "contents": "ACT_FLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLY = 25"
    },
    {
      "trigger": "ACT_HOVER",
      "contents": "ACT_HOVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HOVER = 26"
    },
    {
      "trigger": "ACT_GLIDE",
      "contents": "ACT_GLIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GLIDE = 27"
    },
    {
      "trigger": "ACT_SWIM",
      "contents": "ACT_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SWIM = 28"
    },
    {
      "trigger": "ACT_SWIM_IDLE",
      "contents": "ACT_SWIM_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SWIM_IDLE = 29"
    },
    {
      "trigger": "ACT_JUMP",
      "contents": "ACT_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_JUMP = 30"
    },
    {
      "trigger": "ACT_HOP",
      "contents": "ACT_HOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HOP = 31"
    },
    {
      "trigger": "ACT_LEAP",
      "contents": "ACT_LEAP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_LEAP = 32"
    },
    {
      "trigger": "ACT_LAND",
      "contents": "ACT_LAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_LAND = 33"
    },
    {
      "trigger": "ACT_CLIMB_UP",
      "contents": "ACT_CLIMB_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CLIMB_UP = 34"
    },
    {
      "trigger": "ACT_CLIMB_DOWN",
      "contents": "ACT_CLIMB_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CLIMB_DOWN = 35"
    },
    {
      "trigger": "ACT_CLIMB_DISMOUNT",
      "contents": "ACT_CLIMB_DISMOUNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CLIMB_DISMOUNT = 36"
    },
    {
      "trigger": "ACT_SHIPLADDER_UP",
      "contents": "ACT_SHIPLADDER_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIPLADDER_UP = 37"
    },
    {
      "trigger": "ACT_SHIPLADDER_DOWN",
      "contents": "ACT_SHIPLADDER_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIPLADDER_DOWN = 38"
    },
    {
      "trigger": "ACT_STRAFE_LEFT",
      "contents": "ACT_STRAFE_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STRAFE_LEFT = 39"
    },
    {
      "trigger": "ACT_STRAFE_RIGHT",
      "contents": "ACT_STRAFE_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STRAFE_RIGHT = 40"
    },
    {
      "trigger": "ACT_ROLL_LEFT",
      "contents": "ACT_ROLL_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ROLL_LEFT = 41"
    },
    {
      "trigger": "ACT_ROLL_RIGHT",
      "contents": "ACT_ROLL_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ROLL_RIGHT = 42"
    },
    {
      "trigger": "ACT_TURN_LEFT",
      "contents": "ACT_TURN_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TURN_LEFT = 43"
    },
    {
      "trigger": "ACT_TURN_RIGHT",
      "contents": "ACT_TURN_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TURN_RIGHT = 44"
    },
    {
      "trigger": "ACT_CROUCH",
      "contents": "ACT_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCH = 45"
    },
    {
      "trigger": "ACT_CROUCHIDLE",
      "contents": "ACT_CROUCHIDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHIDLE = 46"
    },
    {
      "trigger": "ACT_STAND",
      "contents": "ACT_STAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STAND = 47"
    },
    {
      "trigger": "ACT_USE",
      "contents": "ACT_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_USE = 48"
    },
    {
      "trigger": "ACT_SIGNAL1",
      "contents": "ACT_SIGNAL1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL1 = 49"
    },
    {
      "trigger": "ACT_SIGNAL2",
      "contents": "ACT_SIGNAL2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL2 = 50"
    },
    {
      "trigger": "ACT_SIGNAL3",
      "contents": "ACT_SIGNAL3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL3 = 51"
    },
    {
      "trigger": "ACT_SIGNAL_ADVANCE",
      "contents": "ACT_SIGNAL_ADVANCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_ADVANCE = 52"
    },
    {
      "trigger": "ACT_SIGNAL_FORWARD",
      "contents": "ACT_SIGNAL_FORWARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_FORWARD = 53"
    },
    {
      "trigger": "ACT_SIGNAL_GROUP",
      "contents": "ACT_SIGNAL_GROUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_GROUP = 54"
    },
    {
      "trigger": "ACT_SIGNAL_HALT",
      "contents": "ACT_SIGNAL_HALT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_HALT = 55"
    },
    {
      "trigger": "ACT_SIGNAL_LEFT",
      "contents": "ACT_SIGNAL_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_LEFT = 56"
    },
    {
      "trigger": "ACT_SIGNAL_RIGHT",
      "contents": "ACT_SIGNAL_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_RIGHT = 57"
    },
    {
      "trigger": "ACT_SIGNAL_TAKECOVER",
      "contents": "ACT_SIGNAL_TAKECOVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SIGNAL_TAKECOVER = 58"
    },
    {
      "trigger": "ACT_LOOKBACK_RIGHT",
      "contents": "ACT_LOOKBACK_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_LOOKBACK_RIGHT = 59"
    },
    {
      "trigger": "ACT_LOOKBACK_LEFT",
      "contents": "ACT_LOOKBACK_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_LOOKBACK_LEFT = 60"
    },
    {
      "trigger": "ACT_COWER",
      "contents": "ACT_COWER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COWER = 61"
    },
    {
      "trigger": "ACT_SMALL_FLINCH",
      "contents": "ACT_SMALL_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMALL_FLINCH = 62"
    },
    {
      "trigger": "ACT_BIG_FLINCH",
      "contents": "ACT_BIG_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BIG_FLINCH = 63"
    },
    {
      "trigger": "ACT_MELEE_ATTACK1",
      "contents": "ACT_MELEE_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MELEE_ATTACK1 = 64"
    },
    {
      "trigger": "ACT_MELEE_ATTACK2",
      "contents": "ACT_MELEE_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MELEE_ATTACK2 = 65"
    },
    {
      "trigger": "ACT_RELOAD",
      "contents": "ACT_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD = 66"
    },
    {
      "trigger": "ACT_RELOAD_START",
      "contents": "ACT_RELOAD_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_START = 67"
    },
    {
      "trigger": "ACT_RELOAD_FINISH",
      "contents": "ACT_RELOAD_FINISH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_FINISH = 68"
    },
    {
      "trigger": "ACT_RELOAD_LOW",
      "contents": "ACT_RELOAD_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_LOW = 69"
    },
    {
      "trigger": "ACT_ARM",
      "contents": "ACT_ARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ARM = 70"
    },
    {
      "trigger": "ACT_DISARM",
      "contents": "ACT_DISARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DISARM = 71"
    },
    {
      "trigger": "ACT_DROP_WEAPON",
      "contents": "ACT_DROP_WEAPON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DROP_WEAPON = 72"
    },
    {
      "trigger": "ACT_DROP_WEAPON_SHOTGUN",
      "contents": "ACT_DROP_WEAPON_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DROP_WEAPON_SHOTGUN = 73"
    },
    {
      "trigger": "ACT_PICKUP_GROUND",
      "contents": "ACT_PICKUP_GROUND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PICKUP_GROUND = 74"
    },
    {
      "trigger": "ACT_PICKUP_RACK",
      "contents": "ACT_PICKUP_RACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PICKUP_RACK = 75"
    },
    {
      "trigger": "ACT_IDLE_ANGRY",
      "contents": "ACT_IDLE_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY = 76"
    },
    {
      "trigger": "ACT_IDLE_RELAXED",
      "contents": "ACT_IDLE_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_RELAXED = 77"
    },
    {
      "trigger": "ACT_IDLE_STIMULATED",
      "contents": "ACT_IDLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_STIMULATED = 78"
    },
    {
      "trigger": "ACT_IDLE_AGITATED",
      "contents": "ACT_IDLE_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AGITATED = 79"
    },
    {
      "trigger": "ACT_IDLE_STEALTH",
      "contents": "ACT_IDLE_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_STEALTH = 80"
    },
    {
      "trigger": "ACT_IDLE_HURT",
      "contents": "ACT_IDLE_HURT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_HURT = 81"
    },
    {
      "trigger": "ACT_WALK_RELAXED",
      "contents": "ACT_WALK_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RELAXED = 82"
    },
    {
      "trigger": "ACT_WALK_STIMULATED",
      "contents": "ACT_WALK_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_STIMULATED = 83"
    },
    {
      "trigger": "ACT_WALK_AGITATED",
      "contents": "ACT_WALK_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AGITATED = 84"
    },
    {
      "trigger": "ACT_WALK_STEALTH",
      "contents": "ACT_WALK_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_STEALTH = 85"
    },
    {
      "trigger": "ACT_RUN_RELAXED",
      "contents": "ACT_RUN_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RELAXED = 86"
    },
    {
      "trigger": "ACT_RUN_STIMULATED",
      "contents": "ACT_RUN_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_STIMULATED = 87"
    },
    {
      "trigger": "ACT_RUN_AGITATED",
      "contents": "ACT_RUN_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AGITATED = 88"
    },
    {
      "trigger": "ACT_RUN_STEALTH",
      "contents": "ACT_RUN_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_STEALTH = 89"
    },
    {
      "trigger": "ACT_IDLE_AIM_RELAXED",
      "contents": "ACT_IDLE_AIM_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AIM_RELAXED = 90"
    },
    {
      "trigger": "ACT_IDLE_AIM_STIMULATED",
      "contents": "ACT_IDLE_AIM_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AIM_STIMULATED = 91"
    },
    {
      "trigger": "ACT_IDLE_AIM_AGITATED",
      "contents": "ACT_IDLE_AIM_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AIM_AGITATED = 92"
    },
    {
      "trigger": "ACT_IDLE_AIM_STEALTH",
      "contents": "ACT_IDLE_AIM_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AIM_STEALTH = 93"
    },
    {
      "trigger": "ACT_WALK_AIM_RELAXED",
      "contents": "ACT_WALK_AIM_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_RELAXED = 94"
    },
    {
      "trigger": "ACT_WALK_AIM_STIMULATED",
      "contents": "ACT_WALK_AIM_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_STIMULATED = 95"
    },
    {
      "trigger": "ACT_WALK_AIM_AGITATED",
      "contents": "ACT_WALK_AIM_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_AGITATED = 96"
    },
    {
      "trigger": "ACT_WALK_AIM_STEALTH",
      "contents": "ACT_WALK_AIM_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_STEALTH = 97"
    },
    {
      "trigger": "ACT_RUN_AIM_RELAXED",
      "contents": "ACT_RUN_AIM_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_RELAXED = 98"
    },
    {
      "trigger": "ACT_RUN_AIM_STIMULATED",
      "contents": "ACT_RUN_AIM_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_STIMULATED = 99"
    },
    {
      "trigger": "ACT_RUN_AIM_AGITATED",
      "contents": "ACT_RUN_AIM_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_AGITATED = 100"
    },
    {
      "trigger": "ACT_RUN_AIM_STEALTH",
      "contents": "ACT_RUN_AIM_STEALTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_STEALTH = 101"
    },
    {
      "trigger": "ACT_CROUCHIDLE_STIMULATED",
      "contents": "ACT_CROUCHIDLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHIDLE_STIMULATED = 102"
    },
    {
      "trigger": "ACT_CROUCHIDLE_AIM_STIMULATED",
      "contents": "ACT_CROUCHIDLE_AIM_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHIDLE_AIM_STIMULATED = 103"
    },
    {
      "trigger": "ACT_CROUCHIDLE_AGITATED",
      "contents": "ACT_CROUCHIDLE_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHIDLE_AGITATED = 104"
    },
    {
      "trigger": "ACT_WALK_HURT",
      "contents": "ACT_WALK_HURT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_HURT = 105"
    },
    {
      "trigger": "ACT_RUN_HURT",
      "contents": "ACT_RUN_HURT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_HURT = 106"
    },
    {
      "trigger": "ACT_SPECIAL_ATTACK1",
      "contents": "ACT_SPECIAL_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SPECIAL_ATTACK1 = 107"
    },
    {
      "trigger": "ACT_SPECIAL_ATTACK2",
      "contents": "ACT_SPECIAL_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SPECIAL_ATTACK2 = 108"
    },
    {
      "trigger": "ACT_COMBAT_IDLE",
      "contents": "ACT_COMBAT_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COMBAT_IDLE = 109"
    },
    {
      "trigger": "ACT_WALK_SCARED",
      "contents": "ACT_WALK_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_SCARED = 110"
    },
    {
      "trigger": "ACT_RUN_SCARED",
      "contents": "ACT_RUN_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_SCARED = 111"
    },
    {
      "trigger": "ACT_VICTORY_DANCE",
      "contents": "ACT_VICTORY_DANCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VICTORY_DANCE = 112"
    },
    {
      "trigger": "ACT_DIE_HEADSHOT",
      "contents": "ACT_DIE_HEADSHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_HEADSHOT = 113"
    },
    {
      "trigger": "ACT_DIE_CHESTSHOT",
      "contents": "ACT_DIE_CHESTSHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_CHESTSHOT = 114"
    },
    {
      "trigger": "ACT_DIE_GUTSHOT",
      "contents": "ACT_DIE_GUTSHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_GUTSHOT = 115"
    },
    {
      "trigger": "ACT_DIE_BACKSHOT",
      "contents": "ACT_DIE_BACKSHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_BACKSHOT = 116"
    },
    {
      "trigger": "ACT_FLINCH_HEAD",
      "contents": "ACT_FLINCH_HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_HEAD = 117"
    },
    {
      "trigger": "ACT_FLINCH_CHEST",
      "contents": "ACT_FLINCH_CHEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_CHEST = 118"
    },
    {
      "trigger": "ACT_FLINCH_STOMACH",
      "contents": "ACT_FLINCH_STOMACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_STOMACH = 119"
    },
    {
      "trigger": "ACT_FLINCH_LEFTARM",
      "contents": "ACT_FLINCH_LEFTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_LEFTARM = 120"
    },
    {
      "trigger": "ACT_FLINCH_RIGHTARM",
      "contents": "ACT_FLINCH_RIGHTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_RIGHTARM = 121"
    },
    {
      "trigger": "ACT_FLINCH_LEFTLEG",
      "contents": "ACT_FLINCH_LEFTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_LEFTLEG = 122"
    },
    {
      "trigger": "ACT_FLINCH_RIGHTLEG",
      "contents": "ACT_FLINCH_RIGHTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_RIGHTLEG = 123"
    },
    {
      "trigger": "ACT_FLINCH_PHYSICS",
      "contents": "ACT_FLINCH_PHYSICS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_PHYSICS = 124"
    },
    {
      "trigger": "ACT_IDLE_ON_FIRE",
      "contents": "ACT_IDLE_ON_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ON_FIRE = 125"
    },
    {
      "trigger": "ACT_WALK_ON_FIRE",
      "contents": "ACT_WALK_ON_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_ON_FIRE = 126"
    },
    {
      "trigger": "ACT_RUN_ON_FIRE",
      "contents": "ACT_RUN_ON_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_ON_FIRE = 127"
    },
    {
      "trigger": "ACT_RAPPEL_LOOP",
      "contents": "ACT_RAPPEL_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RAPPEL_LOOP = 128"
    },
    {
      "trigger": "ACT_180_LEFT",
      "contents": "ACT_180_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_180_LEFT = 129"
    },
    {
      "trigger": "ACT_180_RIGHT",
      "contents": "ACT_180_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_180_RIGHT = 130"
    },
    {
      "trigger": "ACT_90_LEFT",
      "contents": "ACT_90_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_90_LEFT = 131"
    },
    {
      "trigger": "ACT_90_RIGHT",
      "contents": "ACT_90_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_90_RIGHT = 132"
    },
    {
      "trigger": "ACT_STEP_LEFT",
      "contents": "ACT_STEP_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STEP_LEFT = 133"
    },
    {
      "trigger": "ACT_STEP_RIGHT",
      "contents": "ACT_STEP_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STEP_RIGHT = 134"
    },
    {
      "trigger": "ACT_STEP_BACK",
      "contents": "ACT_STEP_BACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STEP_BACK = 135"
    },
    {
      "trigger": "ACT_STEP_FORE",
      "contents": "ACT_STEP_FORE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STEP_FORE = 136"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK1",
      "contents": "ACT_GESTURE_RANGE_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK1 = 137"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK2",
      "contents": "ACT_GESTURE_RANGE_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK2 = 138"
    },
    {
      "trigger": "ACT_GESTURE_MELEE_ATTACK1",
      "contents": "ACT_GESTURE_MELEE_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_MELEE_ATTACK1 = 139"
    },
    {
      "trigger": "ACT_GESTURE_MELEE_ATTACK2",
      "contents": "ACT_GESTURE_MELEE_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_MELEE_ATTACK2 = 140"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK1_LOW",
      "contents": "ACT_GESTURE_RANGE_ATTACK1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK1_LOW = 141"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK2_LOW",
      "contents": "ACT_GESTURE_RANGE_ATTACK2_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK2_LOW = 142"
    },
    {
      "trigger": "ACT_MELEE_ATTACK_SWING_GESTURE",
      "contents": "ACT_MELEE_ATTACK_SWING_GESTURE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MELEE_ATTACK_SWING_GESTURE = 143"
    },
    {
      "trigger": "ACT_GESTURE_SMALL_FLINCH",
      "contents": "ACT_GESTURE_SMALL_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_SMALL_FLINCH = 144"
    },
    {
      "trigger": "ACT_GESTURE_BIG_FLINCH",
      "contents": "ACT_GESTURE_BIG_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_BIG_FLINCH = 145"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_BLAST",
      "contents": "ACT_GESTURE_FLINCH_BLAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_BLAST = 146"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_BLAST_SHOTGUN",
      "contents": "ACT_GESTURE_FLINCH_BLAST_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_BLAST_SHOTGUN = 147"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_BLAST_DAMAGED",
      "contents": "ACT_GESTURE_FLINCH_BLAST_DAMAGED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_BLAST_DAMAGED = 148"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN",
      "contents": "ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN = 149"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_HEAD",
      "contents": "ACT_GESTURE_FLINCH_HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_HEAD = 150"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_CHEST",
      "contents": "ACT_GESTURE_FLINCH_CHEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_CHEST = 151"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_STOMACH",
      "contents": "ACT_GESTURE_FLINCH_STOMACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_STOMACH = 152"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_LEFTARM",
      "contents": "ACT_GESTURE_FLINCH_LEFTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_LEFTARM = 153"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_RIGHTARM",
      "contents": "ACT_GESTURE_FLINCH_RIGHTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_RIGHTARM = 154"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_LEFTLEG",
      "contents": "ACT_GESTURE_FLINCH_LEFTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_LEFTLEG = 155"
    },
    {
      "trigger": "ACT_GESTURE_FLINCH_RIGHTLEG",
      "contents": "ACT_GESTURE_FLINCH_RIGHTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_FLINCH_RIGHTLEG = 156"
    },
    {
      "trigger": "ACT_GESTURE_TURN_LEFT",
      "contents": "ACT_GESTURE_TURN_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_LEFT = 157"
    },
    {
      "trigger": "ACT_GESTURE_TURN_RIGHT",
      "contents": "ACT_GESTURE_TURN_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_RIGHT = 158"
    },
    {
      "trigger": "ACT_GESTURE_TURN_LEFT45",
      "contents": "ACT_GESTURE_TURN_LEFT45",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_LEFT45 = 159"
    },
    {
      "trigger": "ACT_GESTURE_TURN_RIGHT45",
      "contents": "ACT_GESTURE_TURN_RIGHT45",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_RIGHT45 = 160"
    },
    {
      "trigger": "ACT_GESTURE_TURN_LEFT90",
      "contents": "ACT_GESTURE_TURN_LEFT90",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_LEFT90 = 161"
    },
    {
      "trigger": "ACT_GESTURE_TURN_RIGHT90",
      "contents": "ACT_GESTURE_TURN_RIGHT90",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_RIGHT90 = 162"
    },
    {
      "trigger": "ACT_GESTURE_TURN_LEFT45_FLAT",
      "contents": "ACT_GESTURE_TURN_LEFT45_FLAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_LEFT45_FLAT = 163"
    },
    {
      "trigger": "ACT_GESTURE_TURN_RIGHT45_FLAT",
      "contents": "ACT_GESTURE_TURN_RIGHT45_FLAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_RIGHT45_FLAT = 164"
    },
    {
      "trigger": "ACT_GESTURE_TURN_LEFT90_FLAT",
      "contents": "ACT_GESTURE_TURN_LEFT90_FLAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_LEFT90_FLAT = 165"
    },
    {
      "trigger": "ACT_GESTURE_TURN_RIGHT90_FLAT",
      "contents": "ACT_GESTURE_TURN_RIGHT90_FLAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_TURN_RIGHT90_FLAT = 166"
    },
    {
      "trigger": "ACT_BARNACLE_HIT",
      "contents": "ACT_BARNACLE_HIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BARNACLE_HIT = 167"
    },
    {
      "trigger": "ACT_BARNACLE_PULL",
      "contents": "ACT_BARNACLE_PULL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BARNACLE_PULL = 168"
    },
    {
      "trigger": "ACT_BARNACLE_CHOMP",
      "contents": "ACT_BARNACLE_CHOMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BARNACLE_CHOMP = 169"
    },
    {
      "trigger": "ACT_BARNACLE_CHEW",
      "contents": "ACT_BARNACLE_CHEW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BARNACLE_CHEW = 170"
    },
    {
      "trigger": "ACT_DO_NOT_DISTURB",
      "contents": "ACT_DO_NOT_DISTURB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DO_NOT_DISTURB = 171"
    },
    {
      "trigger": "ACT_VM_DRAW",
      "contents": "ACT_VM_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAW = 172"
    },
    {
      "trigger": "ACT_VM_HOLSTER",
      "contents": "ACT_VM_HOLSTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HOLSTER = 173"
    },
    {
      "trigger": "ACT_VM_IDLE",
      "contents": "ACT_VM_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE = 174"
    },
    {
      "trigger": "ACT_VM_FIDGET",
      "contents": "ACT_VM_FIDGET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_FIDGET = 175"
    },
    {
      "trigger": "ACT_VM_PULLBACK",
      "contents": "ACT_VM_PULLBACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PULLBACK = 176"
    },
    {
      "trigger": "ACT_VM_PULLBACK_HIGH",
      "contents": "ACT_VM_PULLBACK_HIGH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PULLBACK_HIGH = 177"
    },
    {
      "trigger": "ACT_VM_PULLBACK_LOW",
      "contents": "ACT_VM_PULLBACK_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PULLBACK_LOW = 178"
    },
    {
      "trigger": "ACT_VM_THROW",
      "contents": "ACT_VM_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_THROW = 179"
    },
    {
      "trigger": "ACT_VM_PULLPIN",
      "contents": "ACT_VM_PULLPIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PULLPIN = 180"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK",
      "contents": "ACT_VM_PRIMARYATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK = 181"
    },
    {
      "trigger": "ACT_VM_SECONDARYATTACK",
      "contents": "ACT_VM_SECONDARYATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SECONDARYATTACK = 182"
    },
    {
      "trigger": "ACT_VM_RELOAD",
      "contents": "ACT_VM_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD = 183"
    },
    {
      "trigger": "ACT_VM_DRYFIRE",
      "contents": "ACT_VM_DRYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRYFIRE = 186"
    },
    {
      "trigger": "ACT_VM_HITLEFT",
      "contents": "ACT_VM_HITLEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITLEFT = 187"
    },
    {
      "trigger": "ACT_VM_HITLEFT2",
      "contents": "ACT_VM_HITLEFT2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITLEFT2 = 188"
    },
    {
      "trigger": "ACT_VM_HITRIGHT",
      "contents": "ACT_VM_HITRIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITRIGHT = 189"
    },
    {
      "trigger": "ACT_VM_HITRIGHT2",
      "contents": "ACT_VM_HITRIGHT2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITRIGHT2 = 190"
    },
    {
      "trigger": "ACT_VM_HITCENTER",
      "contents": "ACT_VM_HITCENTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITCENTER = 191"
    },
    {
      "trigger": "ACT_VM_HITCENTER2",
      "contents": "ACT_VM_HITCENTER2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITCENTER2 = 192"
    },
    {
      "trigger": "ACT_VM_MISSLEFT",
      "contents": "ACT_VM_MISSLEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSLEFT = 193"
    },
    {
      "trigger": "ACT_VM_MISSLEFT2",
      "contents": "ACT_VM_MISSLEFT2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSLEFT2 = 194"
    },
    {
      "trigger": "ACT_VM_MISSRIGHT",
      "contents": "ACT_VM_MISSRIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSRIGHT = 195"
    },
    {
      "trigger": "ACT_VM_MISSRIGHT2",
      "contents": "ACT_VM_MISSRIGHT2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSRIGHT2 = 196"
    },
    {
      "trigger": "ACT_VM_MISSCENTER",
      "contents": "ACT_VM_MISSCENTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSCENTER = 197"
    },
    {
      "trigger": "ACT_VM_MISSCENTER2",
      "contents": "ACT_VM_MISSCENTER2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_MISSCENTER2 = 198"
    },
    {
      "trigger": "ACT_VM_HAULBACK",
      "contents": "ACT_VM_HAULBACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HAULBACK = 199"
    },
    {
      "trigger": "ACT_VM_SWINGHARD",
      "contents": "ACT_VM_SWINGHARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SWINGHARD = 200"
    },
    {
      "trigger": "ACT_VM_SWINGMISS",
      "contents": "ACT_VM_SWINGMISS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SWINGMISS = 201"
    },
    {
      "trigger": "ACT_VM_SWINGHIT",
      "contents": "ACT_VM_SWINGHIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SWINGHIT = 202"
    },
    {
      "trigger": "ACT_VM_IDLE_TO_LOWERED",
      "contents": "ACT_VM_IDLE_TO_LOWERED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_TO_LOWERED = 203"
    },
    {
      "trigger": "ACT_VM_IDLE_LOWERED",
      "contents": "ACT_VM_IDLE_LOWERED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_LOWERED = 204"
    },
    {
      "trigger": "ACT_VM_LOWERED_TO_IDLE",
      "contents": "ACT_VM_LOWERED_TO_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_LOWERED_TO_IDLE = 205"
    },
    {
      "trigger": "ACT_VM_RECOIL1",
      "contents": "ACT_VM_RECOIL1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RECOIL1 = 206"
    },
    {
      "trigger": "ACT_VM_RECOIL2",
      "contents": "ACT_VM_RECOIL2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RECOIL2 = 207"
    },
    {
      "trigger": "ACT_VM_RECOIL3",
      "contents": "ACT_VM_RECOIL3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RECOIL3 = 208"
    },
    {
      "trigger": "ACT_VM_PICKUP",
      "contents": "ACT_VM_PICKUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PICKUP = 209"
    },
    {
      "trigger": "ACT_VM_RELEASE",
      "contents": "ACT_VM_RELEASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELEASE = 210"
    },
    {
      "trigger": "ACT_VM_ATTACH_SILENCER",
      "contents": "ACT_VM_ATTACH_SILENCER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_ATTACH_SILENCER = 211"
    },
    {
      "trigger": "ACT_VM_DETACH_SILENCER",
      "contents": "ACT_VM_DETACH_SILENCER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DETACH_SILENCER = 212"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_IDLE",
      "contents": "ACT_SLAM_STICKWALL_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_IDLE = 229"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ND_IDLE",
      "contents": "ACT_SLAM_STICKWALL_ND_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ND_IDLE = 230"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ATTACH",
      "contents": "ACT_SLAM_STICKWALL_ATTACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ATTACH = 231"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ATTACH2",
      "contents": "ACT_SLAM_STICKWALL_ATTACH2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ATTACH2 = 232"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ND_ATTACH",
      "contents": "ACT_SLAM_STICKWALL_ND_ATTACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ND_ATTACH = 233"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ND_ATTACH2",
      "contents": "ACT_SLAM_STICKWALL_ND_ATTACH2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ND_ATTACH2 = 234"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_DETONATE",
      "contents": "ACT_SLAM_STICKWALL_DETONATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_DETONATE = 235"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_DETONATOR_HOLSTER",
      "contents": "ACT_SLAM_STICKWALL_DETONATOR_HOLSTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_DETONATOR_HOLSTER = 236"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_DRAW",
      "contents": "ACT_SLAM_STICKWALL_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_DRAW = 237"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_ND_DRAW",
      "contents": "ACT_SLAM_STICKWALL_ND_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_ND_DRAW = 238"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_TO_THROW",
      "contents": "ACT_SLAM_STICKWALL_TO_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_TO_THROW = 239"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_TO_THROW_ND",
      "contents": "ACT_SLAM_STICKWALL_TO_THROW_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_TO_THROW_ND = 240"
    },
    {
      "trigger": "ACT_SLAM_STICKWALL_TO_TRIPMINE_ND",
      "contents": "ACT_SLAM_STICKWALL_TO_TRIPMINE_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_STICKWALL_TO_TRIPMINE_ND = 241"
    },
    {
      "trigger": "ACT_SLAM_THROW_IDLE",
      "contents": "ACT_SLAM_THROW_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_IDLE = 242"
    },
    {
      "trigger": "ACT_SLAM_THROW_ND_IDLE",
      "contents": "ACT_SLAM_THROW_ND_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_ND_IDLE = 243"
    },
    {
      "trigger": "ACT_SLAM_THROW_THROW",
      "contents": "ACT_SLAM_THROW_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_THROW = 244"
    },
    {
      "trigger": "ACT_SLAM_THROW_THROW2",
      "contents": "ACT_SLAM_THROW_THROW2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_THROW2 = 245"
    },
    {
      "trigger": "ACT_SLAM_THROW_THROW_ND",
      "contents": "ACT_SLAM_THROW_THROW_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_THROW_ND = 246"
    },
    {
      "trigger": "ACT_SLAM_THROW_THROW_ND2",
      "contents": "ACT_SLAM_THROW_THROW_ND2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_THROW_ND2 = 247"
    },
    {
      "trigger": "ACT_SLAM_THROW_DRAW",
      "contents": "ACT_SLAM_THROW_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_DRAW = 248"
    },
    {
      "trigger": "ACT_SLAM_THROW_ND_DRAW",
      "contents": "ACT_SLAM_THROW_ND_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_ND_DRAW = 249"
    },
    {
      "trigger": "ACT_SLAM_THROW_TO_STICKWALL",
      "contents": "ACT_SLAM_THROW_TO_STICKWALL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_TO_STICKWALL = 250"
    },
    {
      "trigger": "ACT_SLAM_THROW_TO_STICKWALL_ND",
      "contents": "ACT_SLAM_THROW_TO_STICKWALL_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_TO_STICKWALL_ND = 251"
    },
    {
      "trigger": "ACT_SLAM_THROW_DETONATE",
      "contents": "ACT_SLAM_THROW_DETONATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_DETONATE = 252"
    },
    {
      "trigger": "ACT_SLAM_THROW_DETONATOR_HOLSTER",
      "contents": "ACT_SLAM_THROW_DETONATOR_HOLSTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_DETONATOR_HOLSTER = 253"
    },
    {
      "trigger": "ACT_SLAM_THROW_TO_TRIPMINE_ND",
      "contents": "ACT_SLAM_THROW_TO_TRIPMINE_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_THROW_TO_TRIPMINE_ND = 254"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_IDLE",
      "contents": "ACT_SLAM_TRIPMINE_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_IDLE = 255"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_DRAW",
      "contents": "ACT_SLAM_TRIPMINE_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_DRAW = 256"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_ATTACH",
      "contents": "ACT_SLAM_TRIPMINE_ATTACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_ATTACH = 257"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_ATTACH2",
      "contents": "ACT_SLAM_TRIPMINE_ATTACH2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_ATTACH2 = 258"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_TO_STICKWALL_ND",
      "contents": "ACT_SLAM_TRIPMINE_TO_STICKWALL_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_TO_STICKWALL_ND = 259"
    },
    {
      "trigger": "ACT_SLAM_TRIPMINE_TO_THROW_ND",
      "contents": "ACT_SLAM_TRIPMINE_TO_THROW_ND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_TRIPMINE_TO_THROW_ND = 260"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_IDLE",
      "contents": "ACT_SLAM_DETONATOR_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_IDLE = 261"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_DRAW",
      "contents": "ACT_SLAM_DETONATOR_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_DRAW = 262"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_DETONATE",
      "contents": "ACT_SLAM_DETONATOR_DETONATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_DETONATE = 263"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_HOLSTER",
      "contents": "ACT_SLAM_DETONATOR_HOLSTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_HOLSTER = 264"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_STICKWALL_DRAW",
      "contents": "ACT_SLAM_DETONATOR_STICKWALL_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_STICKWALL_DRAW = 265"
    },
    {
      "trigger": "ACT_SLAM_DETONATOR_THROW_DRAW",
      "contents": "ACT_SLAM_DETONATOR_THROW_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SLAM_DETONATOR_THROW_DRAW = 266"
    },
    {
      "trigger": "ACT_SHOTGUN_RELOAD_START",
      "contents": "ACT_SHOTGUN_RELOAD_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHOTGUN_RELOAD_START = 267"
    },
    {
      "trigger": "ACT_SHOTGUN_RELOAD_FINISH",
      "contents": "ACT_SHOTGUN_RELOAD_FINISH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHOTGUN_RELOAD_FINISH = 268"
    },
    {
      "trigger": "ACT_SHOTGUN_PUMP",
      "contents": "ACT_SHOTGUN_PUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHOTGUN_PUMP = 269"
    },
    {
      "trigger": "ACT_SMG2_IDLE2",
      "contents": "ACT_SMG2_IDLE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_IDLE2 = 270"
    },
    {
      "trigger": "ACT_SMG2_FIRE2",
      "contents": "ACT_SMG2_FIRE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_FIRE2 = 271"
    },
    {
      "trigger": "ACT_SMG2_DRAW2",
      "contents": "ACT_SMG2_DRAW2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_DRAW2 = 272"
    },
    {
      "trigger": "ACT_SMG2_RELOAD2",
      "contents": "ACT_SMG2_RELOAD2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_RELOAD2 = 273"
    },
    {
      "trigger": "ACT_SMG2_DRYFIRE2",
      "contents": "ACT_SMG2_DRYFIRE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_DRYFIRE2 = 274"
    },
    {
      "trigger": "ACT_SMG2_TOAUTO",
      "contents": "ACT_SMG2_TOAUTO",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_TOAUTO = 275"
    },
    {
      "trigger": "ACT_SMG2_TOBURST",
      "contents": "ACT_SMG2_TOBURST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SMG2_TOBURST = 276"
    },
    {
      "trigger": "ACT_PHYSCANNON_UPGRADE",
      "contents": "ACT_PHYSCANNON_UPGRADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PHYSCANNON_UPGRADE = 277"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_AR1",
      "contents": "ACT_RANGE_ATTACK_AR1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_AR1 = 278"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_AR2",
      "contents": "ACT_RANGE_ATTACK_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_AR2 = 279"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_AR2_LOW",
      "contents": "ACT_RANGE_ATTACK_AR2_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_AR2_LOW = 280"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_AR2_GRENADE",
      "contents": "ACT_RANGE_ATTACK_AR2_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_AR2_GRENADE = 281"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_HMG1",
      "contents": "ACT_RANGE_ATTACK_HMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_HMG1 = 282"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_ML",
      "contents": "ACT_RANGE_ATTACK_ML",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_ML = 283"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SMG1",
      "contents": "ACT_RANGE_ATTACK_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SMG1 = 284"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SMG1_LOW",
      "contents": "ACT_RANGE_ATTACK_SMG1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SMG1_LOW = 285"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SMG2",
      "contents": "ACT_RANGE_ATTACK_SMG2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SMG2 = 286"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SHOTGUN",
      "contents": "ACT_RANGE_ATTACK_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SHOTGUN = 287"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SHOTGUN_LOW",
      "contents": "ACT_RANGE_ATTACK_SHOTGUN_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SHOTGUN_LOW = 288"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_PISTOL",
      "contents": "ACT_RANGE_ATTACK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_PISTOL = 289"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_PISTOL_LOW",
      "contents": "ACT_RANGE_ATTACK_PISTOL_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_PISTOL_LOW = 290"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SLAM",
      "contents": "ACT_RANGE_ATTACK_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SLAM = 291"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_TRIPWIRE",
      "contents": "ACT_RANGE_ATTACK_TRIPWIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_TRIPWIRE = 292"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_THROW",
      "contents": "ACT_RANGE_ATTACK_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_THROW = 293"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_SNIPER_RIFLE",
      "contents": "ACT_RANGE_ATTACK_SNIPER_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_SNIPER_RIFLE = 294"
    },
    {
      "trigger": "ACT_RANGE_ATTACK_RPG",
      "contents": "ACT_RANGE_ATTACK_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_ATTACK_RPG = 295"
    },
    {
      "trigger": "ACT_MELEE_ATTACK_SWING",
      "contents": "ACT_MELEE_ATTACK_SWING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MELEE_ATTACK_SWING = 296"
    },
    {
      "trigger": "ACT_RANGE_AIM_LOW",
      "contents": "ACT_RANGE_AIM_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_AIM_LOW = 297"
    },
    {
      "trigger": "ACT_RANGE_AIM_SMG1_LOW",
      "contents": "ACT_RANGE_AIM_SMG1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_AIM_SMG1_LOW = 298"
    },
    {
      "trigger": "ACT_RANGE_AIM_PISTOL_LOW",
      "contents": "ACT_RANGE_AIM_PISTOL_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_AIM_PISTOL_LOW = 299"
    },
    {
      "trigger": "ACT_RANGE_AIM_AR2_LOW",
      "contents": "ACT_RANGE_AIM_AR2_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RANGE_AIM_AR2_LOW = 300"
    },
    {
      "trigger": "ACT_COVER_PISTOL_LOW",
      "contents": "ACT_COVER_PISTOL_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER_PISTOL_LOW = 301"
    },
    {
      "trigger": "ACT_COVER_SMG1_LOW",
      "contents": "ACT_COVER_SMG1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER_SMG1_LOW = 302"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_AR1",
      "contents": "ACT_GESTURE_RANGE_ATTACK_AR1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_AR1 = 303"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_AR2",
      "contents": "ACT_GESTURE_RANGE_ATTACK_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_AR2 = 304"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE",
      "contents": "ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE = 305"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_HMG1",
      "contents": "ACT_GESTURE_RANGE_ATTACK_HMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_HMG1 = 306"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_ML",
      "contents": "ACT_GESTURE_RANGE_ATTACK_ML",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_ML = 307"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SMG1",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SMG1 = 308"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SMG1_LOW",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SMG1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SMG1_LOW = 309"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SMG2",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SMG2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SMG2 = 310"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SHOTGUN",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SHOTGUN = 311"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_PISTOL",
      "contents": "ACT_GESTURE_RANGE_ATTACK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_PISTOL = 312"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW",
      "contents": "ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW = 313"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SLAM",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SLAM = 314"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_TRIPWIRE",
      "contents": "ACT_GESTURE_RANGE_ATTACK_TRIPWIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_TRIPWIRE = 315"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_THROW",
      "contents": "ACT_GESTURE_RANGE_ATTACK_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_THROW = 316"
    },
    {
      "trigger": "ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE",
      "contents": "ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE = 317"
    },
    {
      "trigger": "ACT_GESTURE_MELEE_ATTACK_SWING",
      "contents": "ACT_GESTURE_MELEE_ATTACK_SWING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_MELEE_ATTACK_SWING = 318"
    },
    {
      "trigger": "ACT_IDLE_RIFLE",
      "contents": "ACT_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_RIFLE = 319"
    },
    {
      "trigger": "ACT_IDLE_SMG1",
      "contents": "ACT_IDLE_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SMG1 = 320"
    },
    {
      "trigger": "ACT_IDLE_ANGRY_SMG1",
      "contents": "ACT_IDLE_ANGRY_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY_SMG1 = 321"
    },
    {
      "trigger": "ACT_IDLE_PISTOL",
      "contents": "ACT_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_PISTOL = 322"
    },
    {
      "trigger": "ACT_IDLE_ANGRY_PISTOL",
      "contents": "ACT_IDLE_ANGRY_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY_PISTOL = 323"
    },
    {
      "trigger": "ACT_IDLE_ANGRY_SHOTGUN",
      "contents": "ACT_IDLE_ANGRY_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY_SHOTGUN = 324"
    },
    {
      "trigger": "ACT_IDLE_STEALTH_PISTOL",
      "contents": "ACT_IDLE_STEALTH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_STEALTH_PISTOL = 325"
    },
    {
      "trigger": "ACT_IDLE_PACKAGE",
      "contents": "ACT_IDLE_PACKAGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_PACKAGE = 326"
    },
    {
      "trigger": "ACT_WALK_PACKAGE",
      "contents": "ACT_WALK_PACKAGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_PACKAGE = 327"
    },
    {
      "trigger": "ACT_IDLE_SUITCASE",
      "contents": "ACT_IDLE_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SUITCASE = 328"
    },
    {
      "trigger": "ACT_WALK_SUITCASE",
      "contents": "ACT_WALK_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_SUITCASE = 329"
    },
    {
      "trigger": "ACT_IDLE_SMG1_RELAXED",
      "contents": "ACT_IDLE_SMG1_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SMG1_RELAXED = 330"
    },
    {
      "trigger": "ACT_IDLE_SMG1_STIMULATED",
      "contents": "ACT_IDLE_SMG1_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SMG1_STIMULATED = 331"
    },
    {
      "trigger": "ACT_WALK_RIFLE_RELAXED",
      "contents": "ACT_WALK_RIFLE_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RIFLE_RELAXED = 332"
    },
    {
      "trigger": "ACT_RUN_RIFLE_RELAXED",
      "contents": "ACT_RUN_RIFLE_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RIFLE_RELAXED = 333"
    },
    {
      "trigger": "ACT_WALK_RIFLE_STIMULATED",
      "contents": "ACT_WALK_RIFLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RIFLE_STIMULATED = 334"
    },
    {
      "trigger": "ACT_RUN_RIFLE_STIMULATED",
      "contents": "ACT_RUN_RIFLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RIFLE_STIMULATED = 335"
    },
    {
      "trigger": "ACT_IDLE_AIM_RIFLE_STIMULATED",
      "contents": "ACT_IDLE_AIM_RIFLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_AIM_RIFLE_STIMULATED = 336"
    },
    {
      "trigger": "ACT_WALK_AIM_RIFLE_STIMULATED",
      "contents": "ACT_WALK_AIM_RIFLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_RIFLE_STIMULATED = 337"
    },
    {
      "trigger": "ACT_RUN_AIM_RIFLE_STIMULATED",
      "contents": "ACT_RUN_AIM_RIFLE_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_RIFLE_STIMULATED = 338"
    },
    {
      "trigger": "ACT_IDLE_SHOTGUN_RELAXED",
      "contents": "ACT_IDLE_SHOTGUN_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SHOTGUN_RELAXED = 339"
    },
    {
      "trigger": "ACT_IDLE_SHOTGUN_STIMULATED",
      "contents": "ACT_IDLE_SHOTGUN_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SHOTGUN_STIMULATED = 340"
    },
    {
      "trigger": "ACT_IDLE_SHOTGUN_AGITATED",
      "contents": "ACT_IDLE_SHOTGUN_AGITATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_SHOTGUN_AGITATED = 341"
    },
    {
      "trigger": "ACT_WALK_ANGRY",
      "contents": "ACT_WALK_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_ANGRY = 342"
    },
    {
      "trigger": "ACT_POLICE_HARASS1",
      "contents": "ACT_POLICE_HARASS1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_POLICE_HARASS1 = 343"
    },
    {
      "trigger": "ACT_POLICE_HARASS2",
      "contents": "ACT_POLICE_HARASS2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_POLICE_HARASS2 = 344"
    },
    {
      "trigger": "ACT_IDLE_MANNEDGUN",
      "contents": "ACT_IDLE_MANNEDGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_MANNEDGUN = 345"
    },
    {
      "trigger": "ACT_IDLE_MELEE",
      "contents": "ACT_IDLE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_MELEE = 346"
    },
    {
      "trigger": "ACT_IDLE_ANGRY_MELEE",
      "contents": "ACT_IDLE_ANGRY_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY_MELEE = 347"
    },
    {
      "trigger": "ACT_IDLE_RPG_RELAXED",
      "contents": "ACT_IDLE_RPG_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_RPG_RELAXED = 348"
    },
    {
      "trigger": "ACT_IDLE_RPG",
      "contents": "ACT_IDLE_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_RPG = 349"
    },
    {
      "trigger": "ACT_IDLE_ANGRY_RPG",
      "contents": "ACT_IDLE_ANGRY_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_ANGRY_RPG = 350"
    },
    {
      "trigger": "ACT_COVER_LOW_RPG",
      "contents": "ACT_COVER_LOW_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_COVER_LOW_RPG = 351"
    },
    {
      "trigger": "ACT_WALK_RPG",
      "contents": "ACT_WALK_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RPG = 352"
    },
    {
      "trigger": "ACT_RUN_RPG",
      "contents": "ACT_RUN_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RPG = 353"
    },
    {
      "trigger": "ACT_WALK_CROUCH_RPG",
      "contents": "ACT_WALK_CROUCH_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CROUCH_RPG = 354"
    },
    {
      "trigger": "ACT_RUN_CROUCH_RPG",
      "contents": "ACT_RUN_CROUCH_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_CROUCH_RPG = 355"
    },
    {
      "trigger": "ACT_WALK_RPG_RELAXED",
      "contents": "ACT_WALK_RPG_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RPG_RELAXED = 356"
    },
    {
      "trigger": "ACT_RUN_RPG_RELAXED",
      "contents": "ACT_RUN_RPG_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RPG_RELAXED = 357"
    },
    {
      "trigger": "ACT_WALK_RIFLE",
      "contents": "ACT_WALK_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_RIFLE = 358"
    },
    {
      "trigger": "ACT_WALK_AIM_RIFLE",
      "contents": "ACT_WALK_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_RIFLE = 359"
    },
    {
      "trigger": "ACT_WALK_CROUCH_RIFLE",
      "contents": "ACT_WALK_CROUCH_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CROUCH_RIFLE = 360"
    },
    {
      "trigger": "ACT_WALK_CROUCH_AIM_RIFLE",
      "contents": "ACT_WALK_CROUCH_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CROUCH_AIM_RIFLE = 361"
    },
    {
      "trigger": "ACT_RUN_RIFLE",
      "contents": "ACT_RUN_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_RIFLE = 362"
    },
    {
      "trigger": "ACT_RUN_AIM_RIFLE",
      "contents": "ACT_RUN_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_RIFLE = 363"
    },
    {
      "trigger": "ACT_RUN_CROUCH_RIFLE",
      "contents": "ACT_RUN_CROUCH_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_CROUCH_RIFLE = 364"
    },
    {
      "trigger": "ACT_RUN_CROUCH_AIM_RIFLE",
      "contents": "ACT_RUN_CROUCH_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_CROUCH_AIM_RIFLE = 365"
    },
    {
      "trigger": "ACT_RUN_STEALTH_PISTOL",
      "contents": "ACT_RUN_STEALTH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_STEALTH_PISTOL = 366"
    },
    {
      "trigger": "ACT_WALK_AIM_SHOTGUN",
      "contents": "ACT_WALK_AIM_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_SHOTGUN = 367"
    },
    {
      "trigger": "ACT_RUN_AIM_SHOTGUN",
      "contents": "ACT_RUN_AIM_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_SHOTGUN = 368"
    },
    {
      "trigger": "ACT_WALK_PISTOL",
      "contents": "ACT_WALK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_PISTOL = 369"
    },
    {
      "trigger": "ACT_RUN_PISTOL",
      "contents": "ACT_RUN_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_PISTOL = 370"
    },
    {
      "trigger": "ACT_WALK_AIM_PISTOL",
      "contents": "ACT_WALK_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_PISTOL = 371"
    },
    {
      "trigger": "ACT_RUN_AIM_PISTOL",
      "contents": "ACT_RUN_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_PISTOL = 372"
    },
    {
      "trigger": "ACT_WALK_STEALTH_PISTOL",
      "contents": "ACT_WALK_STEALTH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_STEALTH_PISTOL = 373"
    },
    {
      "trigger": "ACT_WALK_AIM_STEALTH_PISTOL",
      "contents": "ACT_WALK_AIM_STEALTH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_AIM_STEALTH_PISTOL = 374"
    },
    {
      "trigger": "ACT_RUN_AIM_STEALTH_PISTOL",
      "contents": "ACT_RUN_AIM_STEALTH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUN_AIM_STEALTH_PISTOL = 375"
    },
    {
      "trigger": "ACT_RELOAD_PISTOL",
      "contents": "ACT_RELOAD_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_PISTOL = 376"
    },
    {
      "trigger": "ACT_RELOAD_PISTOL_LOW",
      "contents": "ACT_RELOAD_PISTOL_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_PISTOL_LOW = 377"
    },
    {
      "trigger": "ACT_RELOAD_SMG1",
      "contents": "ACT_RELOAD_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_SMG1 = 378"
    },
    {
      "trigger": "ACT_RELOAD_SMG1_LOW",
      "contents": "ACT_RELOAD_SMG1_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_SMG1_LOW = 379"
    },
    {
      "trigger": "ACT_RELOAD_SHOTGUN",
      "contents": "ACT_RELOAD_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_SHOTGUN = 380"
    },
    {
      "trigger": "ACT_RELOAD_SHOTGUN_LOW",
      "contents": "ACT_RELOAD_SHOTGUN_LOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RELOAD_SHOTGUN_LOW = 381"
    },
    {
      "trigger": "ACT_GESTURE_RELOAD",
      "contents": "ACT_GESTURE_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RELOAD = 382"
    },
    {
      "trigger": "ACT_GESTURE_RELOAD_PISTOL",
      "contents": "ACT_GESTURE_RELOAD_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RELOAD_PISTOL = 383"
    },
    {
      "trigger": "ACT_GESTURE_RELOAD_SMG1",
      "contents": "ACT_GESTURE_RELOAD_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RELOAD_SMG1 = 384"
    },
    {
      "trigger": "ACT_GESTURE_RELOAD_SHOTGUN",
      "contents": "ACT_GESTURE_RELOAD_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_RELOAD_SHOTGUN = 385"
    },
    {
      "trigger": "ACT_BUSY_LEAN_LEFT",
      "contents": "ACT_BUSY_LEAN_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_LEFT = 386"
    },
    {
      "trigger": "ACT_BUSY_LEAN_LEFT_ENTRY",
      "contents": "ACT_BUSY_LEAN_LEFT_ENTRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_LEFT_ENTRY = 387"
    },
    {
      "trigger": "ACT_BUSY_LEAN_LEFT_EXIT",
      "contents": "ACT_BUSY_LEAN_LEFT_EXIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_LEFT_EXIT = 388"
    },
    {
      "trigger": "ACT_BUSY_LEAN_BACK",
      "contents": "ACT_BUSY_LEAN_BACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_BACK = 389"
    },
    {
      "trigger": "ACT_BUSY_LEAN_BACK_ENTRY",
      "contents": "ACT_BUSY_LEAN_BACK_ENTRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_BACK_ENTRY = 390"
    },
    {
      "trigger": "ACT_BUSY_LEAN_BACK_EXIT",
      "contents": "ACT_BUSY_LEAN_BACK_EXIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_LEAN_BACK_EXIT = 391"
    },
    {
      "trigger": "ACT_BUSY_SIT_GROUND",
      "contents": "ACT_BUSY_SIT_GROUND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_GROUND = 392"
    },
    {
      "trigger": "ACT_BUSY_SIT_GROUND_ENTRY",
      "contents": "ACT_BUSY_SIT_GROUND_ENTRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_GROUND_ENTRY = 393"
    },
    {
      "trigger": "ACT_BUSY_SIT_GROUND_EXIT",
      "contents": "ACT_BUSY_SIT_GROUND_EXIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_GROUND_EXIT = 394"
    },
    {
      "trigger": "ACT_BUSY_SIT_CHAIR",
      "contents": "ACT_BUSY_SIT_CHAIR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_CHAIR = 395"
    },
    {
      "trigger": "ACT_BUSY_SIT_CHAIR_ENTRY",
      "contents": "ACT_BUSY_SIT_CHAIR_ENTRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_CHAIR_ENTRY = 396"
    },
    {
      "trigger": "ACT_BUSY_SIT_CHAIR_EXIT",
      "contents": "ACT_BUSY_SIT_CHAIR_EXIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_SIT_CHAIR_EXIT = 397"
    },
    {
      "trigger": "ACT_BUSY_STAND",
      "contents": "ACT_BUSY_STAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_STAND = 398"
    },
    {
      "trigger": "ACT_BUSY_QUEUE",
      "contents": "ACT_BUSY_QUEUE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_BUSY_QUEUE = 399"
    },
    {
      "trigger": "ACT_DUCK_DODGE",
      "contents": "ACT_DUCK_DODGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DUCK_DODGE = 400"
    },
    {
      "trigger": "ACT_DIE_BARNACLE_SWALLOW",
      "contents": "ACT_DIE_BARNACLE_SWALLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_BARNACLE_SWALLOW = 401"
    },
    {
      "trigger": "ACT_GESTURE_BARNACLE_STRANGLE",
      "contents": "ACT_GESTURE_BARNACLE_STRANGLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GESTURE_BARNACLE_STRANGLE = 402"
    },
    {
      "trigger": "ACT_PHYSCANNON_DETACH",
      "contents": "ACT_PHYSCANNON_DETACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PHYSCANNON_DETACH = 403"
    },
    {
      "trigger": "ACT_PHYSCANNON_ANIMATE",
      "contents": "ACT_PHYSCANNON_ANIMATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PHYSCANNON_ANIMATE = 404"
    },
    {
      "trigger": "ACT_PHYSCANNON_ANIMATE_PRE",
      "contents": "ACT_PHYSCANNON_ANIMATE_PRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PHYSCANNON_ANIMATE_PRE = 405"
    },
    {
      "trigger": "ACT_PHYSCANNON_ANIMATE_POST",
      "contents": "ACT_PHYSCANNON_ANIMATE_POST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PHYSCANNON_ANIMATE_POST = 406"
    },
    {
      "trigger": "ACT_DIE_FRONTSIDE",
      "contents": "ACT_DIE_FRONTSIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_FRONTSIDE = 407"
    },
    {
      "trigger": "ACT_DIE_RIGHTSIDE",
      "contents": "ACT_DIE_RIGHTSIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_RIGHTSIDE = 408"
    },
    {
      "trigger": "ACT_DIE_BACKSIDE",
      "contents": "ACT_DIE_BACKSIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_BACKSIDE = 409"
    },
    {
      "trigger": "ACT_DIE_LEFTSIDE",
      "contents": "ACT_DIE_LEFTSIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DIE_LEFTSIDE = 410"
    },
    {
      "trigger": "ACT_OPEN_DOOR",
      "contents": "ACT_OPEN_DOOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OPEN_DOOR = 411"
    },
    {
      "trigger": "ACT_DI_ALYX_ZOMBIE_MELEE",
      "contents": "ACT_DI_ALYX_ZOMBIE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_ZOMBIE_MELEE = 412"
    },
    {
      "trigger": "ACT_DI_ALYX_ZOMBIE_TORSO_MELEE",
      "contents": "ACT_DI_ALYX_ZOMBIE_TORSO_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_ZOMBIE_TORSO_MELEE = 413"
    },
    {
      "trigger": "ACT_DI_ALYX_HEADCRAB_MELEE",
      "contents": "ACT_DI_ALYX_HEADCRAB_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_HEADCRAB_MELEE = 414"
    },
    {
      "trigger": "ACT_DI_ALYX_ANTLION",
      "contents": "ACT_DI_ALYX_ANTLION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_ANTLION = 415"
    },
    {
      "trigger": "ACT_DI_ALYX_ZOMBIE_SHOTGUN64",
      "contents": "ACT_DI_ALYX_ZOMBIE_SHOTGUN64",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_ZOMBIE_SHOTGUN64 = 416"
    },
    {
      "trigger": "ACT_DI_ALYX_ZOMBIE_SHOTGUN26",
      "contents": "ACT_DI_ALYX_ZOMBIE_SHOTGUN26",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DI_ALYX_ZOMBIE_SHOTGUN26 = 417"
    },
    {
      "trigger": "ACT_READINESS_RELAXED_TO_STIMULATED",
      "contents": "ACT_READINESS_RELAXED_TO_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_RELAXED_TO_STIMULATED = 418"
    },
    {
      "trigger": "ACT_READINESS_RELAXED_TO_STIMULATED_WALK",
      "contents": "ACT_READINESS_RELAXED_TO_STIMULATED_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_RELAXED_TO_STIMULATED_WALK = 419"
    },
    {
      "trigger": "ACT_READINESS_AGITATED_TO_STIMULATED",
      "contents": "ACT_READINESS_AGITATED_TO_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_AGITATED_TO_STIMULATED = 420"
    },
    {
      "trigger": "ACT_READINESS_STIMULATED_TO_RELAXED",
      "contents": "ACT_READINESS_STIMULATED_TO_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_STIMULATED_TO_RELAXED = 421"
    },
    {
      "trigger": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED",
      "contents": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED = 422"
    },
    {
      "trigger": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK",
      "contents": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK = 423"
    },
    {
      "trigger": "ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED",
      "contents": "ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED = 424"
    },
    {
      "trigger": "ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED",
      "contents": "ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED = 425"
    },
    {
      "trigger": "ACT_IDLE_CARRY",
      "contents": "ACT_IDLE_CARRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLE_CARRY = 426"
    },
    {
      "trigger": "ACT_WALK_CARRY",
      "contents": "ACT_WALK_CARRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_WALK_CARRY = 427"
    },
    {
      "trigger": "ACT_STARTDYING",
      "contents": "ACT_STARTDYING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_STARTDYING = 428"
    },
    {
      "trigger": "ACT_DYINGLOOP",
      "contents": "ACT_DYINGLOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DYINGLOOP = 429"
    },
    {
      "trigger": "ACT_DYINGTODEAD",
      "contents": "ACT_DYINGTODEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DYINGTODEAD = 430"
    },
    {
      "trigger": "ACT_RIDE_MANNED_GUN",
      "contents": "ACT_RIDE_MANNED_GUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RIDE_MANNED_GUN = 431"
    },
    {
      "trigger": "ACT_VM_SPRINT_ENTER",
      "contents": "ACT_VM_SPRINT_ENTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SPRINT_ENTER = 432"
    },
    {
      "trigger": "ACT_VM_SPRINT_IDLE",
      "contents": "ACT_VM_SPRINT_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SPRINT_IDLE = 433"
    },
    {
      "trigger": "ACT_VM_SPRINT_LEAVE",
      "contents": "ACT_VM_SPRINT_LEAVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SPRINT_LEAVE = 434"
    },
    {
      "trigger": "ACT_FIRE_START",
      "contents": "ACT_FIRE_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FIRE_START = 435"
    },
    {
      "trigger": "ACT_FIRE_LOOP",
      "contents": "ACT_FIRE_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FIRE_LOOP = 436"
    },
    {
      "trigger": "ACT_FIRE_END",
      "contents": "ACT_FIRE_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FIRE_END = 437"
    },
    {
      "trigger": "ACT_CROUCHING_GRENADEIDLE",
      "contents": "ACT_CROUCHING_GRENADEIDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_GRENADEIDLE = 438"
    },
    {
      "trigger": "ACT_CROUCHING_GRENADEREADY",
      "contents": "ACT_CROUCHING_GRENADEREADY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_GRENADEREADY = 439"
    },
    {
      "trigger": "ACT_CROUCHING_PRIMARYATTACK",
      "contents": "ACT_CROUCHING_PRIMARYATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_PRIMARYATTACK = 440"
    },
    {
      "trigger": "ACT_OVERLAY_GRENADEIDLE",
      "contents": "ACT_OVERLAY_GRENADEIDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_GRENADEIDLE = 441"
    },
    {
      "trigger": "ACT_OVERLAY_GRENADEREADY",
      "contents": "ACT_OVERLAY_GRENADEREADY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_GRENADEREADY = 442"
    },
    {
      "trigger": "ACT_OVERLAY_PRIMARYATTACK",
      "contents": "ACT_OVERLAY_PRIMARYATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_PRIMARYATTACK = 443"
    },
    {
      "trigger": "ACT_OVERLAY_SHIELD_UP",
      "contents": "ACT_OVERLAY_SHIELD_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_SHIELD_UP = 444"
    },
    {
      "trigger": "ACT_OVERLAY_SHIELD_DOWN",
      "contents": "ACT_OVERLAY_SHIELD_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_SHIELD_DOWN = 445"
    },
    {
      "trigger": "ACT_OVERLAY_SHIELD_UP_IDLE",
      "contents": "ACT_OVERLAY_SHIELD_UP_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_SHIELD_UP_IDLE = 446"
    },
    {
      "trigger": "ACT_OVERLAY_SHIELD_ATTACK",
      "contents": "ACT_OVERLAY_SHIELD_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_SHIELD_ATTACK = 447"
    },
    {
      "trigger": "ACT_OVERLAY_SHIELD_KNOCKBACK",
      "contents": "ACT_OVERLAY_SHIELD_KNOCKBACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OVERLAY_SHIELD_KNOCKBACK = 448"
    },
    {
      "trigger": "ACT_SHIELD_UP",
      "contents": "ACT_SHIELD_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIELD_UP = 449"
    },
    {
      "trigger": "ACT_SHIELD_DOWN",
      "contents": "ACT_SHIELD_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIELD_DOWN = 450"
    },
    {
      "trigger": "ACT_SHIELD_UP_IDLE",
      "contents": "ACT_SHIELD_UP_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIELD_UP_IDLE = 451"
    },
    {
      "trigger": "ACT_SHIELD_ATTACK",
      "contents": "ACT_SHIELD_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIELD_ATTACK = 452"
    },
    {
      "trigger": "ACT_SHIELD_KNOCKBACK",
      "contents": "ACT_SHIELD_KNOCKBACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHIELD_KNOCKBACK = 453"
    },
    {
      "trigger": "ACT_CROUCHING_SHIELD_UP",
      "contents": "ACT_CROUCHING_SHIELD_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_SHIELD_UP = 454"
    },
    {
      "trigger": "ACT_CROUCHING_SHIELD_DOWN",
      "contents": "ACT_CROUCHING_SHIELD_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_SHIELD_DOWN = 455"
    },
    {
      "trigger": "ACT_CROUCHING_SHIELD_UP_IDLE",
      "contents": "ACT_CROUCHING_SHIELD_UP_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_SHIELD_UP_IDLE = 456"
    },
    {
      "trigger": "ACT_CROUCHING_SHIELD_ATTACK",
      "contents": "ACT_CROUCHING_SHIELD_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_SHIELD_ATTACK = 457"
    },
    {
      "trigger": "ACT_CROUCHING_SHIELD_KNOCKBACK",
      "contents": "ACT_CROUCHING_SHIELD_KNOCKBACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROUCHING_SHIELD_KNOCKBACK = 458"
    },
    {
      "trigger": "ACT_TURNRIGHT45",
      "contents": "ACT_TURNRIGHT45",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TURNRIGHT45 = 459"
    },
    {
      "trigger": "ACT_TURNLEFT45",
      "contents": "ACT_TURNLEFT45",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TURNLEFT45 = 460"
    },
    {
      "trigger": "ACT_TURN",
      "contents": "ACT_TURN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TURN = 461"
    },
    {
      "trigger": "ACT_OBJ_ASSEMBLING",
      "contents": "ACT_OBJ_ASSEMBLING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_ASSEMBLING = 462"
    },
    {
      "trigger": "ACT_OBJ_DISMANTLING",
      "contents": "ACT_OBJ_DISMANTLING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_DISMANTLING = 463"
    },
    {
      "trigger": "ACT_OBJ_STARTUP",
      "contents": "ACT_OBJ_STARTUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_STARTUP = 464"
    },
    {
      "trigger": "ACT_OBJ_RUNNING",
      "contents": "ACT_OBJ_RUNNING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_RUNNING = 465"
    },
    {
      "trigger": "ACT_OBJ_IDLE",
      "contents": "ACT_OBJ_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_IDLE = 466"
    },
    {
      "trigger": "ACT_OBJ_PLACING",
      "contents": "ACT_OBJ_PLACING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_PLACING = 467"
    },
    {
      "trigger": "ACT_OBJ_DETERIORATING",
      "contents": "ACT_OBJ_DETERIORATING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_DETERIORATING = 468"
    },
    {
      "trigger": "ACT_OBJ_UPGRADING",
      "contents": "ACT_OBJ_UPGRADING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_OBJ_UPGRADING = 469"
    },
    {
      "trigger": "ACT_DEPLOY",
      "contents": "ACT_DEPLOY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEPLOY = 470"
    },
    {
      "trigger": "ACT_DEPLOY_IDLE",
      "contents": "ACT_DEPLOY_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEPLOY_IDLE = 471"
    },
    {
      "trigger": "ACT_UNDEPLOY",
      "contents": "ACT_UNDEPLOY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_UNDEPLOY = 472"
    },
    {
      "trigger": "ACT_GRENADE_ROLL",
      "contents": "ACT_GRENADE_ROLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GRENADE_ROLL = 473"
    },
    {
      "trigger": "ACT_GRENADE_TOSS",
      "contents": "ACT_GRENADE_TOSS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GRENADE_TOSS = 474"
    },
    {
      "trigger": "ACT_HANDGRENADE_THROW1",
      "contents": "ACT_HANDGRENADE_THROW1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HANDGRENADE_THROW1 = 475"
    },
    {
      "trigger": "ACT_HANDGRENADE_THROW2",
      "contents": "ACT_HANDGRENADE_THROW2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HANDGRENADE_THROW2 = 476"
    },
    {
      "trigger": "ACT_HANDGRENADE_THROW3",
      "contents": "ACT_HANDGRENADE_THROW3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HANDGRENADE_THROW3 = 477"
    },
    {
      "trigger": "ACT_SHOTGUN_IDLE_DEEP",
      "contents": "ACT_SHOTGUN_IDLE_DEEP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHOTGUN_IDLE_DEEP = 478"
    },
    {
      "trigger": "ACT_SHOTGUN_IDLE4",
      "contents": "ACT_SHOTGUN_IDLE4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SHOTGUN_IDLE4 = 479"
    },
    {
      "trigger": "ACT_GLOCK_SHOOTEMPTY",
      "contents": "ACT_GLOCK_SHOOTEMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GLOCK_SHOOTEMPTY = 480"
    },
    {
      "trigger": "ACT_GLOCK_SHOOT_RELOAD",
      "contents": "ACT_GLOCK_SHOOT_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GLOCK_SHOOT_RELOAD = 481"
    },
    {
      "trigger": "ACT_RPG_DRAW_UNLOADED",
      "contents": "ACT_RPG_DRAW_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RPG_DRAW_UNLOADED = 482"
    },
    {
      "trigger": "ACT_RPG_HOLSTER_UNLOADED",
      "contents": "ACT_RPG_HOLSTER_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RPG_HOLSTER_UNLOADED = 483"
    },
    {
      "trigger": "ACT_RPG_IDLE_UNLOADED",
      "contents": "ACT_RPG_IDLE_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RPG_IDLE_UNLOADED = 484"
    },
    {
      "trigger": "ACT_RPG_FIDGET_UNLOADED",
      "contents": "ACT_RPG_FIDGET_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RPG_FIDGET_UNLOADED = 485"
    },
    {
      "trigger": "ACT_CROSSBOW_DRAW_UNLOADED",
      "contents": "ACT_CROSSBOW_DRAW_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROSSBOW_DRAW_UNLOADED = 486"
    },
    {
      "trigger": "ACT_CROSSBOW_IDLE_UNLOADED",
      "contents": "ACT_CROSSBOW_IDLE_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROSSBOW_IDLE_UNLOADED = 487"
    },
    {
      "trigger": "ACT_CROSSBOW_FIDGET_UNLOADED",
      "contents": "ACT_CROSSBOW_FIDGET_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROSSBOW_FIDGET_UNLOADED = 488"
    },
    {
      "trigger": "ACT_GAUSS_SPINUP",
      "contents": "ACT_GAUSS_SPINUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GAUSS_SPINUP = 489"
    },
    {
      "trigger": "ACT_GAUSS_SPINCYCLE",
      "contents": "ACT_GAUSS_SPINCYCLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GAUSS_SPINCYCLE = 490"
    },
    {
      "trigger": "ACT_TRIPMINE_GROUND",
      "contents": "ACT_TRIPMINE_GROUND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TRIPMINE_GROUND = 491"
    },
    {
      "trigger": "ACT_TRIPMINE_WORLD",
      "contents": "ACT_TRIPMINE_WORLD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_TRIPMINE_WORLD = 492"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_SILENCED",
      "contents": "ACT_VM_PRIMARYATTACK_SILENCED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_SILENCED = 493"
    },
    {
      "trigger": "ACT_VM_RELOAD_SILENCED",
      "contents": "ACT_VM_RELOAD_SILENCED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_SILENCED = 494"
    },
    {
      "trigger": "ACT_VM_DRYFIRE_SILENCED",
      "contents": "ACT_VM_DRYFIRE_SILENCED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRYFIRE_SILENCED = 495"
    },
    {
      "trigger": "ACT_VM_IDLE_SILENCED",
      "contents": "ACT_VM_IDLE_SILENCED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_SILENCED = 496"
    },
    {
      "trigger": "ACT_VM_DRAW_SILENCED",
      "contents": "ACT_VM_DRAW_SILENCED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAW_SILENCED = 497"
    },
    {
      "trigger": "ACT_VM_IDLE_EMPTY_LEFT",
      "contents": "ACT_VM_IDLE_EMPTY_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_EMPTY_LEFT = 498"
    },
    {
      "trigger": "ACT_VM_DRYFIRE_LEFT",
      "contents": "ACT_VM_DRYFIRE_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRYFIRE_LEFT = 499"
    },
    {
      "trigger": "ACT_PLAYER_IDLE_FIRE",
      "contents": "ACT_PLAYER_IDLE_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PLAYER_IDLE_FIRE = 500"
    },
    {
      "trigger": "ACT_PLAYER_CROUCH_FIRE",
      "contents": "ACT_PLAYER_CROUCH_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PLAYER_CROUCH_FIRE = 501"
    },
    {
      "trigger": "ACT_PLAYER_CROUCH_WALK_FIRE",
      "contents": "ACT_PLAYER_CROUCH_WALK_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PLAYER_CROUCH_WALK_FIRE = 502"
    },
    {
      "trigger": "ACT_PLAYER_WALK_FIRE",
      "contents": "ACT_PLAYER_WALK_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PLAYER_WALK_FIRE = 503"
    },
    {
      "trigger": "ACT_PLAYER_RUN_FIRE",
      "contents": "ACT_PLAYER_RUN_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PLAYER_RUN_FIRE = 504"
    },
    {
      "trigger": "ACT_IDLETORUN",
      "contents": "ACT_IDLETORUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_IDLETORUN = 505"
    },
    {
      "trigger": "ACT_RUNTOIDLE",
      "contents": "ACT_RUNTOIDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_RUNTOIDLE = 506"
    },
    {
      "trigger": "ACT_SPRINT",
      "contents": "ACT_SPRINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_SPRINT = 507"
    },
    {
      "trigger": "ACT_GET_DOWN_STAND",
      "contents": "ACT_GET_DOWN_STAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GET_DOWN_STAND = 508"
    },
    {
      "trigger": "ACT_GET_UP_STAND",
      "contents": "ACT_GET_UP_STAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GET_UP_STAND = 509"
    },
    {
      "trigger": "ACT_GET_DOWN_CROUCH",
      "contents": "ACT_GET_DOWN_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GET_DOWN_CROUCH = 510"
    },
    {
      "trigger": "ACT_GET_UP_CROUCH",
      "contents": "ACT_GET_UP_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GET_UP_CROUCH = 511"
    },
    {
      "trigger": "ACT_PRONE_FORWARD",
      "contents": "ACT_PRONE_FORWARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PRONE_FORWARD = 512"
    },
    {
      "trigger": "ACT_PRONE_IDLE",
      "contents": "ACT_PRONE_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_PRONE_IDLE = 513"
    },
    {
      "trigger": "ACT_DEEPIDLE1",
      "contents": "ACT_DEEPIDLE1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEEPIDLE1 = 514"
    },
    {
      "trigger": "ACT_DEEPIDLE2",
      "contents": "ACT_DEEPIDLE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEEPIDLE2 = 515"
    },
    {
      "trigger": "ACT_DEEPIDLE3",
      "contents": "ACT_DEEPIDLE3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEEPIDLE3 = 516"
    },
    {
      "trigger": "ACT_DEEPIDLE4",
      "contents": "ACT_DEEPIDLE4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DEEPIDLE4 = 517"
    },
    {
      "trigger": "ACT_VM_RELOAD_DEPLOYED",
      "contents": "ACT_VM_RELOAD_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_DEPLOYED = 518"
    },
    {
      "trigger": "ACT_VM_RELOAD_IDLE",
      "contents": "ACT_VM_RELOAD_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_IDLE = 519"
    },
    {
      "trigger": "ACT_VM_DRAW_DEPLOYED",
      "contents": "ACT_VM_DRAW_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAW_DEPLOYED = 520"
    },
    {
      "trigger": "ACT_VM_DRAW_EMPTY",
      "contents": "ACT_VM_DRAW_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAW_EMPTY = 521"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_EMPTY",
      "contents": "ACT_VM_PRIMARYATTACK_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_EMPTY = 522"
    },
    {
      "trigger": "ACT_VM_RELOAD_EMPTY",
      "contents": "ACT_VM_RELOAD_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_EMPTY = 523"
    },
    {
      "trigger": "ACT_VM_IDLE_EMPTY",
      "contents": "ACT_VM_IDLE_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_EMPTY = 524"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_EMPTY",
      "contents": "ACT_VM_IDLE_DEPLOYED_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_EMPTY = 525"
    },
    {
      "trigger": "ACT_VM_IDLE_8",
      "contents": "ACT_VM_IDLE_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_8 = 526"
    },
    {
      "trigger": "ACT_VM_IDLE_7",
      "contents": "ACT_VM_IDLE_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_7 = 527"
    },
    {
      "trigger": "ACT_VM_IDLE_6",
      "contents": "ACT_VM_IDLE_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_6 = 528"
    },
    {
      "trigger": "ACT_VM_IDLE_5",
      "contents": "ACT_VM_IDLE_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_5 = 529"
    },
    {
      "trigger": "ACT_VM_IDLE_4",
      "contents": "ACT_VM_IDLE_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_4 = 530"
    },
    {
      "trigger": "ACT_VM_IDLE_3",
      "contents": "ACT_VM_IDLE_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_3 = 531"
    },
    {
      "trigger": "ACT_VM_IDLE_2",
      "contents": "ACT_VM_IDLE_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_2 = 532"
    },
    {
      "trigger": "ACT_VM_IDLE_1",
      "contents": "ACT_VM_IDLE_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_1 = 533"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED",
      "contents": "ACT_VM_IDLE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED = 534"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_8",
      "contents": "ACT_VM_IDLE_DEPLOYED_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_8 = 535"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_7",
      "contents": "ACT_VM_IDLE_DEPLOYED_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_7 = 536"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_6",
      "contents": "ACT_VM_IDLE_DEPLOYED_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_6 = 537"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_5",
      "contents": "ACT_VM_IDLE_DEPLOYED_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_5 = 538"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_4",
      "contents": "ACT_VM_IDLE_DEPLOYED_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_4 = 539"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_3",
      "contents": "ACT_VM_IDLE_DEPLOYED_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_3 = 540"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_2",
      "contents": "ACT_VM_IDLE_DEPLOYED_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_2 = 541"
    },
    {
      "trigger": "ACT_VM_IDLE_DEPLOYED_1",
      "contents": "ACT_VM_IDLE_DEPLOYED_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_DEPLOYED_1 = 542"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY",
      "contents": "ACT_VM_UNDEPLOY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY = 543"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_8",
      "contents": "ACT_VM_UNDEPLOY_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_8 = 544"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_7",
      "contents": "ACT_VM_UNDEPLOY_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_7 = 545"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_6",
      "contents": "ACT_VM_UNDEPLOY_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_6 = 546"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_5",
      "contents": "ACT_VM_UNDEPLOY_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_5 = 547"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_4",
      "contents": "ACT_VM_UNDEPLOY_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_4 = 548"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_3",
      "contents": "ACT_VM_UNDEPLOY_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_3 = 549"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_2",
      "contents": "ACT_VM_UNDEPLOY_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_2 = 550"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_1",
      "contents": "ACT_VM_UNDEPLOY_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_1 = 551"
    },
    {
      "trigger": "ACT_VM_UNDEPLOY_EMPTY",
      "contents": "ACT_VM_UNDEPLOY_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNDEPLOY_EMPTY = 552"
    },
    {
      "trigger": "ACT_VM_DEPLOY",
      "contents": "ACT_VM_DEPLOY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY = 553"
    },
    {
      "trigger": "ACT_VM_DEPLOY_8",
      "contents": "ACT_VM_DEPLOY_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_8 = 554"
    },
    {
      "trigger": "ACT_VM_DEPLOY_7",
      "contents": "ACT_VM_DEPLOY_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_7 = 555"
    },
    {
      "trigger": "ACT_VM_DEPLOY_6",
      "contents": "ACT_VM_DEPLOY_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_6 = 556"
    },
    {
      "trigger": "ACT_VM_DEPLOY_5",
      "contents": "ACT_VM_DEPLOY_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_5 = 557"
    },
    {
      "trigger": "ACT_VM_DEPLOY_4",
      "contents": "ACT_VM_DEPLOY_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_4 = 558"
    },
    {
      "trigger": "ACT_VM_DEPLOY_3",
      "contents": "ACT_VM_DEPLOY_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_3 = 559"
    },
    {
      "trigger": "ACT_VM_DEPLOY_2",
      "contents": "ACT_VM_DEPLOY_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_2 = 560"
    },
    {
      "trigger": "ACT_VM_DEPLOY_1",
      "contents": "ACT_VM_DEPLOY_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_1 = 561"
    },
    {
      "trigger": "ACT_VM_DEPLOY_EMPTY",
      "contents": "ACT_VM_DEPLOY_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOY_EMPTY = 562"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_8",
      "contents": "ACT_VM_PRIMARYATTACK_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_8 = 563"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_7",
      "contents": "ACT_VM_PRIMARYATTACK_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_7 = 564"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_6",
      "contents": "ACT_VM_PRIMARYATTACK_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_6 = 565"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_5",
      "contents": "ACT_VM_PRIMARYATTACK_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_5 = 566"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_4",
      "contents": "ACT_VM_PRIMARYATTACK_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_4 = 567"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_3",
      "contents": "ACT_VM_PRIMARYATTACK_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_3 = 568"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_2",
      "contents": "ACT_VM_PRIMARYATTACK_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_2 = 569"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_1",
      "contents": "ACT_VM_PRIMARYATTACK_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_1 = 570"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED = 571"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_8",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_8",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_8 = 572"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_7",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_7 = 573"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_6",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_6 = 574"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_5",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_5 = 575"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_4",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_4 = 576"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_3",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_3 = 577"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_2",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_2 = 578"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_1",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_1 = 579"
    },
    {
      "trigger": "ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY",
      "contents": "ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY = 580"
    },
    {
      "trigger": "ACT_DOD_DEPLOYED",
      "contents": "ACT_DOD_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEPLOYED = 581"
    },
    {
      "trigger": "ACT_DOD_PRONE_DEPLOYED",
      "contents": "ACT_DOD_PRONE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_DEPLOYED = 582"
    },
    {
      "trigger": "ACT_DOD_IDLE_ZOOMED",
      "contents": "ACT_DOD_IDLE_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_IDLE_ZOOMED = 583"
    },
    {
      "trigger": "ACT_DOD_WALK_ZOOMED",
      "contents": "ACT_DOD_WALK_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_ZOOMED = 584"
    },
    {
      "trigger": "ACT_DOD_CROUCH_ZOOMED",
      "contents": "ACT_DOD_CROUCH_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_ZOOMED = 585"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_ZOOMED",
      "contents": "ACT_DOD_CROUCHWALK_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_ZOOMED = 586"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOMED",
      "contents": "ACT_DOD_PRONE_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOMED = 587"
    },
    {
      "trigger": "ACT_DOD_PRONE_FORWARD_ZOOMED",
      "contents": "ACT_DOD_PRONE_FORWARD_ZOOMED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_FORWARD_ZOOMED = 588"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_DEPLOYED",
      "contents": "ACT_DOD_PRIMARYATTACK_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_DEPLOYED = 589"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED = 590"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED",
      "contents": "ACT_DOD_RELOAD_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED = 591"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED = 592"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE = 593"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_PRONE",
      "contents": "ACT_DOD_SECONDARYATTACK_PRONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_PRONE = 594"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH",
      "contents": "ACT_DOD_RELOAD_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH = 595"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE",
      "contents": "ACT_DOD_RELOAD_PRONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE = 596"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE",
      "contents": "ACT_DOD_STAND_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE = 597"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM",
      "contents": "ACT_DOD_STAND_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM = 598"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE",
      "contents": "ACT_DOD_CROUCH_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE = 599"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM",
      "contents": "ACT_DOD_CROUCH_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM = 600"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE",
      "contents": "ACT_DOD_CROUCHWALK_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE = 601"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM",
      "contents": "ACT_DOD_CROUCHWALK_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM = 602"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE",
      "contents": "ACT_DOD_WALK_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE = 603"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM",
      "contents": "ACT_DOD_WALK_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM = 604"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE",
      "contents": "ACT_DOD_RUN_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE = 605"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM",
      "contents": "ACT_DOD_RUN_AIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM = 606"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_PISTOL",
      "contents": "ACT_DOD_STAND_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_PISTOL = 607"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_PISTOL",
      "contents": "ACT_DOD_CROUCH_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_PISTOL = 608"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_PISTOL",
      "contents": "ACT_DOD_CROUCHWALK_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_PISTOL = 609"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_PISTOL",
      "contents": "ACT_DOD_WALK_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_PISTOL = 610"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_PISTOL",
      "contents": "ACT_DOD_RUN_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_PISTOL = 611"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_PISTOL",
      "contents": "ACT_DOD_PRONE_AIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_PISTOL = 612"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_PISTOL",
      "contents": "ACT_DOD_STAND_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_PISTOL = 613"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_PISTOL",
      "contents": "ACT_DOD_CROUCH_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_PISTOL = 614"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_PISTOL",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_PISTOL = 615"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_PISTOL",
      "contents": "ACT_DOD_WALK_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_PISTOL = 616"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_PISTOL",
      "contents": "ACT_DOD_RUN_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_PISTOL = 617"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_PISTOL",
      "contents": "ACT_DOD_SPRINT_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_PISTOL = 618"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_PISTOL",
      "contents": "ACT_DOD_PRONEWALK_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_PISTOL = 619"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_C96",
      "contents": "ACT_DOD_STAND_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_C96 = 620"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_C96",
      "contents": "ACT_DOD_CROUCH_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_C96 = 621"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_C96",
      "contents": "ACT_DOD_CROUCHWALK_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_C96 = 622"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_C96",
      "contents": "ACT_DOD_WALK_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_C96 = 623"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_C96",
      "contents": "ACT_DOD_RUN_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_C96 = 624"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_C96",
      "contents": "ACT_DOD_PRONE_AIM_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_C96 = 625"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_C96",
      "contents": "ACT_DOD_STAND_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_C96 = 626"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_C96",
      "contents": "ACT_DOD_CROUCH_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_C96 = 627"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_C96",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_C96 = 628"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_C96",
      "contents": "ACT_DOD_WALK_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_C96 = 629"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_C96",
      "contents": "ACT_DOD_RUN_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_C96 = 630"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_C96",
      "contents": "ACT_DOD_SPRINT_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_C96 = 631"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_C96",
      "contents": "ACT_DOD_PRONEWALK_IDLE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_C96 = 632"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_RIFLE",
      "contents": "ACT_DOD_STAND_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_RIFLE = 633"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_RIFLE",
      "contents": "ACT_DOD_CROUCH_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_RIFLE = 634"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_RIFLE",
      "contents": "ACT_DOD_CROUCHWALK_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_RIFLE = 635"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_RIFLE",
      "contents": "ACT_DOD_WALK_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_RIFLE = 636"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_RIFLE",
      "contents": "ACT_DOD_RUN_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_RIFLE = 637"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_RIFLE",
      "contents": "ACT_DOD_PRONE_AIM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_RIFLE = 638"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_RIFLE",
      "contents": "ACT_DOD_STAND_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_RIFLE = 639"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_RIFLE",
      "contents": "ACT_DOD_CROUCH_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_RIFLE = 640"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_RIFLE",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_RIFLE = 641"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_RIFLE",
      "contents": "ACT_DOD_WALK_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_RIFLE = 642"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_RIFLE",
      "contents": "ACT_DOD_RUN_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_RIFLE = 643"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_RIFLE",
      "contents": "ACT_DOD_SPRINT_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_RIFLE = 644"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_RIFLE",
      "contents": "ACT_DOD_PRONEWALK_IDLE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_RIFLE = 645"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_BOLT",
      "contents": "ACT_DOD_STAND_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_BOLT = 646"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_BOLT",
      "contents": "ACT_DOD_CROUCH_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_BOLT = 647"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_BOLT",
      "contents": "ACT_DOD_CROUCHWALK_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_BOLT = 648"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_BOLT",
      "contents": "ACT_DOD_WALK_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_BOLT = 649"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_BOLT",
      "contents": "ACT_DOD_RUN_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_BOLT = 650"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_BOLT",
      "contents": "ACT_DOD_PRONE_AIM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_BOLT = 651"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_BOLT",
      "contents": "ACT_DOD_STAND_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_BOLT = 652"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_BOLT",
      "contents": "ACT_DOD_CROUCH_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_BOLT = 653"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_BOLT",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_BOLT = 654"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_BOLT",
      "contents": "ACT_DOD_WALK_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_BOLT = 655"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_BOLT",
      "contents": "ACT_DOD_RUN_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_BOLT = 656"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_BOLT",
      "contents": "ACT_DOD_SPRINT_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_BOLT = 657"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_BOLT",
      "contents": "ACT_DOD_PRONEWALK_IDLE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_BOLT = 658"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_TOMMY",
      "contents": "ACT_DOD_STAND_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_TOMMY = 659"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_TOMMY",
      "contents": "ACT_DOD_CROUCH_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_TOMMY = 660"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_TOMMY",
      "contents": "ACT_DOD_CROUCHWALK_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_TOMMY = 661"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_TOMMY",
      "contents": "ACT_DOD_WALK_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_TOMMY = 662"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_TOMMY",
      "contents": "ACT_DOD_RUN_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_TOMMY = 663"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_TOMMY",
      "contents": "ACT_DOD_PRONE_AIM_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_TOMMY = 664"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_TOMMY",
      "contents": "ACT_DOD_STAND_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_TOMMY = 665"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_TOMMY",
      "contents": "ACT_DOD_CROUCH_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_TOMMY = 666"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_TOMMY",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_TOMMY = 667"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_TOMMY",
      "contents": "ACT_DOD_WALK_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_TOMMY = 668"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_TOMMY",
      "contents": "ACT_DOD_RUN_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_TOMMY = 669"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_TOMMY",
      "contents": "ACT_DOD_SPRINT_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_TOMMY = 670"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_TOMMY",
      "contents": "ACT_DOD_PRONEWALK_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_TOMMY = 671"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_MP40",
      "contents": "ACT_DOD_STAND_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_MP40 = 672"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_MP40",
      "contents": "ACT_DOD_CROUCH_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_MP40 = 673"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_MP40",
      "contents": "ACT_DOD_CROUCHWALK_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_MP40 = 674"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_MP40",
      "contents": "ACT_DOD_WALK_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_MP40 = 675"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_MP40",
      "contents": "ACT_DOD_RUN_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_MP40 = 676"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_MP40",
      "contents": "ACT_DOD_PRONE_AIM_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_MP40 = 677"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_MP40",
      "contents": "ACT_DOD_STAND_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_MP40 = 678"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_MP40",
      "contents": "ACT_DOD_CROUCH_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_MP40 = 679"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_MP40",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_MP40 = 680"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_MP40",
      "contents": "ACT_DOD_WALK_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_MP40 = 681"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_MP40",
      "contents": "ACT_DOD_RUN_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_MP40 = 682"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_MP40",
      "contents": "ACT_DOD_SPRINT_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_MP40 = 683"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_MP40",
      "contents": "ACT_DOD_PRONEWALK_IDLE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_MP40 = 684"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_MP44",
      "contents": "ACT_DOD_STAND_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_MP44 = 685"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_MP44",
      "contents": "ACT_DOD_CROUCH_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_MP44 = 686"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_MP44",
      "contents": "ACT_DOD_CROUCHWALK_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_MP44 = 687"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_MP44",
      "contents": "ACT_DOD_WALK_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_MP44 = 688"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_MP44",
      "contents": "ACT_DOD_RUN_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_MP44 = 689"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_MP44",
      "contents": "ACT_DOD_PRONE_AIM_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_MP44 = 690"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_MP44",
      "contents": "ACT_DOD_STAND_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_MP44 = 691"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_MP44",
      "contents": "ACT_DOD_CROUCH_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_MP44 = 692"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_MP44",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_MP44 = 693"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_MP44",
      "contents": "ACT_DOD_WALK_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_MP44 = 694"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_MP44",
      "contents": "ACT_DOD_RUN_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_MP44 = 695"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_MP44",
      "contents": "ACT_DOD_SPRINT_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_MP44 = 696"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_MP44",
      "contents": "ACT_DOD_PRONEWALK_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_MP44 = 697"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_GREASE",
      "contents": "ACT_DOD_STAND_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_GREASE = 698"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_GREASE",
      "contents": "ACT_DOD_CROUCH_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_GREASE = 699"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_GREASE",
      "contents": "ACT_DOD_CROUCHWALK_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_GREASE = 700"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_GREASE",
      "contents": "ACT_DOD_WALK_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_GREASE = 701"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_GREASE",
      "contents": "ACT_DOD_RUN_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_GREASE = 702"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_GREASE",
      "contents": "ACT_DOD_PRONE_AIM_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_GREASE = 703"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_GREASE",
      "contents": "ACT_DOD_STAND_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_GREASE = 704"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_GREASE",
      "contents": "ACT_DOD_CROUCH_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_GREASE = 705"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_GREASE",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_GREASE = 706"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_GREASE",
      "contents": "ACT_DOD_WALK_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_GREASE = 707"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_GREASE",
      "contents": "ACT_DOD_RUN_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_GREASE = 708"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_GREASE",
      "contents": "ACT_DOD_SPRINT_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_GREASE = 709"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_GREASE",
      "contents": "ACT_DOD_PRONEWALK_IDLE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_GREASE = 710"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_MG",
      "contents": "ACT_DOD_STAND_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_MG = 711"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_MG",
      "contents": "ACT_DOD_CROUCH_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_MG = 712"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_MG",
      "contents": "ACT_DOD_CROUCHWALK_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_MG = 713"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_MG",
      "contents": "ACT_DOD_WALK_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_MG = 714"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_MG",
      "contents": "ACT_DOD_RUN_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_MG = 715"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_MG",
      "contents": "ACT_DOD_PRONE_AIM_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_MG = 716"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_MG",
      "contents": "ACT_DOD_STAND_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_MG = 717"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_MG",
      "contents": "ACT_DOD_CROUCH_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_MG = 718"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_MG",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_MG = 719"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_MG",
      "contents": "ACT_DOD_WALK_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_MG = 720"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_MG",
      "contents": "ACT_DOD_RUN_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_MG = 721"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_MG",
      "contents": "ACT_DOD_SPRINT_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_MG = 722"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_MG",
      "contents": "ACT_DOD_PRONEWALK_IDLE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_MG = 723"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_30CAL",
      "contents": "ACT_DOD_STAND_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_30CAL = 724"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_30CAL",
      "contents": "ACT_DOD_CROUCH_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_30CAL = 725"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_30CAL",
      "contents": "ACT_DOD_CROUCHWALK_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_30CAL = 726"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_30CAL",
      "contents": "ACT_DOD_WALK_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_30CAL = 727"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_30CAL",
      "contents": "ACT_DOD_RUN_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_30CAL = 728"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_30CAL",
      "contents": "ACT_DOD_PRONE_AIM_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_30CAL = 729"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_30CAL",
      "contents": "ACT_DOD_STAND_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_30CAL = 730"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_30CAL",
      "contents": "ACT_DOD_CROUCH_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_30CAL = 731"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_30CAL",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_30CAL = 732"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_30CAL",
      "contents": "ACT_DOD_WALK_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_30CAL = 733"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_30CAL",
      "contents": "ACT_DOD_RUN_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_30CAL = 734"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_30CAL",
      "contents": "ACT_DOD_SPRINT_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_30CAL = 735"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_30CAL",
      "contents": "ACT_DOD_PRONEWALK_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_30CAL = 736"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_GREN_FRAG",
      "contents": "ACT_DOD_STAND_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_GREN_FRAG = 737"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_GREN_FRAG",
      "contents": "ACT_DOD_CROUCH_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_GREN_FRAG = 738"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_GREN_FRAG",
      "contents": "ACT_DOD_CROUCHWALK_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_GREN_FRAG = 739"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_GREN_FRAG",
      "contents": "ACT_DOD_WALK_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_GREN_FRAG = 740"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_GREN_FRAG",
      "contents": "ACT_DOD_RUN_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_GREN_FRAG = 741"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_GREN_FRAG",
      "contents": "ACT_DOD_PRONE_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_GREN_FRAG = 742"
    },
    {
      "trigger": "ACT_DOD_SPRINT_AIM_GREN_FRAG",
      "contents": "ACT_DOD_SPRINT_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_AIM_GREN_FRAG = 743"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_AIM_GREN_FRAG",
      "contents": "ACT_DOD_PRONEWALK_AIM_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_AIM_GREN_FRAG = 744"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_GREN_STICK",
      "contents": "ACT_DOD_STAND_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_GREN_STICK = 745"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_GREN_STICK",
      "contents": "ACT_DOD_CROUCH_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_GREN_STICK = 746"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_GREN_STICK",
      "contents": "ACT_DOD_CROUCHWALK_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_GREN_STICK = 747"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_GREN_STICK",
      "contents": "ACT_DOD_WALK_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_GREN_STICK = 748"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_GREN_STICK",
      "contents": "ACT_DOD_RUN_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_GREN_STICK = 749"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_GREN_STICK",
      "contents": "ACT_DOD_PRONE_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_GREN_STICK = 750"
    },
    {
      "trigger": "ACT_DOD_SPRINT_AIM_GREN_STICK",
      "contents": "ACT_DOD_SPRINT_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_AIM_GREN_STICK = 751"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_AIM_GREN_STICK",
      "contents": "ACT_DOD_PRONEWALK_AIM_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_AIM_GREN_STICK = 752"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_KNIFE",
      "contents": "ACT_DOD_STAND_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_KNIFE = 753"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_KNIFE",
      "contents": "ACT_DOD_CROUCH_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_KNIFE = 754"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_KNIFE",
      "contents": "ACT_DOD_CROUCHWALK_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_KNIFE = 755"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_KNIFE",
      "contents": "ACT_DOD_WALK_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_KNIFE = 756"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_KNIFE",
      "contents": "ACT_DOD_RUN_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_KNIFE = 757"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_KNIFE",
      "contents": "ACT_DOD_PRONE_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_KNIFE = 758"
    },
    {
      "trigger": "ACT_DOD_SPRINT_AIM_KNIFE",
      "contents": "ACT_DOD_SPRINT_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_AIM_KNIFE = 759"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_AIM_KNIFE",
      "contents": "ACT_DOD_PRONEWALK_AIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_AIM_KNIFE = 760"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_SPADE",
      "contents": "ACT_DOD_STAND_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_SPADE = 761"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_SPADE",
      "contents": "ACT_DOD_CROUCH_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_SPADE = 762"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_SPADE",
      "contents": "ACT_DOD_CROUCHWALK_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_SPADE = 763"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_SPADE",
      "contents": "ACT_DOD_WALK_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_SPADE = 764"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_SPADE",
      "contents": "ACT_DOD_RUN_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_SPADE = 765"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_SPADE",
      "contents": "ACT_DOD_PRONE_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_SPADE = 766"
    },
    {
      "trigger": "ACT_DOD_SPRINT_AIM_SPADE",
      "contents": "ACT_DOD_SPRINT_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_AIM_SPADE = 767"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_AIM_SPADE",
      "contents": "ACT_DOD_PRONEWALK_AIM_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_AIM_SPADE = 768"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_BAZOOKA",
      "contents": "ACT_DOD_STAND_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_BAZOOKA = 769"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_BAZOOKA",
      "contents": "ACT_DOD_CROUCH_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_BAZOOKA = 770"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_BAZOOKA",
      "contents": "ACT_DOD_CROUCHWALK_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_BAZOOKA = 771"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_BAZOOKA",
      "contents": "ACT_DOD_WALK_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_BAZOOKA = 772"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_BAZOOKA",
      "contents": "ACT_DOD_RUN_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_BAZOOKA = 773"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_BAZOOKA",
      "contents": "ACT_DOD_PRONE_AIM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_BAZOOKA = 774"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_BAZOOKA",
      "contents": "ACT_DOD_STAND_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_BAZOOKA = 775"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_BAZOOKA",
      "contents": "ACT_DOD_CROUCH_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_BAZOOKA = 776"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_BAZOOKA",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_BAZOOKA = 777"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_BAZOOKA",
      "contents": "ACT_DOD_WALK_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_BAZOOKA = 778"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_BAZOOKA",
      "contents": "ACT_DOD_RUN_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_BAZOOKA = 779"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_BAZOOKA",
      "contents": "ACT_DOD_SPRINT_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_BAZOOKA = 780"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_BAZOOKA",
      "contents": "ACT_DOD_PRONEWALK_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_BAZOOKA = 781"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_PSCHRECK",
      "contents": "ACT_DOD_STAND_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_PSCHRECK = 782"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_PSCHRECK",
      "contents": "ACT_DOD_CROUCH_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_PSCHRECK = 783"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_PSCHRECK",
      "contents": "ACT_DOD_CROUCHWALK_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_PSCHRECK = 784"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_PSCHRECK",
      "contents": "ACT_DOD_WALK_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_PSCHRECK = 785"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_PSCHRECK",
      "contents": "ACT_DOD_RUN_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_PSCHRECK = 786"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_PSCHRECK",
      "contents": "ACT_DOD_PRONE_AIM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_PSCHRECK = 787"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_PSCHRECK",
      "contents": "ACT_DOD_STAND_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_PSCHRECK = 788"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_PSCHRECK",
      "contents": "ACT_DOD_CROUCH_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_PSCHRECK = 789"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_PSCHRECK",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_PSCHRECK = 790"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_PSCHRECK",
      "contents": "ACT_DOD_WALK_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_PSCHRECK = 791"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_PSCHRECK",
      "contents": "ACT_DOD_RUN_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_PSCHRECK = 792"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_PSCHRECK",
      "contents": "ACT_DOD_SPRINT_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_PSCHRECK = 793"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_PSCHRECK",
      "contents": "ACT_DOD_PRONEWALK_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_PSCHRECK = 794"
    },
    {
      "trigger": "ACT_DOD_STAND_AIM_BAR",
      "contents": "ACT_DOD_STAND_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_AIM_BAR = 795"
    },
    {
      "trigger": "ACT_DOD_CROUCH_AIM_BAR",
      "contents": "ACT_DOD_CROUCH_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_AIM_BAR = 796"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_AIM_BAR",
      "contents": "ACT_DOD_CROUCHWALK_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_AIM_BAR = 797"
    },
    {
      "trigger": "ACT_DOD_WALK_AIM_BAR",
      "contents": "ACT_DOD_WALK_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_AIM_BAR = 798"
    },
    {
      "trigger": "ACT_DOD_RUN_AIM_BAR",
      "contents": "ACT_DOD_RUN_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_AIM_BAR = 799"
    },
    {
      "trigger": "ACT_DOD_PRONE_AIM_BAR",
      "contents": "ACT_DOD_PRONE_AIM_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_AIM_BAR = 800"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_BAR",
      "contents": "ACT_DOD_STAND_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_BAR = 801"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_BAR",
      "contents": "ACT_DOD_CROUCH_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_BAR = 802"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_BAR",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_BAR = 803"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_BAR",
      "contents": "ACT_DOD_WALK_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_BAR = 804"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_BAR",
      "contents": "ACT_DOD_RUN_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_BAR = 805"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_BAR",
      "contents": "ACT_DOD_SPRINT_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_BAR = 806"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_BAR",
      "contents": "ACT_DOD_PRONEWALK_IDLE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_BAR = 807"
    },
    {
      "trigger": "ACT_DOD_STAND_ZOOM_RIFLE",
      "contents": "ACT_DOD_STAND_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_ZOOM_RIFLE = 808"
    },
    {
      "trigger": "ACT_DOD_CROUCH_ZOOM_RIFLE",
      "contents": "ACT_DOD_CROUCH_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_ZOOM_RIFLE = 809"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_ZOOM_RIFLE",
      "contents": "ACT_DOD_CROUCHWALK_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_ZOOM_RIFLE = 810"
    },
    {
      "trigger": "ACT_DOD_WALK_ZOOM_RIFLE",
      "contents": "ACT_DOD_WALK_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_ZOOM_RIFLE = 811"
    },
    {
      "trigger": "ACT_DOD_RUN_ZOOM_RIFLE",
      "contents": "ACT_DOD_RUN_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_ZOOM_RIFLE = 812"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_RIFLE",
      "contents": "ACT_DOD_PRONE_ZOOM_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_RIFLE = 813"
    },
    {
      "trigger": "ACT_DOD_STAND_ZOOM_BOLT",
      "contents": "ACT_DOD_STAND_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_ZOOM_BOLT = 814"
    },
    {
      "trigger": "ACT_DOD_CROUCH_ZOOM_BOLT",
      "contents": "ACT_DOD_CROUCH_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_ZOOM_BOLT = 815"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_ZOOM_BOLT",
      "contents": "ACT_DOD_CROUCHWALK_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_ZOOM_BOLT = 816"
    },
    {
      "trigger": "ACT_DOD_WALK_ZOOM_BOLT",
      "contents": "ACT_DOD_WALK_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_ZOOM_BOLT = 817"
    },
    {
      "trigger": "ACT_DOD_RUN_ZOOM_BOLT",
      "contents": "ACT_DOD_RUN_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_ZOOM_BOLT = 818"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_BOLT",
      "contents": "ACT_DOD_PRONE_ZOOM_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_BOLT = 819"
    },
    {
      "trigger": "ACT_DOD_STAND_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_STAND_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_ZOOM_BAZOOKA = 820"
    },
    {
      "trigger": "ACT_DOD_CROUCH_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_CROUCH_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_ZOOM_BAZOOKA = 821"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA = 822"
    },
    {
      "trigger": "ACT_DOD_WALK_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_WALK_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_ZOOM_BAZOOKA = 823"
    },
    {
      "trigger": "ACT_DOD_RUN_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_RUN_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_ZOOM_BAZOOKA = 824"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_BAZOOKA",
      "contents": "ACT_DOD_PRONE_ZOOM_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_BAZOOKA = 825"
    },
    {
      "trigger": "ACT_DOD_STAND_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_STAND_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_ZOOM_PSCHRECK = 826"
    },
    {
      "trigger": "ACT_DOD_CROUCH_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_CROUCH_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_ZOOM_PSCHRECK = 827"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK = 828"
    },
    {
      "trigger": "ACT_DOD_WALK_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_WALK_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_ZOOM_PSCHRECK = 829"
    },
    {
      "trigger": "ACT_DOD_RUN_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_RUN_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_ZOOM_PSCHRECK = 830"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_PSCHRECK",
      "contents": "ACT_DOD_PRONE_ZOOM_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_PSCHRECK = 831"
    },
    {
      "trigger": "ACT_DOD_DEPLOY_RIFLE",
      "contents": "ACT_DOD_DEPLOY_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEPLOY_RIFLE = 832"
    },
    {
      "trigger": "ACT_DOD_DEPLOY_TOMMY",
      "contents": "ACT_DOD_DEPLOY_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEPLOY_TOMMY = 833"
    },
    {
      "trigger": "ACT_DOD_DEPLOY_MG",
      "contents": "ACT_DOD_DEPLOY_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEPLOY_MG = 834"
    },
    {
      "trigger": "ACT_DOD_DEPLOY_30CAL",
      "contents": "ACT_DOD_DEPLOY_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEPLOY_30CAL = 835"
    },
    {
      "trigger": "ACT_DOD_PRONE_DEPLOY_RIFLE",
      "contents": "ACT_DOD_PRONE_DEPLOY_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_DEPLOY_RIFLE = 836"
    },
    {
      "trigger": "ACT_DOD_PRONE_DEPLOY_TOMMY",
      "contents": "ACT_DOD_PRONE_DEPLOY_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_DEPLOY_TOMMY = 837"
    },
    {
      "trigger": "ACT_DOD_PRONE_DEPLOY_MG",
      "contents": "ACT_DOD_PRONE_DEPLOY_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_DEPLOY_MG = 838"
    },
    {
      "trigger": "ACT_DOD_PRONE_DEPLOY_30CAL",
      "contents": "ACT_DOD_PRONE_DEPLOY_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_DEPLOY_30CAL = 839"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_RIFLE",
      "contents": "ACT_DOD_PRIMARYATTACK_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_RIFLE = 840"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_RIFLE",
      "contents": "ACT_DOD_SECONDARYATTACK_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_RIFLE = 841"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_RIFLE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_RIFLE = 842"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_PRONE_RIFLE",
      "contents": "ACT_DOD_SECONDARYATTACK_PRONE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_PRONE_RIFLE = 843"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE = 844"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE",
      "contents": "ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE = 845"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_BOLT",
      "contents": "ACT_DOD_PRIMARYATTACK_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_BOLT = 846"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_BOLT",
      "contents": "ACT_DOD_SECONDARYATTACK_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_BOLT = 847"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_BOLT",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_BOLT = 848"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_PRONE_BOLT",
      "contents": "ACT_DOD_SECONDARYATTACK_PRONE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_PRONE_BOLT = 849"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_TOMMY",
      "contents": "ACT_DOD_PRIMARYATTACK_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_TOMMY = 850"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_TOMMY",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_TOMMY = 851"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_TOMMY",
      "contents": "ACT_DOD_SECONDARYATTACK_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_TOMMY = 852"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_PRONE_TOMMY",
      "contents": "ACT_DOD_SECONDARYATTACK_PRONE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_PRONE_TOMMY = 853"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_MP40",
      "contents": "ACT_DOD_PRIMARYATTACK_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_MP40 = 854"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_MP40",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_MP40 = 855"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_MP40",
      "contents": "ACT_DOD_SECONDARYATTACK_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_MP40 = 856"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_PRONE_MP40",
      "contents": "ACT_DOD_SECONDARYATTACK_PRONE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_PRONE_MP40 = 857"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_MP44",
      "contents": "ACT_DOD_PRIMARYATTACK_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_MP44 = 858"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_MP44",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_MP44 = 859"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_GREASE",
      "contents": "ACT_DOD_PRIMARYATTACK_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_GREASE = 860"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_GREASE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_GREASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_GREASE = 861"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PISTOL",
      "contents": "ACT_DOD_PRIMARYATTACK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PISTOL = 862"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_PISTOL",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_PISTOL = 863"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_C96",
      "contents": "ACT_DOD_PRIMARYATTACK_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_C96 = 864"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_C96",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_C96 = 865"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_MG",
      "contents": "ACT_DOD_PRIMARYATTACK_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_MG = 866"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_MG",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_MG = 867"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG = 868"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_DEPLOYED_MG",
      "contents": "ACT_DOD_PRIMARYATTACK_DEPLOYED_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_DEPLOYED_MG = 869"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_30CAL",
      "contents": "ACT_DOD_PRIMARYATTACK_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_30CAL = 870"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_30CAL",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_30CAL = 871"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL",
      "contents": "ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL = 872"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL = 873"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_GREN_FRAG",
      "contents": "ACT_DOD_PRIMARYATTACK_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_GREN_FRAG = 874"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG = 875"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_GREN_STICK",
      "contents": "ACT_DOD_PRIMARYATTACK_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_GREN_STICK = 876"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK = 877"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_KNIFE",
      "contents": "ACT_DOD_PRIMARYATTACK_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_KNIFE = 878"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_KNIFE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_KNIFE = 879"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_SPADE",
      "contents": "ACT_DOD_PRIMARYATTACK_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_SPADE = 880"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_SPADE",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_SPADE = 881"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_BAZOOKA",
      "contents": "ACT_DOD_PRIMARYATTACK_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_BAZOOKA = 882"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA = 883"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PSCHRECK",
      "contents": "ACT_DOD_PRIMARYATTACK_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PSCHRECK = 884"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK = 885"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_BAR",
      "contents": "ACT_DOD_PRIMARYATTACK_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_BAR = 886"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_PRONE_BAR",
      "contents": "ACT_DOD_PRIMARYATTACK_PRONE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_PRONE_BAR = 887"
    },
    {
      "trigger": "ACT_DOD_RELOAD_GARAND",
      "contents": "ACT_DOD_RELOAD_GARAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_GARAND = 888"
    },
    {
      "trigger": "ACT_DOD_RELOAD_K43",
      "contents": "ACT_DOD_RELOAD_K43",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_K43 = 889"
    },
    {
      "trigger": "ACT_DOD_RELOAD_BAR",
      "contents": "ACT_DOD_RELOAD_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_BAR = 890"
    },
    {
      "trigger": "ACT_DOD_RELOAD_MP40",
      "contents": "ACT_DOD_RELOAD_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_MP40 = 891"
    },
    {
      "trigger": "ACT_DOD_RELOAD_MP44",
      "contents": "ACT_DOD_RELOAD_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_MP44 = 892"
    },
    {
      "trigger": "ACT_DOD_RELOAD_BOLT",
      "contents": "ACT_DOD_RELOAD_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_BOLT = 893"
    },
    {
      "trigger": "ACT_DOD_RELOAD_M1CARBINE",
      "contents": "ACT_DOD_RELOAD_M1CARBINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_M1CARBINE = 894"
    },
    {
      "trigger": "ACT_DOD_RELOAD_TOMMY",
      "contents": "ACT_DOD_RELOAD_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_TOMMY = 895"
    },
    {
      "trigger": "ACT_DOD_RELOAD_GREASEGUN",
      "contents": "ACT_DOD_RELOAD_GREASEGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_GREASEGUN = 896"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PISTOL",
      "contents": "ACT_DOD_RELOAD_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PISTOL = 897"
    },
    {
      "trigger": "ACT_DOD_RELOAD_FG42",
      "contents": "ACT_DOD_RELOAD_FG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_FG42 = 898"
    },
    {
      "trigger": "ACT_DOD_RELOAD_RIFLE",
      "contents": "ACT_DOD_RELOAD_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_RIFLE = 899"
    },
    {
      "trigger": "ACT_DOD_RELOAD_RIFLEGRENADE",
      "contents": "ACT_DOD_RELOAD_RIFLEGRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_RIFLEGRENADE = 900"
    },
    {
      "trigger": "ACT_DOD_RELOAD_C96",
      "contents": "ACT_DOD_RELOAD_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_C96 = 901"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_BAR",
      "contents": "ACT_DOD_RELOAD_CROUCH_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_BAR = 902"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_RIFLE",
      "contents": "ACT_DOD_RELOAD_CROUCH_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_RIFLE = 903"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE",
      "contents": "ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE = 904"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_BOLT",
      "contents": "ACT_DOD_RELOAD_CROUCH_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_BOLT = 905"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_MP44",
      "contents": "ACT_DOD_RELOAD_CROUCH_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_MP44 = 906"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_MP40",
      "contents": "ACT_DOD_RELOAD_CROUCH_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_MP40 = 907"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_TOMMY",
      "contents": "ACT_DOD_RELOAD_CROUCH_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_TOMMY = 908"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_BAZOOKA",
      "contents": "ACT_DOD_RELOAD_CROUCH_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_BAZOOKA = 909"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_PSCHRECK",
      "contents": "ACT_DOD_RELOAD_CROUCH_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_PSCHRECK = 910"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_PISTOL",
      "contents": "ACT_DOD_RELOAD_CROUCH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_PISTOL = 911"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_M1CARBINE",
      "contents": "ACT_DOD_RELOAD_CROUCH_M1CARBINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_M1CARBINE = 912"
    },
    {
      "trigger": "ACT_DOD_RELOAD_CROUCH_C96",
      "contents": "ACT_DOD_RELOAD_CROUCH_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_CROUCH_C96 = 913"
    },
    {
      "trigger": "ACT_DOD_RELOAD_BAZOOKA",
      "contents": "ACT_DOD_RELOAD_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_BAZOOKA = 914"
    },
    {
      "trigger": "ACT_DOD_ZOOMLOAD_BAZOOKA",
      "contents": "ACT_DOD_ZOOMLOAD_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_ZOOMLOAD_BAZOOKA = 915"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PSCHRECK",
      "contents": "ACT_DOD_RELOAD_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PSCHRECK = 916"
    },
    {
      "trigger": "ACT_DOD_ZOOMLOAD_PSCHRECK",
      "contents": "ACT_DOD_ZOOMLOAD_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_ZOOMLOAD_PSCHRECK = 917"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED_FG42",
      "contents": "ACT_DOD_RELOAD_DEPLOYED_FG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED_FG42 = 918"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED_30CAL",
      "contents": "ACT_DOD_RELOAD_DEPLOYED_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED_30CAL = 919"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED_MG",
      "contents": "ACT_DOD_RELOAD_DEPLOYED_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED_MG = 920"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED_MG34",
      "contents": "ACT_DOD_RELOAD_DEPLOYED_MG34",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED_MG34 = 921"
    },
    {
      "trigger": "ACT_DOD_RELOAD_DEPLOYED_BAR",
      "contents": "ACT_DOD_RELOAD_DEPLOYED_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_DEPLOYED_BAR = 922"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_PISTOL",
      "contents": "ACT_DOD_RELOAD_PRONE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_PISTOL = 923"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_GARAND",
      "contents": "ACT_DOD_RELOAD_PRONE_GARAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_GARAND = 924"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_M1CARBINE",
      "contents": "ACT_DOD_RELOAD_PRONE_M1CARBINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_M1CARBINE = 925"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_BOLT",
      "contents": "ACT_DOD_RELOAD_PRONE_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_BOLT = 926"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_K43",
      "contents": "ACT_DOD_RELOAD_PRONE_K43",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_K43 = 927"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_MP40",
      "contents": "ACT_DOD_RELOAD_PRONE_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_MP40 = 928"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_MP44",
      "contents": "ACT_DOD_RELOAD_PRONE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_MP44 = 929"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_BAR",
      "contents": "ACT_DOD_RELOAD_PRONE_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_BAR = 930"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_GREASEGUN",
      "contents": "ACT_DOD_RELOAD_PRONE_GREASEGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_GREASEGUN = 931"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_TOMMY",
      "contents": "ACT_DOD_RELOAD_PRONE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_TOMMY = 932"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_FG42",
      "contents": "ACT_DOD_RELOAD_PRONE_FG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_FG42 = 933"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_RIFLE",
      "contents": "ACT_DOD_RELOAD_PRONE_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_RIFLE = 934"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_RIFLEGRENADE",
      "contents": "ACT_DOD_RELOAD_PRONE_RIFLEGRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_RIFLEGRENADE = 935"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_C96",
      "contents": "ACT_DOD_RELOAD_PRONE_C96",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_C96 = 936"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_BAZOOKA",
      "contents": "ACT_DOD_RELOAD_PRONE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_BAZOOKA = 937"
    },
    {
      "trigger": "ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA",
      "contents": "ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA = 938"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_PSCHRECK",
      "contents": "ACT_DOD_RELOAD_PRONE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_PSCHRECK = 939"
    },
    {
      "trigger": "ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK",
      "contents": "ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK = 940"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR = 941"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42 = 942"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL = 943"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG = 944"
    },
    {
      "trigger": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34",
      "contents": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34 = 945"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE",
      "contents": "ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE = 946"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_FORWARD_BOLT",
      "contents": "ACT_DOD_PRONE_ZOOM_FORWARD_BOLT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_FORWARD_BOLT = 947"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA",
      "contents": "ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA = 948"
    },
    {
      "trigger": "ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK",
      "contents": "ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK = 949"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_CROUCH",
      "contents": "ACT_DOD_PRIMARYATTACK_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_CROUCH = 950"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_CROUCH_SPADE",
      "contents": "ACT_DOD_PRIMARYATTACK_CROUCH_SPADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_CROUCH_SPADE = 951"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE",
      "contents": "ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE = 952"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG",
      "contents": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG = 953"
    },
    {
      "trigger": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK",
      "contents": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK = 954"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_CROUCH",
      "contents": "ACT_DOD_SECONDARYATTACK_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_CROUCH = 955"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY",
      "contents": "ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY = 956"
    },
    {
      "trigger": "ACT_DOD_SECONDARYATTACK_CROUCH_MP40",
      "contents": "ACT_DOD_SECONDARYATTACK_CROUCH_MP40",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SECONDARYATTACK_CROUCH_MP40 = 957"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE",
      "contents": "ACT_DOD_HS_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE = 958"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH",
      "contents": "ACT_DOD_HS_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH = 959"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_30CAL",
      "contents": "ACT_DOD_HS_IDLE_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_30CAL = 960"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_BAZOOKA",
      "contents": "ACT_DOD_HS_IDLE_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_BAZOOKA = 961"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_PSCHRECK",
      "contents": "ACT_DOD_HS_IDLE_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_PSCHRECK = 962"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_KNIFE",
      "contents": "ACT_DOD_HS_IDLE_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_KNIFE = 963"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_MG42",
      "contents": "ACT_DOD_HS_IDLE_MG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_MG42 = 964"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_PISTOL",
      "contents": "ACT_DOD_HS_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_PISTOL = 965"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_STICKGRENADE",
      "contents": "ACT_DOD_HS_IDLE_STICKGRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_STICKGRENADE = 966"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_TOMMY",
      "contents": "ACT_DOD_HS_IDLE_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_TOMMY = 967"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_MP44",
      "contents": "ACT_DOD_HS_IDLE_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_MP44 = 968"
    },
    {
      "trigger": "ACT_DOD_HS_IDLE_K98",
      "contents": "ACT_DOD_HS_IDLE_K98",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_IDLE_K98 = 969"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_30CAL",
      "contents": "ACT_DOD_HS_CROUCH_30CAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_30CAL = 970"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_BAZOOKA",
      "contents": "ACT_DOD_HS_CROUCH_BAZOOKA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_BAZOOKA = 971"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_PSCHRECK",
      "contents": "ACT_DOD_HS_CROUCH_PSCHRECK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_PSCHRECK = 972"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_KNIFE",
      "contents": "ACT_DOD_HS_CROUCH_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_KNIFE = 973"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_MG42",
      "contents": "ACT_DOD_HS_CROUCH_MG42",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_MG42 = 974"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_PISTOL",
      "contents": "ACT_DOD_HS_CROUCH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_PISTOL = 975"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_STICKGRENADE",
      "contents": "ACT_DOD_HS_CROUCH_STICKGRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_STICKGRENADE = 976"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_TOMMY",
      "contents": "ACT_DOD_HS_CROUCH_TOMMY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_TOMMY = 977"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_MP44",
      "contents": "ACT_DOD_HS_CROUCH_MP44",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_MP44 = 978"
    },
    {
      "trigger": "ACT_DOD_HS_CROUCH_K98",
      "contents": "ACT_DOD_HS_CROUCH_K98",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_HS_CROUCH_K98 = 979"
    },
    {
      "trigger": "ACT_DOD_STAND_IDLE_TNT",
      "contents": "ACT_DOD_STAND_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_STAND_IDLE_TNT = 980"
    },
    {
      "trigger": "ACT_DOD_CROUCH_IDLE_TNT",
      "contents": "ACT_DOD_CROUCH_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCH_IDLE_TNT = 981"
    },
    {
      "trigger": "ACT_DOD_CROUCHWALK_IDLE_TNT",
      "contents": "ACT_DOD_CROUCHWALK_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_CROUCHWALK_IDLE_TNT = 982"
    },
    {
      "trigger": "ACT_DOD_WALK_IDLE_TNT",
      "contents": "ACT_DOD_WALK_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_WALK_IDLE_TNT = 983"
    },
    {
      "trigger": "ACT_DOD_RUN_IDLE_TNT",
      "contents": "ACT_DOD_RUN_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_RUN_IDLE_TNT = 984"
    },
    {
      "trigger": "ACT_DOD_SPRINT_IDLE_TNT",
      "contents": "ACT_DOD_SPRINT_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_SPRINT_IDLE_TNT = 985"
    },
    {
      "trigger": "ACT_DOD_PRONEWALK_IDLE_TNT",
      "contents": "ACT_DOD_PRONEWALK_IDLE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PRONEWALK_IDLE_TNT = 986"
    },
    {
      "trigger": "ACT_DOD_PLANT_TNT",
      "contents": "ACT_DOD_PLANT_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_PLANT_TNT = 987"
    },
    {
      "trigger": "ACT_DOD_DEFUSE_TNT",
      "contents": "ACT_DOD_DEFUSE_TNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DOD_DEFUSE_TNT = 988"
    },
    {
      "trigger": "ACT_VM_FIZZLE",
      "contents": "ACT_VM_FIZZLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_FIZZLE = 989"
    },
    {
      "trigger": "ACT_MP_STAND_IDLE",
      "contents": "ACT_MP_STAND_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_IDLE = 990"
    },
    {
      "trigger": "ACT_MP_CROUCH_IDLE",
      "contents": "ACT_MP_CROUCH_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_IDLE = 991"
    },
    {
      "trigger": "ACT_MP_CROUCH_DEPLOYED_IDLE",
      "contents": "ACT_MP_CROUCH_DEPLOYED_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_DEPLOYED_IDLE = 992"
    },
    {
      "trigger": "ACT_MP_CROUCH_DEPLOYED",
      "contents": "ACT_MP_CROUCH_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_DEPLOYED = 993"
    },
    {
      "trigger": "ACT_MP_DEPLOYED_IDLE",
      "contents": "ACT_MP_DEPLOYED_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_DEPLOYED_IDLE = 995"
    },
    {
      "trigger": "ACT_MP_RUN",
      "contents": "ACT_MP_RUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN = 996"
    },
    {
      "trigger": "ACT_MP_WALK",
      "contents": "ACT_MP_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK = 997"
    },
    {
      "trigger": "ACT_MP_AIRWALK",
      "contents": "ACT_MP_AIRWALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK = 998"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK",
      "contents": "ACT_MP_CROUCHWALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK = 999"
    },
    {
      "trigger": "ACT_MP_SPRINT",
      "contents": "ACT_MP_SPRINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SPRINT = 1000"
    },
    {
      "trigger": "ACT_MP_JUMP",
      "contents": "ACT_MP_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP = 1001"
    },
    {
      "trigger": "ACT_MP_JUMP_START",
      "contents": "ACT_MP_JUMP_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START = 1002"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT",
      "contents": "ACT_MP_JUMP_FLOAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT = 1003"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND",
      "contents": "ACT_MP_JUMP_LAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND = 1004"
    },
    {
      "trigger": "ACT_MP_DOUBLEJUMP",
      "contents": "ACT_MP_DOUBLEJUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_DOUBLEJUMP = 1005"
    },
    {
      "trigger": "ACT_MP_SWIM",
      "contents": "ACT_MP_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM = 1006"
    },
    {
      "trigger": "ACT_MP_DEPLOYED",
      "contents": "ACT_MP_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_DEPLOYED = 1007"
    },
    {
      "trigger": "ACT_MP_SWIM_DEPLOYED",
      "contents": "ACT_MP_SWIM_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_DEPLOYED = 1008"
    },
    {
      "trigger": "ACT_MP_VCD",
      "contents": "ACT_MP_VCD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_VCD = 1009"
    },
    {
      "trigger": "ACT_MP_SWIM_IDLE",
      "contents": "ACT_MP_SWIM_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_IDLE = 1010"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PRIMARYFIRE",
      "contents": "ACT_MP_ATTACK_STAND_PRIMARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PRIMARYFIRE = 1011"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED",
      "contents": "ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED = 1012"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_SECONDARYFIRE",
      "contents": "ACT_MP_ATTACK_STAND_SECONDARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_SECONDARYFIRE = 1013"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_GRENADE",
      "contents": "ACT_MP_ATTACK_STAND_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_GRENADE = 1014"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE",
      "contents": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE = 1015"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED",
      "contents": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED = 1016"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_SECONDARYFIRE",
      "contents": "ACT_MP_ATTACK_CROUCH_SECONDARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_SECONDARYFIRE = 1017"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_GRENADE",
      "contents": "ACT_MP_ATTACK_CROUCH_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_GRENADE = 1018"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_PRIMARYFIRE",
      "contents": "ACT_MP_ATTACK_SWIM_PRIMARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_PRIMARYFIRE = 1019"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_SECONDARYFIRE",
      "contents": "ACT_MP_ATTACK_SWIM_SECONDARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_SECONDARYFIRE = 1020"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_GRENADE",
      "contents": "ACT_MP_ATTACK_SWIM_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_GRENADE = 1021"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE",
      "contents": "ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE = 1022"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE",
      "contents": "ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE = 1023"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_GRENADE",
      "contents": "ACT_MP_ATTACK_AIRWALK_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_GRENADE = 1024"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND",
      "contents": "ACT_MP_RELOAD_STAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND = 1025"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_LOOP",
      "contents": "ACT_MP_RELOAD_STAND_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_LOOP = 1026"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_END",
      "contents": "ACT_MP_RELOAD_STAND_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_END = 1027"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH",
      "contents": "ACT_MP_RELOAD_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH = 1028"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_LOOP",
      "contents": "ACT_MP_RELOAD_CROUCH_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_LOOP = 1029"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_END",
      "contents": "ACT_MP_RELOAD_CROUCH_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_END = 1030"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM",
      "contents": "ACT_MP_RELOAD_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM = 1031"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_LOOP",
      "contents": "ACT_MP_RELOAD_SWIM_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_LOOP = 1032"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_END",
      "contents": "ACT_MP_RELOAD_SWIM_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_END = 1033"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK",
      "contents": "ACT_MP_RELOAD_AIRWALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK = 1034"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_LOOP",
      "contents": "ACT_MP_RELOAD_AIRWALK_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_LOOP = 1035"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_END",
      "contents": "ACT_MP_RELOAD_AIRWALK_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_END = 1036"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PREFIRE",
      "contents": "ACT_MP_ATTACK_STAND_PREFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PREFIRE = 1037"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_POSTFIRE",
      "contents": "ACT_MP_ATTACK_STAND_POSTFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_POSTFIRE = 1038"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_STARTFIRE",
      "contents": "ACT_MP_ATTACK_STAND_STARTFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_STARTFIRE = 1039"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_PREFIRE",
      "contents": "ACT_MP_ATTACK_CROUCH_PREFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_PREFIRE = 1040"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_POSTFIRE",
      "contents": "ACT_MP_ATTACK_CROUCH_POSTFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_POSTFIRE = 1041"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_PREFIRE",
      "contents": "ACT_MP_ATTACK_SWIM_PREFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_PREFIRE = 1042"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_POSTFIRE",
      "contents": "ACT_MP_ATTACK_SWIM_POSTFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_POSTFIRE = 1043"
    },
    {
      "trigger": "ACT_MP_STAND_PRIMARY",
      "contents": "ACT_MP_STAND_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_PRIMARY = 1044"
    },
    {
      "trigger": "ACT_MP_CROUCH_PRIMARY",
      "contents": "ACT_MP_CROUCH_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_PRIMARY = 1045"
    },
    {
      "trigger": "ACT_MP_RUN_PRIMARY",
      "contents": "ACT_MP_RUN_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN_PRIMARY = 1046"
    },
    {
      "trigger": "ACT_MP_WALK_PRIMARY",
      "contents": "ACT_MP_WALK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK_PRIMARY = 1047"
    },
    {
      "trigger": "ACT_MP_AIRWALK_PRIMARY",
      "contents": "ACT_MP_AIRWALK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK_PRIMARY = 1048"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK_PRIMARY",
      "contents": "ACT_MP_CROUCHWALK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK_PRIMARY = 1049"
    },
    {
      "trigger": "ACT_MP_JUMP_PRIMARY",
      "contents": "ACT_MP_JUMP_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_PRIMARY = 1050"
    },
    {
      "trigger": "ACT_MP_JUMP_START_PRIMARY",
      "contents": "ACT_MP_JUMP_START_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START_PRIMARY = 1051"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT_PRIMARY",
      "contents": "ACT_MP_JUMP_FLOAT_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT_PRIMARY = 1052"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND_PRIMARY",
      "contents": "ACT_MP_JUMP_LAND_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND_PRIMARY = 1053"
    },
    {
      "trigger": "ACT_MP_SWIM_PRIMARY",
      "contents": "ACT_MP_SWIM_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_PRIMARY = 1054"
    },
    {
      "trigger": "ACT_MP_DEPLOYED_PRIMARY",
      "contents": "ACT_MP_DEPLOYED_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_DEPLOYED_PRIMARY = 1055"
    },
    {
      "trigger": "ACT_MP_SWIM_DEPLOYED_PRIMARY",
      "contents": "ACT_MP_SWIM_DEPLOYED_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_DEPLOYED_PRIMARY = 1056"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PRIMARY",
      "contents": "ACT_MP_ATTACK_STAND_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PRIMARY = 1059"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED",
      "contents": "ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED = 1060"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_PRIMARY",
      "contents": "ACT_MP_ATTACK_CROUCH_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_PRIMARY = 1061"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED",
      "contents": "ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED = 1062"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_PRIMARY",
      "contents": "ACT_MP_ATTACK_SWIM_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_PRIMARY = 1063"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_PRIMARY",
      "contents": "ACT_MP_ATTACK_AIRWALK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_PRIMARY = 1064"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_PRIMARY",
      "contents": "ACT_MP_RELOAD_STAND_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_PRIMARY = 1065"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_PRIMARY_LOOP",
      "contents": "ACT_MP_RELOAD_STAND_PRIMARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_PRIMARY_LOOP = 1066"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_PRIMARY_END",
      "contents": "ACT_MP_RELOAD_STAND_PRIMARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_PRIMARY_END = 1067"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_PRIMARY",
      "contents": "ACT_MP_RELOAD_CROUCH_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_PRIMARY = 1068"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP",
      "contents": "ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP = 1069"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_PRIMARY_END",
      "contents": "ACT_MP_RELOAD_CROUCH_PRIMARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_PRIMARY_END = 1070"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_PRIMARY",
      "contents": "ACT_MP_RELOAD_SWIM_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_PRIMARY = 1071"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_PRIMARY_LOOP",
      "contents": "ACT_MP_RELOAD_SWIM_PRIMARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_PRIMARY_LOOP = 1072"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_PRIMARY_END",
      "contents": "ACT_MP_RELOAD_SWIM_PRIMARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_PRIMARY_END = 1073"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_PRIMARY",
      "contents": "ACT_MP_RELOAD_AIRWALK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_PRIMARY = 1074"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP",
      "contents": "ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP = 1075"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_PRIMARY_END",
      "contents": "ACT_MP_RELOAD_AIRWALK_PRIMARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_PRIMARY_END = 1076"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_GRENADE_PRIMARY",
      "contents": "ACT_MP_ATTACK_STAND_GRENADE_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_GRENADE_PRIMARY = 1105"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY",
      "contents": "ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY = 1106"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY",
      "contents": "ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY = 1107"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY",
      "contents": "ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY = 1108"
    },
    {
      "trigger": "ACT_MP_STAND_SECONDARY",
      "contents": "ACT_MP_STAND_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_SECONDARY = 1109"
    },
    {
      "trigger": "ACT_MP_CROUCH_SECONDARY",
      "contents": "ACT_MP_CROUCH_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_SECONDARY = 1110"
    },
    {
      "trigger": "ACT_MP_RUN_SECONDARY",
      "contents": "ACT_MP_RUN_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN_SECONDARY = 1111"
    },
    {
      "trigger": "ACT_MP_WALK_SECONDARY",
      "contents": "ACT_MP_WALK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK_SECONDARY = 1112"
    },
    {
      "trigger": "ACT_MP_AIRWALK_SECONDARY",
      "contents": "ACT_MP_AIRWALK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK_SECONDARY = 1113"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK_SECONDARY",
      "contents": "ACT_MP_CROUCHWALK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK_SECONDARY = 1114"
    },
    {
      "trigger": "ACT_MP_JUMP_SECONDARY",
      "contents": "ACT_MP_JUMP_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_SECONDARY = 1115"
    },
    {
      "trigger": "ACT_MP_JUMP_START_SECONDARY",
      "contents": "ACT_MP_JUMP_START_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START_SECONDARY = 1116"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT_SECONDARY",
      "contents": "ACT_MP_JUMP_FLOAT_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT_SECONDARY = 1117"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND_SECONDARY",
      "contents": "ACT_MP_JUMP_LAND_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND_SECONDARY = 1118"
    },
    {
      "trigger": "ACT_MP_SWIM_SECONDARY",
      "contents": "ACT_MP_SWIM_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_SECONDARY = 1119"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_SECONDARY",
      "contents": "ACT_MP_ATTACK_STAND_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_SECONDARY = 1120"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_SECONDARY",
      "contents": "ACT_MP_ATTACK_CROUCH_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_SECONDARY = 1121"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_SECONDARY",
      "contents": "ACT_MP_ATTACK_SWIM_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_SECONDARY = 1122"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_SECONDARY",
      "contents": "ACT_MP_ATTACK_AIRWALK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_SECONDARY = 1123"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_SECONDARY",
      "contents": "ACT_MP_RELOAD_STAND_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_SECONDARY = 1124"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_SECONDARY_LOOP",
      "contents": "ACT_MP_RELOAD_STAND_SECONDARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_SECONDARY_LOOP = 1125"
    },
    {
      "trigger": "ACT_MP_RELOAD_STAND_SECONDARY_END",
      "contents": "ACT_MP_RELOAD_STAND_SECONDARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_STAND_SECONDARY_END = 1126"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_SECONDARY",
      "contents": "ACT_MP_RELOAD_CROUCH_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_SECONDARY = 1127"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP",
      "contents": "ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP = 1128"
    },
    {
      "trigger": "ACT_MP_RELOAD_CROUCH_SECONDARY_END",
      "contents": "ACT_MP_RELOAD_CROUCH_SECONDARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_CROUCH_SECONDARY_END = 1129"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_SECONDARY",
      "contents": "ACT_MP_RELOAD_SWIM_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_SECONDARY = 1130"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_SECONDARY_LOOP",
      "contents": "ACT_MP_RELOAD_SWIM_SECONDARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_SECONDARY_LOOP = 1131"
    },
    {
      "trigger": "ACT_MP_RELOAD_SWIM_SECONDARY_END",
      "contents": "ACT_MP_RELOAD_SWIM_SECONDARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_SWIM_SECONDARY_END = 1132"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_SECONDARY",
      "contents": "ACT_MP_RELOAD_AIRWALK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_SECONDARY = 1133"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP",
      "contents": "ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP = 1134"
    },
    {
      "trigger": "ACT_MP_RELOAD_AIRWALK_SECONDARY_END",
      "contents": "ACT_MP_RELOAD_AIRWALK_SECONDARY_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RELOAD_AIRWALK_SECONDARY_END = 1135"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_GRENADE_SECONDARY",
      "contents": "ACT_MP_ATTACK_STAND_GRENADE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_GRENADE_SECONDARY = 1140"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY",
      "contents": "ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY = 1141"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY",
      "contents": "ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY = 1142"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY",
      "contents": "ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY = 1143"
    },
    {
      "trigger": "ACT_MP_STAND_MELEE",
      "contents": "ACT_MP_STAND_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_MELEE = 1171"
    },
    {
      "trigger": "ACT_MP_CROUCH_MELEE",
      "contents": "ACT_MP_CROUCH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_MELEE = 1172"
    },
    {
      "trigger": "ACT_MP_RUN_MELEE",
      "contents": "ACT_MP_RUN_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN_MELEE = 1173"
    },
    {
      "trigger": "ACT_MP_WALK_MELEE",
      "contents": "ACT_MP_WALK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK_MELEE = 1174"
    },
    {
      "trigger": "ACT_MP_AIRWALK_MELEE",
      "contents": "ACT_MP_AIRWALK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK_MELEE = 1175"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK_MELEE",
      "contents": "ACT_MP_CROUCHWALK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK_MELEE = 1176"
    },
    {
      "trigger": "ACT_MP_JUMP_MELEE",
      "contents": "ACT_MP_JUMP_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_MELEE = 1177"
    },
    {
      "trigger": "ACT_MP_JUMP_START_MELEE",
      "contents": "ACT_MP_JUMP_START_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START_MELEE = 1178"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT_MELEE",
      "contents": "ACT_MP_JUMP_FLOAT_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT_MELEE = 1179"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND_MELEE",
      "contents": "ACT_MP_JUMP_LAND_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND_MELEE = 1180"
    },
    {
      "trigger": "ACT_MP_SWIM_MELEE",
      "contents": "ACT_MP_SWIM_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_MELEE = 1181"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_MELEE",
      "contents": "ACT_MP_ATTACK_STAND_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_MELEE = 1182"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_MELEE_SECONDARY",
      "contents": "ACT_MP_ATTACK_STAND_MELEE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_MELEE_SECONDARY = 1183"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_MELEE",
      "contents": "ACT_MP_ATTACK_CROUCH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_MELEE = 1184"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY",
      "contents": "ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY = 1185"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_MELEE",
      "contents": "ACT_MP_ATTACK_SWIM_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_MELEE = 1186"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_MELEE",
      "contents": "ACT_MP_ATTACK_AIRWALK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_MELEE = 1187"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_GRENADE_MELEE",
      "contents": "ACT_MP_ATTACK_STAND_GRENADE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_GRENADE_MELEE = 1188"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_GRENADE_MELEE",
      "contents": "ACT_MP_ATTACK_CROUCH_GRENADE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_GRENADE_MELEE = 1189"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_GRENADE_MELEE",
      "contents": "ACT_MP_ATTACK_SWIM_GRENADE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_GRENADE_MELEE = 1190"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE",
      "contents": "ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE = 1191"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH",
      "contents": "ACT_MP_GESTURE_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH = 1258"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_PRIMARY",
      "contents": "ACT_MP_GESTURE_FLINCH_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_PRIMARY = 1259"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_SECONDARY",
      "contents": "ACT_MP_GESTURE_FLINCH_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_SECONDARY = 1260"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_MELEE",
      "contents": "ACT_MP_GESTURE_FLINCH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_MELEE = 1261"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_HEAD",
      "contents": "ACT_MP_GESTURE_FLINCH_HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_HEAD = 1264"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_CHEST",
      "contents": "ACT_MP_GESTURE_FLINCH_CHEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_CHEST = 1265"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_STOMACH",
      "contents": "ACT_MP_GESTURE_FLINCH_STOMACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_STOMACH = 1266"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_LEFTARM",
      "contents": "ACT_MP_GESTURE_FLINCH_LEFTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_LEFTARM = 1267"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_RIGHTARM",
      "contents": "ACT_MP_GESTURE_FLINCH_RIGHTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_RIGHTARM = 1268"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_LEFTLEG",
      "contents": "ACT_MP_GESTURE_FLINCH_LEFTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_LEFTLEG = 1269"
    },
    {
      "trigger": "ACT_MP_GESTURE_FLINCH_RIGHTLEG",
      "contents": "ACT_MP_GESTURE_FLINCH_RIGHTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_FLINCH_RIGHTLEG = 1270"
    },
    {
      "trigger": "ACT_MP_GRENADE1_DRAW",
      "contents": "ACT_MP_GRENADE1_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE1_DRAW = 1271"
    },
    {
      "trigger": "ACT_MP_GRENADE1_IDLE",
      "contents": "ACT_MP_GRENADE1_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE1_IDLE = 1272"
    },
    {
      "trigger": "ACT_MP_GRENADE1_ATTACK",
      "contents": "ACT_MP_GRENADE1_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE1_ATTACK = 1273"
    },
    {
      "trigger": "ACT_MP_GRENADE2_DRAW",
      "contents": "ACT_MP_GRENADE2_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE2_DRAW = 1274"
    },
    {
      "trigger": "ACT_MP_GRENADE2_IDLE",
      "contents": "ACT_MP_GRENADE2_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE2_IDLE = 1275"
    },
    {
      "trigger": "ACT_MP_GRENADE2_ATTACK",
      "contents": "ACT_MP_GRENADE2_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GRENADE2_ATTACK = 1276"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE1_DRAW",
      "contents": "ACT_MP_PRIMARY_GRENADE1_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE1_DRAW = 1277"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE1_IDLE",
      "contents": "ACT_MP_PRIMARY_GRENADE1_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE1_IDLE = 1278"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE1_ATTACK",
      "contents": "ACT_MP_PRIMARY_GRENADE1_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE1_ATTACK = 1279"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE2_DRAW",
      "contents": "ACT_MP_PRIMARY_GRENADE2_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE2_DRAW = 1280"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE2_IDLE",
      "contents": "ACT_MP_PRIMARY_GRENADE2_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE2_IDLE = 1281"
    },
    {
      "trigger": "ACT_MP_PRIMARY_GRENADE2_ATTACK",
      "contents": "ACT_MP_PRIMARY_GRENADE2_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_PRIMARY_GRENADE2_ATTACK = 1282"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE1_DRAW",
      "contents": "ACT_MP_SECONDARY_GRENADE1_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE1_DRAW = 1283"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE1_IDLE",
      "contents": "ACT_MP_SECONDARY_GRENADE1_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE1_IDLE = 1284"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE1_ATTACK",
      "contents": "ACT_MP_SECONDARY_GRENADE1_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE1_ATTACK = 1285"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE2_DRAW",
      "contents": "ACT_MP_SECONDARY_GRENADE2_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE2_DRAW = 1286"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE2_IDLE",
      "contents": "ACT_MP_SECONDARY_GRENADE2_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE2_IDLE = 1287"
    },
    {
      "trigger": "ACT_MP_SECONDARY_GRENADE2_ATTACK",
      "contents": "ACT_MP_SECONDARY_GRENADE2_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SECONDARY_GRENADE2_ATTACK = 1288"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE1_DRAW",
      "contents": "ACT_MP_MELEE_GRENADE1_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE1_DRAW = 1289"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE1_IDLE",
      "contents": "ACT_MP_MELEE_GRENADE1_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE1_IDLE = 1290"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE1_ATTACK",
      "contents": "ACT_MP_MELEE_GRENADE1_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE1_ATTACK = 1291"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE2_DRAW",
      "contents": "ACT_MP_MELEE_GRENADE2_DRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE2_DRAW = 1292"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE2_IDLE",
      "contents": "ACT_MP_MELEE_GRENADE2_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE2_IDLE = 1293"
    },
    {
      "trigger": "ACT_MP_MELEE_GRENADE2_ATTACK",
      "contents": "ACT_MP_MELEE_GRENADE2_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_MELEE_GRENADE2_ATTACK = 1294"
    },
    {
      "trigger": "ACT_MP_STAND_BUILDING",
      "contents": "ACT_MP_STAND_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_BUILDING = 1307"
    },
    {
      "trigger": "ACT_MP_CROUCH_BUILDING",
      "contents": "ACT_MP_CROUCH_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_BUILDING = 1308"
    },
    {
      "trigger": "ACT_MP_RUN_BUILDING",
      "contents": "ACT_MP_RUN_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN_BUILDING = 1309"
    },
    {
      "trigger": "ACT_MP_WALK_BUILDING",
      "contents": "ACT_MP_WALK_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK_BUILDING = 1310"
    },
    {
      "trigger": "ACT_MP_AIRWALK_BUILDING",
      "contents": "ACT_MP_AIRWALK_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK_BUILDING = 1311"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK_BUILDING",
      "contents": "ACT_MP_CROUCHWALK_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK_BUILDING = 1312"
    },
    {
      "trigger": "ACT_MP_JUMP_BUILDING",
      "contents": "ACT_MP_JUMP_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_BUILDING = 1313"
    },
    {
      "trigger": "ACT_MP_JUMP_START_BUILDING",
      "contents": "ACT_MP_JUMP_START_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START_BUILDING = 1314"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT_BUILDING",
      "contents": "ACT_MP_JUMP_FLOAT_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT_BUILDING = 1315"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND_BUILDING",
      "contents": "ACT_MP_JUMP_LAND_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND_BUILDING = 1316"
    },
    {
      "trigger": "ACT_MP_SWIM_BUILDING",
      "contents": "ACT_MP_SWIM_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_BUILDING = 1317"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_BUILDING",
      "contents": "ACT_MP_ATTACK_STAND_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_BUILDING = 1318"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_BUILDING",
      "contents": "ACT_MP_ATTACK_CROUCH_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_BUILDING = 1319"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_BUILDING",
      "contents": "ACT_MP_ATTACK_SWIM_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_BUILDING = 1320"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_BUILDING",
      "contents": "ACT_MP_ATTACK_AIRWALK_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_BUILDING = 1321"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_GRENADE_BUILDING",
      "contents": "ACT_MP_ATTACK_STAND_GRENADE_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_GRENADE_BUILDING = 1322"
    },
    {
      "trigger": "ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING",
      "contents": "ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING = 1323"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_GRENADE_BUILDING",
      "contents": "ACT_MP_ATTACK_SWIM_GRENADE_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_GRENADE_BUILDING = 1324"
    },
    {
      "trigger": "ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING",
      "contents": "ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING = 1325"
    },
    {
      "trigger": "ACT_MP_STAND_PDA",
      "contents": "ACT_MP_STAND_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_STAND_PDA = 1345"
    },
    {
      "trigger": "ACT_MP_CROUCH_PDA",
      "contents": "ACT_MP_CROUCH_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCH_PDA = 1346"
    },
    {
      "trigger": "ACT_MP_RUN_PDA",
      "contents": "ACT_MP_RUN_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_RUN_PDA = 1347"
    },
    {
      "trigger": "ACT_MP_WALK_PDA",
      "contents": "ACT_MP_WALK_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_WALK_PDA = 1348"
    },
    {
      "trigger": "ACT_MP_AIRWALK_PDA",
      "contents": "ACT_MP_AIRWALK_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_AIRWALK_PDA = 1349"
    },
    {
      "trigger": "ACT_MP_CROUCHWALK_PDA",
      "contents": "ACT_MP_CROUCHWALK_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_CROUCHWALK_PDA = 1350"
    },
    {
      "trigger": "ACT_MP_JUMP_PDA",
      "contents": "ACT_MP_JUMP_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_PDA = 1351"
    },
    {
      "trigger": "ACT_MP_JUMP_START_PDA",
      "contents": "ACT_MP_JUMP_START_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_START_PDA = 1352"
    },
    {
      "trigger": "ACT_MP_JUMP_FLOAT_PDA",
      "contents": "ACT_MP_JUMP_FLOAT_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_FLOAT_PDA = 1353"
    },
    {
      "trigger": "ACT_MP_JUMP_LAND_PDA",
      "contents": "ACT_MP_JUMP_LAND_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_JUMP_LAND_PDA = 1354"
    },
    {
      "trigger": "ACT_MP_SWIM_PDA",
      "contents": "ACT_MP_SWIM_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_SWIM_PDA = 1355"
    },
    {
      "trigger": "ACT_MP_ATTACK_STAND_PDA",
      "contents": "ACT_MP_ATTACK_STAND_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_STAND_PDA = 1356"
    },
    {
      "trigger": "ACT_MP_ATTACK_SWIM_PDA",
      "contents": "ACT_MP_ATTACK_SWIM_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_ATTACK_SWIM_PDA = 1357"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH = 1377"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT = 1378"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP = 1379"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP = 1380"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES",
      "contents": "ACT_MP_GESTURE_VC_NODYES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES = 1381"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO",
      "contents": "ACT_MP_GESTURE_VC_NODNO",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO = 1382"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY = 1383"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY = 1384"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY = 1385"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY = 1386"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_NODYES_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES_PRIMARY = 1387"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO_PRIMARY",
      "contents": "ACT_MP_GESTURE_VC_NODNO_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO_PRIMARY = 1388"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY = 1389"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY = 1390"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY = 1391"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY = 1392"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_NODYES_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES_SECONDARY = 1393"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO_SECONDARY",
      "contents": "ACT_MP_GESTURE_VC_NODNO_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO_SECONDARY = 1394"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH_MELEE",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH_MELEE = 1395"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT_MELEE",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT_MELEE = 1396"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP_MELEE",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP_MELEE = 1397"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP_MELEE",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP_MELEE = 1398"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES_MELEE",
      "contents": "ACT_MP_GESTURE_VC_NODYES_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES_MELEE = 1399"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO_MELEE",
      "contents": "ACT_MP_GESTURE_VC_NODNO_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO_MELEE = 1400"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING = 1413"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING = 1414"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP_BUILDING = 1415"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP_BUILDING = 1416"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_NODYES_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES_BUILDING = 1417"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO_BUILDING",
      "contents": "ACT_MP_GESTURE_VC_NODNO_BUILDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO_BUILDING = 1418"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_HANDMOUTH_PDA",
      "contents": "ACT_MP_GESTURE_VC_HANDMOUTH_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_HANDMOUTH_PDA = 1419"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FINGERPOINT_PDA",
      "contents": "ACT_MP_GESTURE_VC_FINGERPOINT_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FINGERPOINT_PDA = 1420"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_FISTPUMP_PDA",
      "contents": "ACT_MP_GESTURE_VC_FISTPUMP_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_FISTPUMP_PDA = 1421"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_THUMBSUP_PDA",
      "contents": "ACT_MP_GESTURE_VC_THUMBSUP_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_THUMBSUP_PDA = 1422"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODYES_PDA",
      "contents": "ACT_MP_GESTURE_VC_NODYES_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODYES_PDA = 1423"
    },
    {
      "trigger": "ACT_MP_GESTURE_VC_NODNO_PDA",
      "contents": "ACT_MP_GESTURE_VC_NODNO_PDA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_MP_GESTURE_VC_NODNO_PDA = 1424"
    },
    {
      "trigger": "ACT_VM_UNUSABLE",
      "contents": "ACT_VM_UNUSABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNUSABLE = 1428"
    },
    {
      "trigger": "ACT_VM_UNUSABLE_TO_USABLE",
      "contents": "ACT_VM_UNUSABLE_TO_USABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNUSABLE_TO_USABLE = 1429"
    },
    {
      "trigger": "ACT_VM_USABLE_TO_UNUSABLE",
      "contents": "ACT_VM_USABLE_TO_UNUSABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_USABLE_TO_UNUSABLE = 1430"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_AGREE",
      "contents": "ACT_GMOD_GESTURE_AGREE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_AGREE = 1610"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_BECON",
      "contents": "ACT_GMOD_GESTURE_BECON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_BECON = 1611"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_BOW",
      "contents": "ACT_GMOD_GESTURE_BOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_BOW = 1612"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_DISAGREE",
      "contents": "ACT_GMOD_GESTURE_DISAGREE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_DISAGREE = 1613"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_SALUTE",
      "contents": "ACT_GMOD_TAUNT_SALUTE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_SALUTE = 1614"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_WAVE",
      "contents": "ACT_GMOD_GESTURE_WAVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_WAVE = 1615"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_PERSISTENCE",
      "contents": "ACT_GMOD_TAUNT_PERSISTENCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_PERSISTENCE = 1616"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_MUSCLE",
      "contents": "ACT_GMOD_TAUNT_MUSCLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_MUSCLE = 1617"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_LAUGH",
      "contents": "ACT_GMOD_TAUNT_LAUGH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_LAUGH = 1618"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_POINT",
      "contents": "ACT_GMOD_GESTURE_POINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_POINT = 1619"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_CHEER",
      "contents": "ACT_GMOD_TAUNT_CHEER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_CHEER = 1620"
    },
    {
      "trigger": "ACT_HL2MP_RUN_FAST",
      "contents": "ACT_HL2MP_RUN_FAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_FAST = 1621"
    },
    {
      "trigger": "ACT_HL2MP_RUN_CHARGING",
      "contents": "ACT_HL2MP_RUN_CHARGING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_CHARGING = 1622"
    },
    {
      "trigger": "ACT_HL2MP_RUN_PANICKED",
      "contents": "ACT_HL2MP_RUN_PANICKED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_PANICKED = 1623"
    },
    {
      "trigger": "ACT_HL2MP_RUN_PROTECTED",
      "contents": "ACT_HL2MP_RUN_PROTECTED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_PROTECTED = 1624"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_MELEE_ANGRY",
      "contents": "ACT_HL2MP_IDLE_MELEE_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_MELEE_ANGRY = 1625"
    },
    {
      "trigger": "ACT_HL2MP_ZOMBIE_SLUMP_IDLE",
      "contents": "ACT_HL2MP_ZOMBIE_SLUMP_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_ZOMBIE_SLUMP_IDLE = 1626"
    },
    {
      "trigger": "ACT_HL2MP_ZOMBIE_SLUMP_RISE",
      "contents": "ACT_HL2MP_ZOMBIE_SLUMP_RISE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_ZOMBIE_SLUMP_RISE = 1627"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_01",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_01",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_01 = 1628"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_02",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_02",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_02 = 1629"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_03",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_03",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_03 = 1630"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_04",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_04",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_04 = 1631"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_05",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_05",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_05 = 1632"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_01",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_01",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = 1633"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_02",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_02",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_02 = 1634"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_03",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_03",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_03 = 1635"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_04",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_04",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_04 = 1636"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_05",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_05",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE_05 = 1637"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01",
      "contents": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01 = 1638"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02",
      "contents": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02 = 1639"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_RANGE_ZOMBIE",
      "contents": "ACT_GMOD_GESTURE_RANGE_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_RANGE_ZOMBIE = 1640"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_TAUNT_ZOMBIE",
      "contents": "ACT_GMOD_GESTURE_TAUNT_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_TAUNT_ZOMBIE = 1641"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_DANCE",
      "contents": "ACT_GMOD_TAUNT_DANCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_DANCE = 1642"
    },
    {
      "trigger": "ACT_GMOD_TAUNT_ROBOT",
      "contents": "ACT_GMOD_TAUNT_ROBOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_TAUNT_ROBOT = 1643"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL",
      "contents": "ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL = 1644"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_RANGE_FRENZY",
      "contents": "ACT_GMOD_GESTURE_RANGE_FRENZY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_RANGE_FRENZY = 1645"
    },
    {
      "trigger": "ACT_HL2MP_RUN_ZOMBIE_FAST",
      "contents": "ACT_HL2MP_RUN_ZOMBIE_FAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_ZOMBIE_FAST = 1646"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE_06",
      "contents": "ACT_HL2MP_WALK_ZOMBIE_06",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE_06 = 1647"
    },
    {
      "trigger": "ACT_ZOMBIE_LEAP_START",
      "contents": "ACT_ZOMBIE_LEAP_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ZOMBIE_LEAP_START = 1648"
    },
    {
      "trigger": "ACT_ZOMBIE_LEAPING",
      "contents": "ACT_ZOMBIE_LEAPING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ZOMBIE_LEAPING = 1649"
    },
    {
      "trigger": "ACT_ZOMBIE_CLIMB_UP",
      "contents": "ACT_ZOMBIE_CLIMB_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ZOMBIE_CLIMB_UP = 1650"
    },
    {
      "trigger": "ACT_ZOMBIE_CLIMB_START",
      "contents": "ACT_ZOMBIE_CLIMB_START",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ZOMBIE_CLIMB_START = 1651"
    },
    {
      "trigger": "ACT_ZOMBIE_CLIMB_END",
      "contents": "ACT_ZOMBIE_CLIMB_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_ZOMBIE_CLIMB_END = 1652"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_MAGIC",
      "contents": "ACT_HL2MP_IDLE_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_MAGIC = 1653"
    },
    {
      "trigger": "ACT_HL2MP_WALK_MAGIC",
      "contents": "ACT_HL2MP_WALK_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_MAGIC = 1654"
    },
    {
      "trigger": "ACT_HL2MP_RUN_MAGIC",
      "contents": "ACT_HL2MP_RUN_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_MAGIC = 1655"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_MAGIC",
      "contents": "ACT_HL2MP_IDLE_CROUCH_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_MAGIC = 1656"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_MAGIC",
      "contents": "ACT_HL2MP_WALK_CROUCH_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_MAGIC = 1657"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC = 1658"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_MAGIC",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_MAGIC = 1659"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_MAGIC",
      "contents": "ACT_HL2MP_JUMP_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_MAGIC = 1660"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_MAGIC",
      "contents": "ACT_HL2MP_SWIM_IDLE_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_MAGIC = 1661"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_MAGIC",
      "contents": "ACT_HL2MP_SWIM_MAGIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_MAGIC = 1662"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_REVOLVER",
      "contents": "ACT_HL2MP_IDLE_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_REVOLVER = 1663"
    },
    {
      "trigger": "ACT_HL2MP_WALK_REVOLVER",
      "contents": "ACT_HL2MP_WALK_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_REVOLVER = 1664"
    },
    {
      "trigger": "ACT_HL2MP_RUN_REVOLVER",
      "contents": "ACT_HL2MP_RUN_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_REVOLVER = 1665"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_REVOLVER",
      "contents": "ACT_HL2MP_IDLE_CROUCH_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_REVOLVER = 1666"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_REVOLVER",
      "contents": "ACT_HL2MP_WALK_CROUCH_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_REVOLVER = 1667"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER = 1668"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_REVOLVER",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_REVOLVER = 1669"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_REVOLVER",
      "contents": "ACT_HL2MP_JUMP_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_REVOLVER = 1670"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_REVOLVER",
      "contents": "ACT_HL2MP_SWIM_IDLE_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_REVOLVER = 1671"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_REVOLVER",
      "contents": "ACT_HL2MP_SWIM_REVOLVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_REVOLVER = 1672"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CAMERA",
      "contents": "ACT_HL2MP_IDLE_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CAMERA = 1673"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CAMERA",
      "contents": "ACT_HL2MP_WALK_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CAMERA = 1674"
    },
    {
      "trigger": "ACT_HL2MP_RUN_CAMERA",
      "contents": "ACT_HL2MP_RUN_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_CAMERA = 1675"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_CAMERA",
      "contents": "ACT_HL2MP_IDLE_CROUCH_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_CAMERA = 1676"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_CAMERA",
      "contents": "ACT_HL2MP_WALK_CROUCH_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_CAMERA = 1677"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA = 1678"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_CAMERA",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_CAMERA = 1679"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_CAMERA",
      "contents": "ACT_HL2MP_JUMP_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_CAMERA = 1680"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_CAMERA",
      "contents": "ACT_HL2MP_SWIM_IDLE_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_CAMERA = 1681"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_CAMERA",
      "contents": "ACT_HL2MP_SWIM_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_CAMERA = 1682"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_ANGRY",
      "contents": "ACT_HL2MP_IDLE_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_ANGRY = 1683"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ANGRY",
      "contents": "ACT_HL2MP_WALK_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ANGRY = 1684"
    },
    {
      "trigger": "ACT_HL2MP_RUN_ANGRY",
      "contents": "ACT_HL2MP_RUN_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_ANGRY = 1685"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_ANGRY",
      "contents": "ACT_HL2MP_IDLE_CROUCH_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_ANGRY = 1686"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ANGRY",
      "contents": "ACT_HL2MP_WALK_CROUCH_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ANGRY = 1687"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY = 1688"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_ANGRY",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_ANGRY = 1689"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_ANGRY",
      "contents": "ACT_HL2MP_JUMP_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_ANGRY = 1690"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_ANGRY",
      "contents": "ACT_HL2MP_SWIM_IDLE_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_ANGRY = 1691"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_ANGRY",
      "contents": "ACT_HL2MP_SWIM_ANGRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_ANGRY = 1692"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_SCARED",
      "contents": "ACT_HL2MP_IDLE_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_SCARED = 1693"
    },
    {
      "trigger": "ACT_HL2MP_WALK_SCARED",
      "contents": "ACT_HL2MP_WALK_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_SCARED = 1694"
    },
    {
      "trigger": "ACT_HL2MP_RUN_SCARED",
      "contents": "ACT_HL2MP_RUN_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_SCARED = 1695"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_SCARED",
      "contents": "ACT_HL2MP_IDLE_CROUCH_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_SCARED = 1696"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_SCARED",
      "contents": "ACT_HL2MP_WALK_CROUCH_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_SCARED = 1697"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED = 1698"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_SCARED",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_SCARED = 1699"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_SCARED",
      "contents": "ACT_HL2MP_JUMP_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_SCARED = 1700"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_SCARED",
      "contents": "ACT_HL2MP_SWIM_IDLE_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_SCARED = 1701"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_SCARED",
      "contents": "ACT_HL2MP_SWIM_SCARED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_SCARED = 1702"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_ZOMBIE",
      "contents": "ACT_HL2MP_IDLE_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_ZOMBIE = 1703"
    },
    {
      "trigger": "ACT_HL2MP_WALK_ZOMBIE",
      "contents": "ACT_HL2MP_WALK_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_ZOMBIE = 1704"
    },
    {
      "trigger": "ACT_HL2MP_RUN_ZOMBIE",
      "contents": "ACT_HL2MP_RUN_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_ZOMBIE = 1705"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_ZOMBIE = 1706"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_ZOMBIE",
      "contents": "ACT_HL2MP_WALK_CROUCH_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_ZOMBIE = 1707"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE = 1708"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_ZOMBIE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_ZOMBIE = 1709"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_ZOMBIE",
      "contents": "ACT_HL2MP_JUMP_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_ZOMBIE = 1710"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_ZOMBIE",
      "contents": "ACT_HL2MP_SWIM_IDLE_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_ZOMBIE = 1711"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_ZOMBIE",
      "contents": "ACT_HL2MP_SWIM_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_ZOMBIE = 1712"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_SUITCASE",
      "contents": "ACT_HL2MP_IDLE_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_SUITCASE = 1713"
    },
    {
      "trigger": "ACT_HL2MP_WALK_SUITCASE",
      "contents": "ACT_HL2MP_WALK_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_SUITCASE = 1714"
    },
    {
      "trigger": "ACT_HL2MP_RUN_SUITCASE",
      "contents": "ACT_HL2MP_RUN_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_SUITCASE = 1715"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_SUITCASE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_SUITCASE = 1716"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_SUITCASE",
      "contents": "ACT_HL2MP_WALK_CROUCH_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_SUITCASE = 1717"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE = 1718"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_SUITCASE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_SUITCASE = 1719"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_SUITCASE",
      "contents": "ACT_HL2MP_JUMP_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_SUITCASE = 1720"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_SUITCASE",
      "contents": "ACT_HL2MP_SWIM_IDLE_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_SUITCASE = 1721"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_SUITCASE",
      "contents": "ACT_HL2MP_SWIM_SUITCASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_SUITCASE = 1722"
    },
    {
      "trigger": "ACT_HL2MP_IDLE",
      "contents": "ACT_HL2MP_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE = 1777"
    },
    {
      "trigger": "ACT_HL2MP_WALK",
      "contents": "ACT_HL2MP_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK = 1778"
    },
    {
      "trigger": "ACT_HL2MP_RUN",
      "contents": "ACT_HL2MP_RUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN = 1779"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH",
      "contents": "ACT_HL2MP_IDLE_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH = 1780"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH",
      "contents": "ACT_HL2MP_WALK_CROUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH = 1781"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK = 1782"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD",
      "contents": "ACT_HL2MP_GESTURE_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD = 1783"
    },
    {
      "trigger": "ACT_HL2MP_JUMP",
      "contents": "ACT_HL2MP_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP = 1784"
    },
    {
      "trigger": "ACT_HL2MP_SWIM",
      "contents": "ACT_HL2MP_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM = 1786"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_PISTOL",
      "contents": "ACT_HL2MP_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_PISTOL = 1787"
    },
    {
      "trigger": "ACT_HL2MP_WALK_PISTOL",
      "contents": "ACT_HL2MP_WALK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_PISTOL = 1788"
    },
    {
      "trigger": "ACT_HL2MP_RUN_PISTOL",
      "contents": "ACT_HL2MP_RUN_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_PISTOL = 1789"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_PISTOL",
      "contents": "ACT_HL2MP_IDLE_CROUCH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_PISTOL = 1790"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_PISTOL",
      "contents": "ACT_HL2MP_WALK_CROUCH_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_PISTOL = 1791"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL = 1792"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_PISTOL",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_PISTOL = 1793"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_PISTOL",
      "contents": "ACT_HL2MP_JUMP_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_PISTOL = 1794"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_PISTOL",
      "contents": "ACT_HL2MP_SWIM_IDLE_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_PISTOL = 1795"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_PISTOL",
      "contents": "ACT_HL2MP_SWIM_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_PISTOL = 1796"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_SMG1",
      "contents": "ACT_HL2MP_IDLE_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_SMG1 = 1797"
    },
    {
      "trigger": "ACT_HL2MP_WALK_SMG1",
      "contents": "ACT_HL2MP_WALK_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_SMG1 = 1798"
    },
    {
      "trigger": "ACT_HL2MP_RUN_SMG1",
      "contents": "ACT_HL2MP_RUN_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_SMG1 = 1799"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_SMG1",
      "contents": "ACT_HL2MP_IDLE_CROUCH_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_SMG1 = 1800"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_SMG1",
      "contents": "ACT_HL2MP_WALK_CROUCH_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_SMG1 = 1801"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1 = 1802"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_SMG1",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_SMG1 = 1803"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_SMG1",
      "contents": "ACT_HL2MP_JUMP_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_SMG1 = 1804"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_SMG1",
      "contents": "ACT_HL2MP_SWIM_IDLE_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_SMG1 = 1805"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_SMG1",
      "contents": "ACT_HL2MP_SWIM_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_SMG1 = 1806"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_AR2",
      "contents": "ACT_HL2MP_IDLE_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_AR2 = 1807"
    },
    {
      "trigger": "ACT_HL2MP_WALK_AR2",
      "contents": "ACT_HL2MP_WALK_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_AR2 = 1808"
    },
    {
      "trigger": "ACT_HL2MP_RUN_AR2",
      "contents": "ACT_HL2MP_RUN_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_AR2 = 1809"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_AR2",
      "contents": "ACT_HL2MP_IDLE_CROUCH_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_AR2 = 1810"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_AR2",
      "contents": "ACT_HL2MP_WALK_CROUCH_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_AR2 = 1811"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2 = 1812"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_AR2",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_AR2 = 1813"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_AR2",
      "contents": "ACT_HL2MP_JUMP_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_AR2 = 1814"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_AR2",
      "contents": "ACT_HL2MP_SWIM_IDLE_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_AR2 = 1815"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_AR2",
      "contents": "ACT_HL2MP_SWIM_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_AR2 = 1816"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_SHOTGUN",
      "contents": "ACT_HL2MP_IDLE_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_SHOTGUN = 1817"
    },
    {
      "trigger": "ACT_HL2MP_WALK_SHOTGUN",
      "contents": "ACT_HL2MP_WALK_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_SHOTGUN = 1818"
    },
    {
      "trigger": "ACT_HL2MP_RUN_SHOTGUN",
      "contents": "ACT_HL2MP_RUN_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_SHOTGUN = 1819"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_SHOTGUN",
      "contents": "ACT_HL2MP_IDLE_CROUCH_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_SHOTGUN = 1820"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_SHOTGUN",
      "contents": "ACT_HL2MP_WALK_CROUCH_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_SHOTGUN = 1821"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN = 1822"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_SHOTGUN",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_SHOTGUN = 1823"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_SHOTGUN",
      "contents": "ACT_HL2MP_JUMP_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_SHOTGUN = 1824"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_SHOTGUN",
      "contents": "ACT_HL2MP_SWIM_IDLE_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_SHOTGUN = 1825"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_SHOTGUN",
      "contents": "ACT_HL2MP_SWIM_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_SHOTGUN = 1826"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_RPG",
      "contents": "ACT_HL2MP_IDLE_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_RPG = 1827"
    },
    {
      "trigger": "ACT_HL2MP_WALK_RPG",
      "contents": "ACT_HL2MP_WALK_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_RPG = 1828"
    },
    {
      "trigger": "ACT_HL2MP_RUN_RPG",
      "contents": "ACT_HL2MP_RUN_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_RPG = 1829"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_RPG",
      "contents": "ACT_HL2MP_IDLE_CROUCH_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_RPG = 1830"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_RPG",
      "contents": "ACT_HL2MP_WALK_CROUCH_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_RPG = 1831"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG = 1832"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_RPG",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_RPG = 1833"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_RPG",
      "contents": "ACT_HL2MP_JUMP_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_RPG = 1834"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_RPG",
      "contents": "ACT_HL2MP_SWIM_IDLE_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_RPG = 1835"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_RPG",
      "contents": "ACT_HL2MP_SWIM_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_RPG = 1836"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_GRENADE",
      "contents": "ACT_HL2MP_IDLE_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_GRENADE = 1837"
    },
    {
      "trigger": "ACT_HL2MP_WALK_GRENADE",
      "contents": "ACT_HL2MP_WALK_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_GRENADE = 1838"
    },
    {
      "trigger": "ACT_HL2MP_RUN_GRENADE",
      "contents": "ACT_HL2MP_RUN_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_GRENADE = 1839"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_GRENADE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_GRENADE = 1840"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_GRENADE",
      "contents": "ACT_HL2MP_WALK_CROUCH_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_GRENADE = 1841"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE = 1842"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_GRENADE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_GRENADE = 1843"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_GRENADE",
      "contents": "ACT_HL2MP_JUMP_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_GRENADE = 1844"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_GRENADE",
      "contents": "ACT_HL2MP_SWIM_IDLE_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_GRENADE = 1845"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_GRENADE",
      "contents": "ACT_HL2MP_SWIM_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_GRENADE = 1846"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_DUEL",
      "contents": "ACT_HL2MP_IDLE_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_DUEL = 1847"
    },
    {
      "trigger": "ACT_HL2MP_WALK_DUEL",
      "contents": "ACT_HL2MP_WALK_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_DUEL = 1848"
    },
    {
      "trigger": "ACT_HL2MP_RUN_DUEL",
      "contents": "ACT_HL2MP_RUN_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_DUEL = 1849"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_DUEL",
      "contents": "ACT_HL2MP_IDLE_CROUCH_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_DUEL = 1850"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_DUEL",
      "contents": "ACT_HL2MP_WALK_CROUCH_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_DUEL = 1851"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL = 1852"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_DUEL",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_DUEL = 1853"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_DUEL",
      "contents": "ACT_HL2MP_JUMP_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_DUEL = 1854"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_DUEL",
      "contents": "ACT_HL2MP_SWIM_IDLE_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_DUEL = 1855"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_DUEL",
      "contents": "ACT_HL2MP_SWIM_DUEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_DUEL = 1856"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_PHYSGUN",
      "contents": "ACT_HL2MP_IDLE_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_PHYSGUN = 1857"
    },
    {
      "trigger": "ACT_HL2MP_WALK_PHYSGUN",
      "contents": "ACT_HL2MP_WALK_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_PHYSGUN = 1858"
    },
    {
      "trigger": "ACT_HL2MP_RUN_PHYSGUN",
      "contents": "ACT_HL2MP_RUN_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_PHYSGUN = 1859"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_PHYSGUN",
      "contents": "ACT_HL2MP_IDLE_CROUCH_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_PHYSGUN = 1860"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_PHYSGUN",
      "contents": "ACT_HL2MP_WALK_CROUCH_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_PHYSGUN = 1861"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN = 1862"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_PHYSGUN",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_PHYSGUN = 1863"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_PHYSGUN",
      "contents": "ACT_HL2MP_JUMP_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_PHYSGUN = 1864"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_PHYSGUN",
      "contents": "ACT_HL2MP_SWIM_IDLE_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_PHYSGUN = 1865"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_PHYSGUN",
      "contents": "ACT_HL2MP_SWIM_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_PHYSGUN = 1866"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROSSBOW",
      "contents": "ACT_HL2MP_IDLE_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROSSBOW = 1867"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROSSBOW",
      "contents": "ACT_HL2MP_WALK_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROSSBOW = 1868"
    },
    {
      "trigger": "ACT_HL2MP_RUN_CROSSBOW",
      "contents": "ACT_HL2MP_RUN_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_CROSSBOW = 1869"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_CROSSBOW",
      "contents": "ACT_HL2MP_IDLE_CROUCH_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_CROSSBOW = 1870"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_CROSSBOW",
      "contents": "ACT_HL2MP_WALK_CROUCH_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_CROSSBOW = 1871"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW = 1872"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_CROSSBOW",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_CROSSBOW = 1873"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_CROSSBOW",
      "contents": "ACT_HL2MP_JUMP_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_CROSSBOW = 1874"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_CROSSBOW",
      "contents": "ACT_HL2MP_SWIM_IDLE_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_CROSSBOW = 1875"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_CROSSBOW",
      "contents": "ACT_HL2MP_SWIM_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_CROSSBOW = 1876"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_MELEE",
      "contents": "ACT_HL2MP_IDLE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_MELEE = 1877"
    },
    {
      "trigger": "ACT_HL2MP_WALK_MELEE",
      "contents": "ACT_HL2MP_WALK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_MELEE = 1878"
    },
    {
      "trigger": "ACT_HL2MP_RUN_MELEE",
      "contents": "ACT_HL2MP_RUN_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_MELEE = 1879"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_MELEE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_MELEE = 1880"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_MELEE",
      "contents": "ACT_HL2MP_WALK_CROUCH_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_MELEE = 1881"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE = 1882"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_MELEE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_MELEE = 1883"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_MELEE",
      "contents": "ACT_HL2MP_JUMP_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_MELEE = 1884"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_MELEE",
      "contents": "ACT_HL2MP_SWIM_IDLE_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_MELEE = 1885"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_MELEE",
      "contents": "ACT_HL2MP_SWIM_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_MELEE = 1886"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_SLAM",
      "contents": "ACT_HL2MP_IDLE_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_SLAM = 1887"
    },
    {
      "trigger": "ACT_HL2MP_WALK_SLAM",
      "contents": "ACT_HL2MP_WALK_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_SLAM = 1888"
    },
    {
      "trigger": "ACT_HL2MP_RUN_SLAM",
      "contents": "ACT_HL2MP_RUN_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_SLAM = 1889"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_SLAM",
      "contents": "ACT_HL2MP_IDLE_CROUCH_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_SLAM = 1890"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_SLAM",
      "contents": "ACT_HL2MP_WALK_CROUCH_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_SLAM = 1891"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM = 1892"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_SLAM",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_SLAM = 1893"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_SLAM",
      "contents": "ACT_HL2MP_JUMP_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_SLAM = 1894"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_SLAM",
      "contents": "ACT_HL2MP_SWIM_IDLE_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_SLAM = 1895"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_SLAM",
      "contents": "ACT_HL2MP_SWIM_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_SLAM = 1896"
    },
    {
      "trigger": "ACT_VM_CRAWL",
      "contents": "ACT_VM_CRAWL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_CRAWL = 1897"
    },
    {
      "trigger": "ACT_VM_CRAWL_EMPTY",
      "contents": "ACT_VM_CRAWL_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_CRAWL_EMPTY = 1898"
    },
    {
      "trigger": "ACT_VM_HOLSTER_EMPTY",
      "contents": "ACT_VM_HOLSTER_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HOLSTER_EMPTY = 1899"
    },
    {
      "trigger": "ACT_VM_DOWN",
      "contents": "ACT_VM_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DOWN = 1900"
    },
    {
      "trigger": "ACT_VM_DOWN_EMPTY",
      "contents": "ACT_VM_DOWN_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DOWN_EMPTY = 1901"
    },
    {
      "trigger": "ACT_VM_READY",
      "contents": "ACT_VM_READY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_READY = 1902"
    },
    {
      "trigger": "ACT_VM_ISHOOT",
      "contents": "ACT_VM_ISHOOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_ISHOOT = 1903"
    },
    {
      "trigger": "ACT_VM_IIN",
      "contents": "ACT_VM_IIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIN = 1904"
    },
    {
      "trigger": "ACT_VM_IIN_EMPTY",
      "contents": "ACT_VM_IIN_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIN_EMPTY = 1905"
    },
    {
      "trigger": "ACT_VM_IIDLE",
      "contents": "ACT_VM_IIDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIDLE = 1906"
    },
    {
      "trigger": "ACT_VM_IIDLE_EMPTY",
      "contents": "ACT_VM_IIDLE_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIDLE_EMPTY = 1907"
    },
    {
      "trigger": "ACT_VM_IOUT",
      "contents": "ACT_VM_IOUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IOUT = 1908"
    },
    {
      "trigger": "ACT_VM_IOUT_EMPTY",
      "contents": "ACT_VM_IOUT_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IOUT_EMPTY = 1909"
    },
    {
      "trigger": "ACT_VM_PULLBACK_HIGH_BAKE",
      "contents": "ACT_VM_PULLBACK_HIGH_BAKE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_PULLBACK_HIGH_BAKE = 1910"
    },
    {
      "trigger": "ACT_VM_HITKILL",
      "contents": "ACT_VM_HITKILL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HITKILL = 1911"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IN",
      "contents": "ACT_VM_DEPLOYED_IN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IN = 1912"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IDLE",
      "contents": "ACT_VM_DEPLOYED_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IDLE = 1913"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_FIRE",
      "contents": "ACT_VM_DEPLOYED_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_FIRE = 1914"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_DRYFIRE",
      "contents": "ACT_VM_DEPLOYED_DRYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_DRYFIRE = 1915"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_RELOAD",
      "contents": "ACT_VM_DEPLOYED_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_RELOAD = 1916"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_RELOAD_EMPTY",
      "contents": "ACT_VM_DEPLOYED_RELOAD_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_RELOAD_EMPTY = 1917"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_OUT",
      "contents": "ACT_VM_DEPLOYED_OUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_OUT = 1918"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IRON_IN",
      "contents": "ACT_VM_DEPLOYED_IRON_IN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IRON_IN = 1919"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IRON_IDLE",
      "contents": "ACT_VM_DEPLOYED_IRON_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IRON_IDLE = 1920"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IRON_FIRE",
      "contents": "ACT_VM_DEPLOYED_IRON_FIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IRON_FIRE = 1921"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IRON_DRYFIRE",
      "contents": "ACT_VM_DEPLOYED_IRON_DRYFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IRON_DRYFIRE = 1922"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_IRON_OUT",
      "contents": "ACT_VM_DEPLOYED_IRON_OUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_IRON_OUT = 1923"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_LIFTED_IN",
      "contents": "ACT_VM_DEPLOYED_LIFTED_IN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_LIFTED_IN = 1924"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_LIFTED_IDLE",
      "contents": "ACT_VM_DEPLOYED_LIFTED_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_LIFTED_IDLE = 1925"
    },
    {
      "trigger": "ACT_VM_DEPLOYED_LIFTED_OUT",
      "contents": "ACT_VM_DEPLOYED_LIFTED_OUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DEPLOYED_LIFTED_OUT = 1926"
    },
    {
      "trigger": "ACT_VM_RELOADEMPTY",
      "contents": "ACT_VM_RELOADEMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOADEMPTY = 1927"
    },
    {
      "trigger": "ACT_VM_IRECOIL1",
      "contents": "ACT_VM_IRECOIL1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IRECOIL1 = 1928"
    },
    {
      "trigger": "ACT_VM_IRECOIL2",
      "contents": "ACT_VM_IRECOIL2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IRECOIL2 = 1929"
    },
    {
      "trigger": "ACT_VM_FIREMODE",
      "contents": "ACT_VM_FIREMODE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_FIREMODE = 1930"
    },
    {
      "trigger": "ACT_VM_ISHOOT_LAST",
      "contents": "ACT_VM_ISHOOT_LAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_ISHOOT_LAST = 1931"
    },
    {
      "trigger": "ACT_VM_IFIREMODE",
      "contents": "ACT_VM_IFIREMODE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IFIREMODE = 1932"
    },
    {
      "trigger": "ACT_VM_DFIREMODE",
      "contents": "ACT_VM_DFIREMODE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DFIREMODE = 1933"
    },
    {
      "trigger": "ACT_VM_DIFIREMODE",
      "contents": "ACT_VM_DIFIREMODE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DIFIREMODE = 1934"
    },
    {
      "trigger": "ACT_VM_SHOOTLAST",
      "contents": "ACT_VM_SHOOTLAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_SHOOTLAST = 1935"
    },
    {
      "trigger": "ACT_VM_ISHOOTDRY",
      "contents": "ACT_VM_ISHOOTDRY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_ISHOOTDRY = 1936"
    },
    {
      "trigger": "ACT_VM_DRAW_M203",
      "contents": "ACT_VM_DRAW_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAW_M203 = 1937"
    },
    {
      "trigger": "ACT_VM_DRAWFULL_M203",
      "contents": "ACT_VM_DRAWFULL_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DRAWFULL_M203 = 1938"
    },
    {
      "trigger": "ACT_VM_READY_M203",
      "contents": "ACT_VM_READY_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_READY_M203 = 1939"
    },
    {
      "trigger": "ACT_VM_IDLE_M203",
      "contents": "ACT_VM_IDLE_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IDLE_M203 = 1940"
    },
    {
      "trigger": "ACT_VM_RELOAD_M203",
      "contents": "ACT_VM_RELOAD_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_M203 = 1941"
    },
    {
      "trigger": "ACT_VM_HOLSTER_M203",
      "contents": "ACT_VM_HOLSTER_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HOLSTER_M203 = 1942"
    },
    {
      "trigger": "ACT_VM_HOLSTERFULL_M203",
      "contents": "ACT_VM_HOLSTERFULL_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_HOLSTERFULL_M203 = 1943"
    },
    {
      "trigger": "ACT_VM_IIN_M203",
      "contents": "ACT_VM_IIN_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIN_M203 = 1944"
    },
    {
      "trigger": "ACT_VM_IIDLE_M203",
      "contents": "ACT_VM_IIDLE_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IIDLE_M203 = 1945"
    },
    {
      "trigger": "ACT_VM_IOUT_M203",
      "contents": "ACT_VM_IOUT_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_IOUT_M203 = 1946"
    },
    {
      "trigger": "ACT_VM_CRAWL_M203",
      "contents": "ACT_VM_CRAWL_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_CRAWL_M203 = 1947"
    },
    {
      "trigger": "ACT_VM_DOWN_M203",
      "contents": "ACT_VM_DOWN_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_DOWN_M203 = 1948"
    },
    {
      "trigger": "ACT_VM_ISHOOT_M203",
      "contents": "ACT_VM_ISHOOT_M203",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_ISHOOT_M203 = 1949"
    },
    {
      "trigger": "ACT_VM_RELOAD_INSERT",
      "contents": "ACT_VM_RELOAD_INSERT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_INSERT = 1950"
    },
    {
      "trigger": "ACT_VM_RELOAD_INSERT_PULL",
      "contents": "ACT_VM_RELOAD_INSERT_PULL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_INSERT_PULL = 1951"
    },
    {
      "trigger": "ACT_VM_RELOAD_END",
      "contents": "ACT_VM_RELOAD_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_END = 1952"
    },
    {
      "trigger": "ACT_VM_RELOAD_END_EMPTY",
      "contents": "ACT_VM_RELOAD_END_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_END_EMPTY = 1953"
    },
    {
      "trigger": "ACT_VM_RELOAD_INSERT_EMPTY",
      "contents": "ACT_VM_RELOAD_INSERT_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD_INSERT_EMPTY = 1954"
    },
    {
      "trigger": "ACT_CROSSBOW_HOLSTER_UNLOADED",
      "contents": "ACT_CROSSBOW_HOLSTER_UNLOADED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_CROSSBOW_HOLSTER_UNLOADED = 1955"
    },
    {
      "trigger": "ACT_VM_FIRE_TO_EMPTY",
      "contents": "ACT_VM_FIRE_TO_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_FIRE_TO_EMPTY = 1956"
    },
    {
      "trigger": "ACT_VM_UNLOAD",
      "contents": "ACT_VM_UNLOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_UNLOAD = 1957"
    },
    {
      "trigger": "ACT_VM_RELOAD2",
      "contents": "ACT_VM_RELOAD2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_VM_RELOAD2 = 1958"
    },
    {
      "trigger": "ACT_GMOD_NOCLIP_LAYER",
      "contents": "ACT_GMOD_NOCLIP_LAYER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_NOCLIP_LAYER = 1959"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_FIST",
      "contents": "ACT_HL2MP_IDLE_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_FIST = 1960"
    },
    {
      "trigger": "ACT_HL2MP_WALK_FIST",
      "contents": "ACT_HL2MP_WALK_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_FIST = 1961"
    },
    {
      "trigger": "ACT_HL2MP_RUN_FIST",
      "contents": "ACT_HL2MP_RUN_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_FIST = 1962"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_FIST",
      "contents": "ACT_HL2MP_IDLE_CROUCH_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_FIST = 1963"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_FIST",
      "contents": "ACT_HL2MP_WALK_CROUCH_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_FIST = 1964"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST = 1965"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_FIST",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_FIST = 1966"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_FIST",
      "contents": "ACT_HL2MP_JUMP_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_FIST = 1967"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_FIST",
      "contents": "ACT_HL2MP_SWIM_IDLE_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_FIST = 1968"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_FIST",
      "contents": "ACT_HL2MP_SWIM_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_FIST = 1969"
    },
    {
      "trigger": "ACT_HL2MP_SIT",
      "contents": "ACT_HL2MP_SIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT = 1970"
    },
    {
      "trigger": "ACT_HL2MP_FIST_BLOCK",
      "contents": "ACT_HL2MP_FIST_BLOCK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_FIST_BLOCK = 1971"
    },
    {
      "trigger": "ACT_DRIVE_AIRBOAT",
      "contents": "ACT_DRIVE_AIRBOAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DRIVE_AIRBOAT = 1972"
    },
    {
      "trigger": "ACT_DRIVE_JEEP",
      "contents": "ACT_DRIVE_JEEP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DRIVE_JEEP = 1973"
    },
    {
      "trigger": "ACT_GMOD_SIT_ROLLERCOASTER",
      "contents": "ACT_GMOD_SIT_ROLLERCOASTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SIT_ROLLERCOASTER = 1974"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_KNIFE",
      "contents": "ACT_HL2MP_IDLE_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_KNIFE = 1975"
    },
    {
      "trigger": "ACT_HL2MP_WALK_KNIFE",
      "contents": "ACT_HL2MP_WALK_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_KNIFE = 1976"
    },
    {
      "trigger": "ACT_HL2MP_RUN_KNIFE",
      "contents": "ACT_HL2MP_RUN_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_KNIFE = 1977"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_KNIFE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_KNIFE = 1978"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_KNIFE",
      "contents": "ACT_HL2MP_WALK_CROUCH_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_KNIFE = 1979"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE = 1980"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_KNIFE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_KNIFE = 1981"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_KNIFE",
      "contents": "ACT_HL2MP_JUMP_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_KNIFE = 1982"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_KNIFE",
      "contents": "ACT_HL2MP_SWIM_IDLE_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_KNIFE = 1983"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_KNIFE",
      "contents": "ACT_HL2MP_SWIM_KNIFE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_KNIFE = 1984"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_PASSIVE",
      "contents": "ACT_HL2MP_IDLE_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_PASSIVE = 1985"
    },
    {
      "trigger": "ACT_HL2MP_WALK_PASSIVE",
      "contents": "ACT_HL2MP_WALK_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_PASSIVE = 1986"
    },
    {
      "trigger": "ACT_HL2MP_RUN_PASSIVE",
      "contents": "ACT_HL2MP_RUN_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_PASSIVE = 1987"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_PASSIVE",
      "contents": "ACT_HL2MP_IDLE_CROUCH_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_PASSIVE = 1988"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_PASSIVE",
      "contents": "ACT_HL2MP_WALK_CROUCH_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_PASSIVE = 1989"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE = 1990"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_PASSIVE",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_PASSIVE = 1991"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_PASSIVE",
      "contents": "ACT_HL2MP_JUMP_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_PASSIVE = 1992"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_PASSIVE",
      "contents": "ACT_HL2MP_SWIM_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_PASSIVE = 1993"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_PASSIVE",
      "contents": "ACT_HL2MP_SWIM_IDLE_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_PASSIVE = 1994"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_MELEE2",
      "contents": "ACT_HL2MP_IDLE_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_MELEE2 = 1995"
    },
    {
      "trigger": "ACT_HL2MP_WALK_MELEE2",
      "contents": "ACT_HL2MP_WALK_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_MELEE2 = 1996"
    },
    {
      "trigger": "ACT_HL2MP_RUN_MELEE2",
      "contents": "ACT_HL2MP_RUN_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_RUN_MELEE2 = 1997"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_CROUCH_MELEE2",
      "contents": "ACT_HL2MP_IDLE_CROUCH_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_CROUCH_MELEE2 = 1998"
    },
    {
      "trigger": "ACT_HL2MP_WALK_CROUCH_MELEE2",
      "contents": "ACT_HL2MP_WALK_CROUCH_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_WALK_CROUCH_MELEE2 = 1999"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2",
      "contents": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2 = 2000"
    },
    {
      "trigger": "ACT_HL2MP_GESTURE_RELOAD_MELEE2",
      "contents": "ACT_HL2MP_GESTURE_RELOAD_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_GESTURE_RELOAD_MELEE2 = 2001"
    },
    {
      "trigger": "ACT_HL2MP_JUMP_MELEE2",
      "contents": "ACT_HL2MP_JUMP_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_JUMP_MELEE2 = 2002"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE_MELEE2",
      "contents": "ACT_HL2MP_SWIM_IDLE_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE_MELEE2 = 2003"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_MELEE2",
      "contents": "ACT_HL2MP_SWIM_MELEE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_MELEE2 = 2004"
    },
    {
      "trigger": "ACT_HL2MP_SIT_PISTOL",
      "contents": "ACT_HL2MP_SIT_PISTOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_PISTOL = 2005"
    },
    {
      "trigger": "ACT_HL2MP_SIT_SHOTGUN",
      "contents": "ACT_HL2MP_SIT_SHOTGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_SHOTGUN = 2006"
    },
    {
      "trigger": "ACT_HL2MP_SIT_SMG1",
      "contents": "ACT_HL2MP_SIT_SMG1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_SMG1 = 2007"
    },
    {
      "trigger": "ACT_HL2MP_SIT_AR2",
      "contents": "ACT_HL2MP_SIT_AR2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_AR2 = 2008"
    },
    {
      "trigger": "ACT_HL2MP_SIT_PHYSGUN",
      "contents": "ACT_HL2MP_SIT_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_PHYSGUN = 2009"
    },
    {
      "trigger": "ACT_HL2MP_SIT_GRENADE",
      "contents": "ACT_HL2MP_SIT_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_GRENADE = 2010"
    },
    {
      "trigger": "ACT_HL2MP_SIT_RPG",
      "contents": "ACT_HL2MP_SIT_RPG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_RPG = 2011"
    },
    {
      "trigger": "ACT_HL2MP_SIT_CROSSBOW",
      "contents": "ACT_HL2MP_SIT_CROSSBOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_CROSSBOW = 2012"
    },
    {
      "trigger": "ACT_HL2MP_SIT_MELEE",
      "contents": "ACT_HL2MP_SIT_MELEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_MELEE = 2013"
    },
    {
      "trigger": "ACT_HL2MP_SIT_SLAM",
      "contents": "ACT_HL2MP_SIT_SLAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_SLAM = 2014"
    },
    {
      "trigger": "ACT_HL2MP_SIT_FIST",
      "contents": "ACT_HL2MP_SIT_FIST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_FIST = 2015"
    },
    {
      "trigger": "ACT_GMOD_IN_CHAT",
      "contents": "ACT_GMOD_IN_CHAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_IN_CHAT = 2019"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_ITEM_GIVE",
      "contents": "ACT_GMOD_GESTURE_ITEM_GIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_ITEM_GIVE = 2020"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_ITEM_DROP",
      "contents": "ACT_GMOD_GESTURE_ITEM_DROP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_ITEM_DROP = 2021"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_ITEM_PLACE",
      "contents": "ACT_GMOD_GESTURE_ITEM_PLACE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_ITEM_PLACE = 2022"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_ITEM_THROW",
      "contents": "ACT_GMOD_GESTURE_ITEM_THROW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_ITEM_THROW = 2023"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND",
      "contents": "ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND = 2024"
    },
    {
      "trigger": "ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND",
      "contents": "ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND = 2025"
    },
    {
      "trigger": "ACT_HL2MP_SWIM_IDLE",
      "contents": "ACT_HL2MP_SWIM_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SWIM_IDLE = 2026"
    },
    {
      "trigger": "ACT_HL2MP_IDLE_COWER",
      "contents": "ACT_HL2MP_IDLE_COWER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_IDLE_COWER = 2027"
    },
    {
      "trigger": "ACT_GMOD_DEATH",
      "contents": "ACT_GMOD_DEATH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_DEATH = 2028"
    },
    {
      "trigger": "ACT_DRIVE_POD",
      "contents": "ACT_DRIVE_POD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_DRIVE_POD = 2029"
    },
    {
      "trigger": "ACT_FLINCH",
      "contents": "ACT_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH = 2030"
    },
    {
      "trigger": "ACT_FLINCH_BACK",
      "contents": "ACT_FLINCH_BACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_BACK = 2031"
    },
    {
      "trigger": "ACT_FLINCH_SHOULDER_LEFT",
      "contents": "ACT_FLINCH_SHOULDER_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_SHOULDER_LEFT = 2032"
    },
    {
      "trigger": "ACT_FLINCH_SHOULDER_RIGHT",
      "contents": "ACT_FLINCH_SHOULDER_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_FLINCH_SHOULDER_RIGHT = 2033"
    },
    {
      "trigger": "ACT_HL2MP_SIT_CAMERA",
      "contents": "ACT_HL2MP_SIT_CAMERA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_CAMERA = 2034"
    },
    {
      "trigger": "ACT_HL2MP_SIT_PASSIVE",
      "contents": "ACT_HL2MP_SIT_PASSIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_SIT_PASSIVE = 2035"
    },
    {
      "trigger": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_IDLE",
      "contents": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_IDLE = 2036"
    },
    {
      "trigger": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_FAST",
      "contents": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_FAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_FAST = 2037"
    },
    {
      "trigger": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_SLOW",
      "contents": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_SLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_HL2MP_ZOMBIE_SLUMP_ALT_RISE_SLOW = 2038"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_STAND_01",
      "contents": "ACT_GMOD_SHOWOFF_STAND_01",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_STAND_01 = 2039"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_STAND_02",
      "contents": "ACT_GMOD_SHOWOFF_STAND_02",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_STAND_02 = 2040"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_STAND_03",
      "contents": "ACT_GMOD_SHOWOFF_STAND_03",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_STAND_03 = 2041"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_STAND_04",
      "contents": "ACT_GMOD_SHOWOFF_STAND_04",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_STAND_04 = 2042"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_DUCK_01",
      "contents": "ACT_GMOD_SHOWOFF_DUCK_01",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_DUCK_01 = 2043"
    },
    {
      "trigger": "ACT_GMOD_SHOWOFF_DUCK_02",
      "contents": "ACT_GMOD_SHOWOFF_DUCK_02",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ACT_GMOD_SHOWOFF_DUCK_02 = 2044"
    },
    {
      "trigger": "LAST_SHARED_ACTIVITY",
      "contents": "LAST_SHARED_ACTIVITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "LAST_SHARED_ACTIVITY = 2045"
    },
    {
      "trigger": "AIMR_ILLEGAL",
      "contents": "AIMR_ILLEGAL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_ILLEGAL = -4"
    },
    {
      "trigger": "AIMR_BLOCKED_NPC",
      "contents": "AIMR_BLOCKED_NPC",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_BLOCKED_NPC = -3"
    },
    {
      "trigger": "AIMR_BLOCKED_WORLD",
      "contents": "AIMR_BLOCKED_WORLD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_BLOCKED_WORLD = -2"
    },
    {
      "trigger": "AIMR_BLOCKED_ENTITY",
      "contents": "AIMR_BLOCKED_ENTITY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_BLOCKED_ENTITY = -1"
    },
    {
      "trigger": "AIMR_OK",
      "contents": "AIMR_OK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_OK = 0"
    },
    {
      "trigger": "AIMR_CHANGE_TYPE",
      "contents": "AIMR_CHANGE_TYPE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AIMR_CHANGE_TYPE = 1"
    },
    {
      "trigger": "AMMO_FORCE_DROP_IF_CARRIED",
      "contents": "AMMO_FORCE_DROP_IF_CARRIED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AMMO_FORCE_DROP_IF_CARRIED = 1"
    },
    {
      "trigger": "AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER",
      "contents": "AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER = 2"
    },
    {
      "trigger": "ANALOG_MOUSE_X",
      "contents": "ANALOG_MOUSE_X",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_MOUSE_X = 0"
    },
    {
      "trigger": "ANALOG_MOUSE_Y",
      "contents": "ANALOG_MOUSE_Y",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_MOUSE_Y = 1"
    },
    {
      "trigger": "ANALOG_MOUSE_WHEEL",
      "contents": "ANALOG_MOUSE_WHEEL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_MOUSE_WHEEL = 3"
    },
    {
      "trigger": "ANALOG_JOY_X",
      "contents": "ANALOG_JOY_X",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_X = 4"
    },
    {
      "trigger": "ANALOG_JOY_Y",
      "contents": "ANALOG_JOY_Y",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_Y = 5"
    },
    {
      "trigger": "ANALOG_JOY_Z",
      "contents": "ANALOG_JOY_Z",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_Z = 6"
    },
    {
      "trigger": "ANALOG_JOY_R",
      "contents": "ANALOG_JOY_R",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_R = 7"
    },
    {
      "trigger": "ANALOG_JOY_U",
      "contents": "ANALOG_JOY_U",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_U = 8"
    },
    {
      "trigger": "ANALOG_JOY_V",
      "contents": "ANALOG_JOY_V",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ANALOG_JOY_V = 9"
    },
    {
      "trigger": "BLEND_ZERO",
      "contents": "BLEND_ZERO",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ZERO = 0"
    },
    {
      "trigger": "BLEND_ONE",
      "contents": "BLEND_ONE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ONE = 1"
    },
    {
      "trigger": "BLEND_DST_COLOR",
      "contents": "BLEND_DST_COLOR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_DST_COLOR = 2"
    },
    {
      "trigger": "BLEND_ONE_MINUS_DST_COLOR",
      "contents": "BLEND_ONE_MINUS_DST_COLOR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ONE_MINUS_DST_COLOR = 3"
    },
    {
      "trigger": "BLEND_SRC_ALPHA",
      "contents": "BLEND_SRC_ALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_SRC_ALPHA = 4"
    },
    {
      "trigger": "BLEND_ONE_MINUS_SRC_ALPHA",
      "contents": "BLEND_ONE_MINUS_SRC_ALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ONE_MINUS_SRC_ALPHA = 5"
    },
    {
      "trigger": "BLEND_DST_ALPHA",
      "contents": "BLEND_DST_ALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_DST_ALPHA = 6"
    },
    {
      "trigger": "BLEND_ONE_MINUS_DST_ALPHA",
      "contents": "BLEND_ONE_MINUS_DST_ALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ONE_MINUS_DST_ALPHA = 7"
    },
    {
      "trigger": "BLEND_SRC_ALPHA_SATURATE",
      "contents": "BLEND_SRC_ALPHA_SATURATE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_SRC_ALPHA_SATURATE = 8"
    },
    {
      "trigger": "BLEND_SRC_COLOR",
      "contents": "BLEND_SRC_COLOR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_SRC_COLOR = 9"
    },
    {
      "trigger": "BLEND_ONE_MINUS_SRC_COLOR",
      "contents": "BLEND_ONE_MINUS_SRC_COLOR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLEND_ONE_MINUS_SRC_COLOR = 10"
    },
    {
      "trigger": "BLENDFUNC_ADD",
      "contents": "BLENDFUNC_ADD",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLENDFUNC_ADD = 0"
    },
    {
      "trigger": "BLENDFUNC_SUBTRACT",
      "contents": "BLENDFUNC_SUBTRACT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLENDFUNC_SUBTRACT = 1"
    },
    {
      "trigger": "BLENDFUNC_REVERSE_SUBTRACT",
      "contents": "BLENDFUNC_REVERSE_SUBTRACT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLENDFUNC_REVERSE_SUBTRACT = 2"
    },
    {
      "trigger": "BLENDFUNC_MIN",
      "contents": "BLENDFUNC_MIN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLENDFUNC_MIN = 3"
    },
    {
      "trigger": "BLENDFUNC_MAX",
      "contents": "BLENDFUNC_MAX",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLENDFUNC_MAX = 4"
    },
    {
      "trigger": "DONT_BLEED",
      "contents": "DONT_BLEED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DONT_BLEED = -1"
    },
    {
      "trigger": "BLOOD_COLOR_RED",
      "contents": "BLOOD_COLOR_RED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_RED = 0"
    },
    {
      "trigger": "BLOOD_COLOR_YELLOW",
      "contents": "BLOOD_COLOR_YELLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_YELLOW = 1"
    },
    {
      "trigger": "BLOOD_COLOR_GREEN",
      "contents": "BLOOD_COLOR_GREEN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_GREEN = 2"
    },
    {
      "trigger": "BLOOD_COLOR_MECH",
      "contents": "BLOOD_COLOR_MECH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_MECH = 3"
    },
    {
      "trigger": "BLOOD_COLOR_ANTLION",
      "contents": "BLOOD_COLOR_ANTLION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_ANTLION = 4"
    },
    {
      "trigger": "BLOOD_COLOR_ZOMBIE",
      "contents": "BLOOD_COLOR_ZOMBIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_ZOMBIE = 5"
    },
    {
      "trigger": "BLOOD_COLOR_ANTLION_WORKER",
      "contents": "BLOOD_COLOR_ANTLION_WORKER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BLOOD_COLOR_ANTLION_WORKER = 6"
    },
    {
      "trigger": "BONE_PHYSICALLY_SIMULATED",
      "contents": "BONE_PHYSICALLY_SIMULATED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_PHYSICALLY_SIMULATED = 1"
    },
    {
      "trigger": "BONE_PHYSICS_PROCEDURAL",
      "contents": "BONE_PHYSICS_PROCEDURAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_PHYSICS_PROCEDURAL = 2"
    },
    {
      "trigger": "BONE_ALWAYS_PROCEDURAL",
      "contents": "BONE_ALWAYS_PROCEDURAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_ALWAYS_PROCEDURAL = 4"
    },
    {
      "trigger": "BONE_SCREEN_ALIGN_SPHERE",
      "contents": "BONE_SCREEN_ALIGN_SPHERE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_SCREEN_ALIGN_SPHERE = 8"
    },
    {
      "trigger": "BONE_SCREEN_ALIGN_CYLINDER",
      "contents": "BONE_SCREEN_ALIGN_CYLINDER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_SCREEN_ALIGN_CYLINDER = 16"
    },
    {
      "trigger": "BONE_CALCULATE_MASK",
      "contents": "BONE_CALCULATE_MASK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_CALCULATE_MASK = 31"
    },
    {
      "trigger": "BONE_USED_BY_HITBOX",
      "contents": "BONE_USED_BY_HITBOX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_HITBOX = 256"
    },
    {
      "trigger": "BONE_USED_BY_ATTACHMENT",
      "contents": "BONE_USED_BY_ATTACHMENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_ATTACHMENT = 512"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD0",
      "contents": "BONE_USED_BY_VERTEX_LOD0",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD0 = 1024"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD1",
      "contents": "BONE_USED_BY_VERTEX_LOD1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD1 = 2048"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD2",
      "contents": "BONE_USED_BY_VERTEX_LOD2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD2 = 4096"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD3",
      "contents": "BONE_USED_BY_VERTEX_LOD3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD3 = 8192"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD4",
      "contents": "BONE_USED_BY_VERTEX_LOD4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD4 = 16384"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD5",
      "contents": "BONE_USED_BY_VERTEX_LOD5",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD5 = 32768"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD6",
      "contents": "BONE_USED_BY_VERTEX_LOD6",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD6 = 65536"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_LOD7",
      "contents": "BONE_USED_BY_VERTEX_LOD7",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_LOD7 = 131072"
    },
    {
      "trigger": "BONE_USED_BY_VERTEX_MASK",
      "contents": "BONE_USED_BY_VERTEX_MASK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_VERTEX_MASK = 261120"
    },
    {
      "trigger": "BONE_USED_BY_BONE_MERGE",
      "contents": "BONE_USED_BY_BONE_MERGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_BONE_MERGE = 262144"
    },
    {
      "trigger": "BONE_USED_BY_ANYTHING",
      "contents": "BONE_USED_BY_ANYTHING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_BY_ANYTHING = 524032"
    },
    {
      "trigger": "BONE_USED_MASK",
      "contents": "BONE_USED_MASK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BONE_USED_MASK = 524032"
    },
    {
      "trigger": "BOUNDS_COLLISION",
      "contents": "BOUNDS_COLLISION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOUNDS_COLLISION = 0"
    },
    {
      "trigger": "BOUNDS_HITBOXES",
      "contents": "BOUNDS_HITBOXES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOUNDS_HITBOXES = 2"
    },
    {
      "trigger": "BOX_FRONT",
      "contents": "BOX_FRONT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_FRONT = 0"
    },
    {
      "trigger": "BOX_BACK",
      "contents": "BOX_BACK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_BACK = 1"
    },
    {
      "trigger": "BOX_RIGHT",
      "contents": "BOX_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_RIGHT = 2"
    },
    {
      "trigger": "BOX_LEFT",
      "contents": "BOX_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_LEFT = 3"
    },
    {
      "trigger": "BOX_TOP",
      "contents": "BOX_TOP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_TOP = 4"
    },
    {
      "trigger": "BOX_BOTTOM",
      "contents": "BOX_BOTTOM",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOX_BOTTOM = 5"
    },
    {
      "trigger": "BUTTON_CODE_INVALID",
      "contents": "BUTTON_CODE_INVALID",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BUTTON_CODE_INVALID = -1"
    },
    {
      "trigger": "BUTTON_CODE_NONE",
      "contents": "BUTTON_CODE_NONE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BUTTON_CODE_NONE = 0"
    },
    {
      "trigger": "BUTTON_CODE_LAST",
      "contents": "BUTTON_CODE_LAST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BUTTON_CODE_LAST = 171"
    },
    {
      "trigger": "BUTTON_CODE_COUNT",
      "contents": "BUTTON_CODE_COUNT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BUTTON_CODE_COUNT = 172"
    },
    {
      "trigger": "CAP_SIMPLE_RADIUS_DAMAGE",
      "contents": "CAP_SIMPLE_RADIUS_DAMAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_SIMPLE_RADIUS_DAMAGE = -2147483648"
    },
    {
      "trigger": "CAP_MOVE_GROUND",
      "contents": "CAP_MOVE_GROUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_GROUND = 1"
    },
    {
      "trigger": "CAP_MOVE_JUMP",
      "contents": "CAP_MOVE_JUMP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_JUMP = 2"
    },
    {
      "trigger": "CAP_MOVE_FLY",
      "contents": "CAP_MOVE_FLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_FLY = 4"
    },
    {
      "trigger": "CAP_MOVE_CLIMB",
      "contents": "CAP_MOVE_CLIMB",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_CLIMB = 8"
    },
    {
      "trigger": "CAP_MOVE_SWIM",
      "contents": "CAP_MOVE_SWIM",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_SWIM = 16"
    },
    {
      "trigger": "CAP_MOVE_CRAWL",
      "contents": "CAP_MOVE_CRAWL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_CRAWL = 32"
    },
    {
      "trigger": "CAP_MOVE_SHOOT",
      "contents": "CAP_MOVE_SHOOT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_MOVE_SHOOT = 64"
    },
    {
      "trigger": "CAP_SKIP_NAV_GROUND_CHECK",
      "contents": "CAP_SKIP_NAV_GROUND_CHECK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_SKIP_NAV_GROUND_CHECK = 128"
    },
    {
      "trigger": "CAP_USE",
      "contents": "CAP_USE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_USE = 256"
    },
    {
      "trigger": "CAP_AUTO_DOORS",
      "contents": "CAP_AUTO_DOORS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_AUTO_DOORS = 1024"
    },
    {
      "trigger": "CAP_OPEN_DOORS",
      "contents": "CAP_OPEN_DOORS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_OPEN_DOORS = 2048"
    },
    {
      "trigger": "CAP_TURN_HEAD",
      "contents": "CAP_TURN_HEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_TURN_HEAD = 4096"
    },
    {
      "trigger": "CAP_WEAPON_RANGE_ATTACK1",
      "contents": "CAP_WEAPON_RANGE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_WEAPON_RANGE_ATTACK1 = 8192"
    },
    {
      "trigger": "CAP_WEAPON_RANGE_ATTACK2",
      "contents": "CAP_WEAPON_RANGE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_WEAPON_RANGE_ATTACK2 = 16384"
    },
    {
      "trigger": "CAP_WEAPON_MELEE_ATTACK1",
      "contents": "CAP_WEAPON_MELEE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_WEAPON_MELEE_ATTACK1 = 32768"
    },
    {
      "trigger": "CAP_WEAPON_MELEE_ATTACK2",
      "contents": "CAP_WEAPON_MELEE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_WEAPON_MELEE_ATTACK2 = 65536"
    },
    {
      "trigger": "CAP_INNATE_RANGE_ATTACK1",
      "contents": "CAP_INNATE_RANGE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_INNATE_RANGE_ATTACK1 = 131072"
    },
    {
      "trigger": "CAP_INNATE_RANGE_ATTACK2",
      "contents": "CAP_INNATE_RANGE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_INNATE_RANGE_ATTACK2 = 262144"
    },
    {
      "trigger": "CAP_INNATE_MELEE_ATTACK1",
      "contents": "CAP_INNATE_MELEE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_INNATE_MELEE_ATTACK1 = 524288"
    },
    {
      "trigger": "CAP_INNATE_MELEE_ATTACK2",
      "contents": "CAP_INNATE_MELEE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_INNATE_MELEE_ATTACK2 = 1048576"
    },
    {
      "trigger": "CAP_USE_WEAPONS",
      "contents": "CAP_USE_WEAPONS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_USE_WEAPONS = 2097152"
    },
    {
      "trigger": "CAP_USE_SHOT_REGULATOR",
      "contents": "CAP_USE_SHOT_REGULATOR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_USE_SHOT_REGULATOR = 16777216"
    },
    {
      "trigger": "CAP_ANIMATEDFACE",
      "contents": "CAP_ANIMATEDFACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_ANIMATEDFACE = 8388608"
    },
    {
      "trigger": "CAP_FRIENDLY_DMG_IMMUNE",
      "contents": "CAP_FRIENDLY_DMG_IMMUNE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_FRIENDLY_DMG_IMMUNE = 33554432"
    },
    {
      "trigger": "CAP_SQUAD",
      "contents": "CAP_SQUAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_SQUAD = 67108864"
    },
    {
      "trigger": "CAP_DUCK",
      "contents": "CAP_DUCK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_DUCK = 134217728"
    },
    {
      "trigger": "CAP_NO_HIT_PLAYER",
      "contents": "CAP_NO_HIT_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_NO_HIT_PLAYER = 268435456"
    },
    {
      "trigger": "CAP_AIM_GUN",
      "contents": "CAP_AIM_GUN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_AIM_GUN = 536870912"
    },
    {
      "trigger": "CAP_NO_HIT_SQUADMATES",
      "contents": "CAP_NO_HIT_SQUADMATES",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CAP_NO_HIT_SQUADMATES = 1073741824"
    },
    {
      "trigger": "CHAN_REPLACE",
      "contents": "CHAN_REPLACE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_REPLACE = -1"
    },
    {
      "trigger": "CHAN_AUTO",
      "contents": "CHAN_AUTO",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_AUTO = 0"
    },
    {
      "trigger": "CHAN_WEAPON",
      "contents": "CHAN_WEAPON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_WEAPON = 1"
    },
    {
      "trigger": "CHAN_VOICE",
      "contents": "CHAN_VOICE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_VOICE = 2"
    },
    {
      "trigger": "CHAN_ITEM",
      "contents": "CHAN_ITEM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_ITEM = 3"
    },
    {
      "trigger": "CHAN_BODY",
      "contents": "CHAN_BODY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_BODY = 4"
    },
    {
      "trigger": "CHAN_STREAM",
      "contents": "CHAN_STREAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_STREAM = 5"
    },
    {
      "trigger": "CHAN_STATIC",
      "contents": "CHAN_STATIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_STATIC = 6"
    },
    {
      "trigger": "CHAN_VOICE2",
      "contents": "CHAN_VOICE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_VOICE2 = 7"
    },
    {
      "trigger": "CHAN_VOICE_BASE",
      "contents": "CHAN_VOICE_BASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_VOICE_BASE = 8"
    },
    {
      "trigger": "CHAN_USER_BASE",
      "contents": "CHAN_USER_BASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CHAN_USER_BASE = 136"
    },
    {
      "trigger": "CLASS_NONE",
      "contents": "CLASS_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_NONE = 0"
    },
    {
      "trigger": "CLASS_PLAYER",
      "contents": "CLASS_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_PLAYER = 1"
    },
    {
      "trigger": "CLASS_PLAYER_ALLY",
      "contents": "CLASS_PLAYER_ALLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_PLAYER_ALLY = 2"
    },
    {
      "trigger": "CLASS_PLAYER_ALLY_VITAL",
      "contents": "CLASS_PLAYER_ALLY_VITAL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_PLAYER_ALLY_VITAL = 3"
    },
    {
      "trigger": "CLASS_ANTLION",
      "contents": "CLASS_ANTLION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ANTLION = 4"
    },
    {
      "trigger": "CLASS_BARNACLE",
      "contents": "CLASS_BARNACLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_BARNACLE = 5"
    },
    {
      "trigger": "CLASS_BULLSEYE",
      "contents": "CLASS_BULLSEYE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_BULLSEYE = 6"
    },
    {
      "trigger": "CLASS_CITIZEN_PASSIVE",
      "contents": "CLASS_CITIZEN_PASSIVE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_CITIZEN_PASSIVE = 7"
    },
    {
      "trigger": "CLASS_CITIZEN_REBEL",
      "contents": "CLASS_CITIZEN_REBEL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_CITIZEN_REBEL = 8"
    },
    {
      "trigger": "CLASS_COMBINE",
      "contents": "CLASS_COMBINE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_COMBINE = 9"
    },
    {
      "trigger": "CLASS_COMBINE_GUNSHIP",
      "contents": "CLASS_COMBINE_GUNSHIP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_COMBINE_GUNSHIP = 10"
    },
    {
      "trigger": "CLASS_CONSCRIPT",
      "contents": "CLASS_CONSCRIPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_CONSCRIPT = 11"
    },
    {
      "trigger": "CLASS_HEADCRAB",
      "contents": "CLASS_HEADCRAB",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_HEADCRAB = 12"
    },
    {
      "trigger": "CLASS_MANHACK",
      "contents": "CLASS_MANHACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_MANHACK = 13"
    },
    {
      "trigger": "CLASS_METROPOLICE",
      "contents": "CLASS_METROPOLICE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_METROPOLICE = 14"
    },
    {
      "trigger": "CLASS_MILITARY",
      "contents": "CLASS_MILITARY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_MILITARY = 15"
    },
    {
      "trigger": "CLASS_SCANNER",
      "contents": "CLASS_SCANNER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_SCANNER = 16"
    },
    {
      "trigger": "CLASS_STALKER",
      "contents": "CLASS_STALKER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_STALKER = 17"
    },
    {
      "trigger": "CLASS_VORTIGAUNT",
      "contents": "CLASS_VORTIGAUNT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_VORTIGAUNT = 18"
    },
    {
      "trigger": "CLASS_ZOMBIE",
      "contents": "CLASS_ZOMBIE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ZOMBIE = 19"
    },
    {
      "trigger": "CLASS_PROTOSNIPER",
      "contents": "CLASS_PROTOSNIPER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_PROTOSNIPER = 20"
    },
    {
      "trigger": "CLASS_MISSILE",
      "contents": "CLASS_MISSILE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_MISSILE = 21"
    },
    {
      "trigger": "CLASS_FLARE",
      "contents": "CLASS_FLARE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_FLARE = 22"
    },
    {
      "trigger": "CLASS_EARTH_FAUNA",
      "contents": "CLASS_EARTH_FAUNA",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_EARTH_FAUNA = 23"
    },
    {
      "trigger": "CLASS_HACKED_ROLLERMINE",
      "contents": "CLASS_HACKED_ROLLERMINE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_HACKED_ROLLERMINE = 24"
    },
    {
      "trigger": "CLASS_COMBINE_HUNTER",
      "contents": "CLASS_COMBINE_HUNTER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_COMBINE_HUNTER = 25"
    },
    {
      "trigger": "CLASS_MACHINE",
      "contents": "CLASS_MACHINE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_MACHINE = 26"
    },
    {
      "trigger": "CLASS_HUMAN_PASSIVE",
      "contents": "CLASS_HUMAN_PASSIVE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_HUMAN_PASSIVE = 27"
    },
    {
      "trigger": "CLASS_HUMAN_MILITARY",
      "contents": "CLASS_HUMAN_MILITARY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_HUMAN_MILITARY = 28"
    },
    {
      "trigger": "CLASS_ALIEN_MILITARY",
      "contents": "CLASS_ALIEN_MILITARY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ALIEN_MILITARY = 29"
    },
    {
      "trigger": "CLASS_ALIEN_MONSTER",
      "contents": "CLASS_ALIEN_MONSTER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ALIEN_MONSTER = 30"
    },
    {
      "trigger": "CLASS_ALIEN_PREY",
      "contents": "CLASS_ALIEN_PREY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ALIEN_PREY = 31"
    },
    {
      "trigger": "CLASS_ALIEN_PREDATOR",
      "contents": "CLASS_ALIEN_PREDATOR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ALIEN_PREDATOR = 32"
    },
    {
      "trigger": "CLASS_INSECT",
      "contents": "CLASS_INSECT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_INSECT = 33"
    },
    {
      "trigger": "CLASS_PLAYER_BIOWEAPON",
      "contents": "CLASS_PLAYER_BIOWEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_PLAYER_BIOWEAPON = 34"
    },
    {
      "trigger": "CLASS_ALIEN_BIOWEAPON",
      "contents": "CLASS_ALIEN_BIOWEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CLASS_ALIEN_BIOWEAPON = 35"
    },
    {
      "trigger": "COLLISION_GROUP_NONE",
      "contents": "COLLISION_GROUP_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_NONE = 0"
    },
    {
      "trigger": "COLLISION_GROUP_DEBRIS",
      "contents": "COLLISION_GROUP_DEBRIS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_DEBRIS = 1"
    },
    {
      "trigger": "COLLISION_GROUP_DEBRIS_TRIGGER",
      "contents": "COLLISION_GROUP_DEBRIS_TRIGGER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_DEBRIS_TRIGGER = 2"
    },
    {
      "trigger": "COLLISION_GROUP_INTERACTIVE_DEBRIS",
      "contents": "COLLISION_GROUP_INTERACTIVE_DEBRIS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_INTERACTIVE_DEBRIS = 3"
    },
    {
      "trigger": "COLLISION_GROUP_INTERACTIVE",
      "contents": "COLLISION_GROUP_INTERACTIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_INTERACTIVE = 4"
    },
    {
      "trigger": "COLLISION_GROUP_PLAYER",
      "contents": "COLLISION_GROUP_PLAYER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_PLAYER = 5"
    },
    {
      "trigger": "COLLISION_GROUP_BREAKABLE_GLASS",
      "contents": "COLLISION_GROUP_BREAKABLE_GLASS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_BREAKABLE_GLASS = 6"
    },
    {
      "trigger": "COLLISION_GROUP_VEHICLE",
      "contents": "COLLISION_GROUP_VEHICLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_VEHICLE = 7"
    },
    {
      "trigger": "COLLISION_GROUP_PLAYER_MOVEMENT",
      "contents": "COLLISION_GROUP_PLAYER_MOVEMENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_PLAYER_MOVEMENT = 8"
    },
    {
      "trigger": "COLLISION_GROUP_NPC",
      "contents": "COLLISION_GROUP_NPC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_NPC = 9"
    },
    {
      "trigger": "COLLISION_GROUP_IN_VEHICLE",
      "contents": "COLLISION_GROUP_IN_VEHICLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_IN_VEHICLE = 10"
    },
    {
      "trigger": "COLLISION_GROUP_WEAPON",
      "contents": "COLLISION_GROUP_WEAPON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_WEAPON = 11"
    },
    {
      "trigger": "COLLISION_GROUP_VEHICLE_CLIP",
      "contents": "COLLISION_GROUP_VEHICLE_CLIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_VEHICLE_CLIP = 12"
    },
    {
      "trigger": "COLLISION_GROUP_PROJECTILE",
      "contents": "COLLISION_GROUP_PROJECTILE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_PROJECTILE = 13"
    },
    {
      "trigger": "COLLISION_GROUP_DOOR_BLOCKER",
      "contents": "COLLISION_GROUP_DOOR_BLOCKER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_DOOR_BLOCKER = 14"
    },
    {
      "trigger": "COLLISION_GROUP_PASSABLE_DOOR",
      "contents": "COLLISION_GROUP_PASSABLE_DOOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_PASSABLE_DOOR = 15"
    },
    {
      "trigger": "COLLISION_GROUP_DISSOLVING",
      "contents": "COLLISION_GROUP_DISSOLVING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_DISSOLVING = 16"
    },
    {
      "trigger": "COLLISION_GROUP_PUSHAWAY",
      "contents": "COLLISION_GROUP_PUSHAWAY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_PUSHAWAY = 17"
    },
    {
      "trigger": "COLLISION_GROUP_NPC_ACTOR",
      "contents": "COLLISION_GROUP_NPC_ACTOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_NPC_ACTOR = 18"
    },
    {
      "trigger": "COLLISION_GROUP_NPC_SCRIPTED",
      "contents": "COLLISION_GROUP_NPC_SCRIPTED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_NPC_SCRIPTED = 19"
    },
    {
      "trigger": "COLLISION_GROUP_WORLD",
      "contents": "COLLISION_GROUP_WORLD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COLLISION_GROUP_WORLD = 20"
    },
    {
      "trigger": "LAST_SHARED_COLLISION_GROUP",
      "contents": "LAST_SHARED_COLLISION_GROUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "LAST_SHARED_COLLISION_GROUP = 21"
    },
    {
      "trigger": "COND.BEHIND_ENEMY",
      "contents": "COND.BEHIND_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.BEHIND_ENEMY = 29"
    },
    {
      "trigger": "COND.BETTER_WEAPON_AVAILABLE",
      "contents": "COND.BETTER_WEAPON_AVAILABLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.BETTER_WEAPON_AVAILABLE = 46"
    },
    {
      "trigger": "COND.CAN_MELEE_ATTACK1",
      "contents": "COND.CAN_MELEE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.CAN_MELEE_ATTACK1 = 23"
    },
    {
      "trigger": "COND.CAN_MELEE_ATTACK2",
      "contents": "COND.CAN_MELEE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.CAN_MELEE_ATTACK2 = 24"
    },
    {
      "trigger": "COND.CAN_RANGE_ATTACK1",
      "contents": "COND.CAN_RANGE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.CAN_RANGE_ATTACK1 = 21"
    },
    {
      "trigger": "COND.CAN_RANGE_ATTACK2",
      "contents": "COND.CAN_RANGE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.CAN_RANGE_ATTACK2 = 22"
    },
    {
      "trigger": "COND.ENEMY_DEAD",
      "contents": "COND.ENEMY_DEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_DEAD = 30"
    },
    {
      "trigger": "COND.ENEMY_FACING_ME",
      "contents": "COND.ENEMY_FACING_ME",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_FACING_ME = 28"
    },
    {
      "trigger": "COND.ENEMY_OCCLUDED",
      "contents": "COND.ENEMY_OCCLUDED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_OCCLUDED = 13"
    },
    {
      "trigger": "COND.ENEMY_TOO_FAR",
      "contents": "COND.ENEMY_TOO_FAR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_TOO_FAR = 27"
    },
    {
      "trigger": "COND.ENEMY_UNREACHABLE",
      "contents": "COND.ENEMY_UNREACHABLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_UNREACHABLE = 31"
    },
    {
      "trigger": "COND.ENEMY_WENT_NULL",
      "contents": "COND.ENEMY_WENT_NULL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.ENEMY_WENT_NULL = 12"
    },
    {
      "trigger": "COND.FLOATING_OFF_GROUND",
      "contents": "COND.FLOATING_OFF_GROUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.FLOATING_OFF_GROUND = 61"
    },
    {
      "trigger": "COND.GIVE_WAY",
      "contents": "COND.GIVE_WAY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.GIVE_WAY = 48"
    },
    {
      "trigger": "COND.HAVE_ENEMY_LOS",
      "contents": "COND.HAVE_ENEMY_LOS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HAVE_ENEMY_LOS = 15"
    },
    {
      "trigger": "COND.HAVE_TARGET_LOS",
      "contents": "COND.HAVE_TARGET_LOS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HAVE_TARGET_LOS = 16"
    },
    {
      "trigger": "COND.HEALTH_ITEM_AVAILABLE",
      "contents": "COND.HEALTH_ITEM_AVAILABLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEALTH_ITEM_AVAILABLE = 47"
    },
    {
      "trigger": "COND.HEAR_BUGBAIT",
      "contents": "COND.HEAR_BUGBAIT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_BUGBAIT = 52"
    },
    {
      "trigger": "COND.HEAR_BULLET_IMPACT",
      "contents": "COND.HEAR_BULLET_IMPACT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_BULLET_IMPACT = 56"
    },
    {
      "trigger": "COND.HEAR_COMBAT",
      "contents": "COND.HEAR_COMBAT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_COMBAT = 53"
    },
    {
      "trigger": "COND.HEAR_DANGER",
      "contents": "COND.HEAR_DANGER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_DANGER = 50"
    },
    {
      "trigger": "COND.HEAR_MOVE_AWAY",
      "contents": "COND.HEAR_MOVE_AWAY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_MOVE_AWAY = 58"
    },
    {
      "trigger": "COND.HEAR_PHYSICS_DANGER",
      "contents": "COND.HEAR_PHYSICS_DANGER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_PHYSICS_DANGER = 57"
    },
    {
      "trigger": "COND.HEAR_PLAYER",
      "contents": "COND.HEAR_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_PLAYER = 55"
    },
    {
      "trigger": "COND.HEAR_SPOOKY",
      "contents": "COND.HEAR_SPOOKY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_SPOOKY = 59"
    },
    {
      "trigger": "COND.HEAR_THUMPER",
      "contents": "COND.HEAR_THUMPER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_THUMPER = 51"
    },
    {
      "trigger": "COND.HEAR_WORLD",
      "contents": "COND.HEAR_WORLD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAR_WORLD = 54"
    },
    {
      "trigger": "COND.HEAVY_DAMAGE",
      "contents": "COND.HEAVY_DAMAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.HEAVY_DAMAGE = 18"
    },
    {
      "trigger": "COND.IDLE_INTERRUPT",
      "contents": "COND.IDLE_INTERRUPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.IDLE_INTERRUPT = 2"
    },
    {
      "trigger": "COND.IN_PVS",
      "contents": "COND.IN_PVS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.IN_PVS = 1"
    },
    {
      "trigger": "COND.LIGHT_DAMAGE",
      "contents": "COND.LIGHT_DAMAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.LIGHT_DAMAGE = 17"
    },
    {
      "trigger": "COND.LOST_ENEMY",
      "contents": "COND.LOST_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.LOST_ENEMY = 11"
    },
    {
      "trigger": "COND.LOST_PLAYER",
      "contents": "COND.LOST_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.LOST_PLAYER = 33"
    },
    {
      "trigger": "COND.LOW_PRIMARY_AMMO",
      "contents": "COND.LOW_PRIMARY_AMMO",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.LOW_PRIMARY_AMMO = 3"
    },
    {
      "trigger": "COND.MOBBED_BY_ENEMIES",
      "contents": "COND.MOBBED_BY_ENEMIES",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.MOBBED_BY_ENEMIES = 62"
    },
    {
      "trigger": "COND.NEW_ENEMY",
      "contents": "COND.NEW_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NEW_ENEMY = 26"
    },
    {
      "trigger": "COND.NO_CUSTOM_INTERRUPTS",
      "contents": "COND.NO_CUSTOM_INTERRUPTS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NO_CUSTOM_INTERRUPTS = 70"
    },
    {
      "trigger": "COND.NO_HEAR_DANGER",
      "contents": "COND.NO_HEAR_DANGER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NO_HEAR_DANGER = 60"
    },
    {
      "trigger": "COND.NO_PRIMARY_AMMO",
      "contents": "COND.NO_PRIMARY_AMMO",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NO_PRIMARY_AMMO = 4"
    },
    {
      "trigger": "COND.NO_SECONDARY_AMMO",
      "contents": "COND.NO_SECONDARY_AMMO",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NO_SECONDARY_AMMO = 5"
    },
    {
      "trigger": "COND.NO_WEAPON",
      "contents": "COND.NO_WEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NO_WEAPON = 6"
    },
    {
      "trigger": "COND.NONE",
      "contents": "COND.NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NONE = 0"
    },
    {
      "trigger": "COND.NOT_FACING_ATTACK",
      "contents": "COND.NOT_FACING_ATTACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NOT_FACING_ATTACK = 40"
    },
    {
      "trigger": "COND.NPC_FREEZE",
      "contents": "COND.NPC_FREEZE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NPC_FREEZE = 67"
    },
    {
      "trigger": "COND.NPC_UNFREEZE",
      "contents": "COND.NPC_UNFREEZE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.NPC_UNFREEZE = 68"
    },
    {
      "trigger": "COND.PHYSICS_DAMAGE",
      "contents": "COND.PHYSICS_DAMAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.PHYSICS_DAMAGE = 19"
    },
    {
      "trigger": "COND.PLAYER_ADDED_TO_SQUAD",
      "contents": "COND.PLAYER_ADDED_TO_SQUAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.PLAYER_ADDED_TO_SQUAD = 64"
    },
    {
      "trigger": "COND.PLAYER_PUSHING",
      "contents": "COND.PLAYER_PUSHING",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.PLAYER_PUSHING = 66"
    },
    {
      "trigger": "COND.PLAYER_REMOVED_FROM_SQUAD",
      "contents": "COND.PLAYER_REMOVED_FROM_SQUAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.PLAYER_REMOVED_FROM_SQUAD = 65"
    },
    {
      "trigger": "COND.PROVOKED",
      "contents": "COND.PROVOKED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.PROVOKED = 25"
    },
    {
      "trigger": "COND.RECEIVED_ORDERS",
      "contents": "COND.RECEIVED_ORDERS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.RECEIVED_ORDERS = 63"
    },
    {
      "trigger": "COND.REPEATED_DAMAGE",
      "contents": "COND.REPEATED_DAMAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.REPEATED_DAMAGE = 20"
    },
    {
      "trigger": "COND.SCHEDULE_DONE",
      "contents": "COND.SCHEDULE_DONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SCHEDULE_DONE = 36"
    },
    {
      "trigger": "COND.SEE_DISLIKE",
      "contents": "COND.SEE_DISLIKE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_DISLIKE = 9"
    },
    {
      "trigger": "COND.SEE_ENEMY",
      "contents": "COND.SEE_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_ENEMY = 10"
    },
    {
      "trigger": "COND.SEE_FEAR",
      "contents": "COND.SEE_FEAR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_FEAR = 8"
    },
    {
      "trigger": "COND.SEE_HATE",
      "contents": "COND.SEE_HATE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_HATE = 7"
    },
    {
      "trigger": "COND.SEE_NEMESIS",
      "contents": "COND.SEE_NEMESIS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_NEMESIS = 34"
    },
    {
      "trigger": "COND.SEE_PLAYER",
      "contents": "COND.SEE_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SEE_PLAYER = 32"
    },
    {
      "trigger": "COND.SMELL",
      "contents": "COND.SMELL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.SMELL = 37"
    },
    {
      "trigger": "COND.TALKER_RESPOND_TO_QUESTION",
      "contents": "COND.TALKER_RESPOND_TO_QUESTION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.TALKER_RESPOND_TO_QUESTION = 69"
    },
    {
      "trigger": "COND.TARGET_OCCLUDED",
      "contents": "COND.TARGET_OCCLUDED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.TARGET_OCCLUDED = 14"
    },
    {
      "trigger": "COND.TASK_FAILED",
      "contents": "COND.TASK_FAILED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.TASK_FAILED = 35"
    },
    {
      "trigger": "COND.TOO_CLOSE_TO_ATTACK",
      "contents": "COND.TOO_CLOSE_TO_ATTACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.TOO_CLOSE_TO_ATTACK = 38"
    },
    {
      "trigger": "COND.TOO_FAR_TO_ATTACK",
      "contents": "COND.TOO_FAR_TO_ATTACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.TOO_FAR_TO_ATTACK = 39"
    },
    {
      "trigger": "COND.WAY_CLEAR",
      "contents": "COND.WAY_CLEAR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.WAY_CLEAR = 49"
    },
    {
      "trigger": "COND.WEAPON_BLOCKED_BY_FRIEND",
      "contents": "COND.WEAPON_BLOCKED_BY_FRIEND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.WEAPON_BLOCKED_BY_FRIEND = 42"
    },
    {
      "trigger": "COND.WEAPON_HAS_LOS",
      "contents": "COND.WEAPON_HAS_LOS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.WEAPON_HAS_LOS = 41"
    },
    {
      "trigger": "COND.WEAPON_PLAYER_IN_SPREAD",
      "contents": "COND.WEAPON_PLAYER_IN_SPREAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.WEAPON_PLAYER_IN_SPREAD = 43"
    },
    {
      "trigger": "COND.WEAPON_PLAYER_NEAR_TARGET",
      "contents": "COND.WEAPON_PLAYER_NEAR_TARGET",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND.WEAPON_PLAYER_NEAR_TARGET = 44"
    },
    {
      "trigger": "COND-WEAPON_SIGHT_OCCLUDED",
      "contents": "COND-WEAPON_SIGHT_OCCLUDED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "COND-WEAPON_SIGHT_OCCLUDED = 45"
    },
    {
      "trigger": "CONTENTS_EMPTY",
      "contents": "CONTENTS_EMPTY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_EMPTY = 0"
    },
    {
      "trigger": "CONTENTS_SOLID",
      "contents": "CONTENTS_SOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_SOLID = 1"
    },
    {
      "trigger": "CONTENTS_WINDOW",
      "contents": "CONTENTS_WINDOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_WINDOW = 2"
    },
    {
      "trigger": "CONTENTS_AUX",
      "contents": "CONTENTS_AUX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_AUX = 4"
    },
    {
      "trigger": "CONTENTS_GRATE",
      "contents": "CONTENTS_GRATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_GRATE = 8"
    },
    {
      "trigger": "CONTENTS_SLIME",
      "contents": "CONTENTS_SLIME",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_SLIME = 16"
    },
    {
      "trigger": "CONTENTS_WATER",
      "contents": "CONTENTS_WATER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_WATER = 32"
    },
    {
      "trigger": "CONTENTS_BLOCKLOS",
      "contents": "CONTENTS_BLOCKLOS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_BLOCKLOS = 64"
    },
    {
      "trigger": "CONTENTS_OPAQUE",
      "contents": "CONTENTS_OPAQUE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_OPAQUE = 128"
    },
    {
      "trigger": "CONTENTS_TESTFOGVOLUME",
      "contents": "CONTENTS_TESTFOGVOLUME",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TESTFOGVOLUME = 256"
    },
    {
      "trigger": "CONTENTS_TEAM4",
      "contents": "CONTENTS_TEAM4",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TEAM4 = 512"
    },
    {
      "trigger": "CONTENTS_TEAM3",
      "contents": "CONTENTS_TEAM3",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TEAM3 = 1024"
    },
    {
      "trigger": "CONTENTS_TEAM1",
      "contents": "CONTENTS_TEAM1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TEAM1 = 2048"
    },
    {
      "trigger": "CONTENTS_TEAM2",
      "contents": "CONTENTS_TEAM2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TEAM2 = 4096"
    },
    {
      "trigger": "CONTENTS_IGNORE_NODRAW_OPAQUE",
      "contents": "CONTENTS_IGNORE_NODRAW_OPAQUE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_IGNORE_NODRAW_OPAQUE = 8192"
    },
    {
      "trigger": "CONTENTS_MOVEABLE",
      "contents": "CONTENTS_MOVEABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_MOVEABLE = 16384"
    },
    {
      "trigger": "CONTENTS_AREAPORTAL",
      "contents": "CONTENTS_AREAPORTAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_AREAPORTAL = 32768"
    },
    {
      "trigger": "CONTENTS_PLAYERCLIP",
      "contents": "CONTENTS_PLAYERCLIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_PLAYERCLIP = 65536"
    },
    {
      "trigger": "CONTENTS_MONSTERCLIP",
      "contents": "CONTENTS_MONSTERCLIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_MONSTERCLIP = 131072"
    },
    {
      "trigger": "CONTENTS_CURRENT_0",
      "contents": "CONTENTS_CURRENT_0",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_0 = 262144"
    },
    {
      "trigger": "CONTENTS_CURRENT_180",
      "contents": "CONTENTS_CURRENT_180",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_180 = 1048576"
    },
    {
      "trigger": "CONTENTS_CURRENT_270",
      "contents": "CONTENTS_CURRENT_270",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_270 = 2097152"
    },
    {
      "trigger": "CONTENTS_CURRENT_90",
      "contents": "CONTENTS_CURRENT_90",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_90 = 524288"
    },
    {
      "trigger": "CONTENTS_CURRENT_DOWN",
      "contents": "CONTENTS_CURRENT_DOWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_DOWN = 8388608"
    },
    {
      "trigger": "CONTENTS_CURRENT_UP",
      "contents": "CONTENTS_CURRENT_UP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_CURRENT_UP = 4194304"
    },
    {
      "trigger": "CONTENTS_DEBRIS",
      "contents": "CONTENTS_DEBRIS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_DEBRIS = 67108864"
    },
    {
      "trigger": "CONTENTS_DETAIL",
      "contents": "CONTENTS_DETAIL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_DETAIL = 134217728"
    },
    {
      "trigger": "CONTENTS_HITBOX",
      "contents": "CONTENTS_HITBOX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_HITBOX = 1073741824"
    },
    {
      "trigger": "CONTENTS_LADDER",
      "contents": "CONTENTS_LADDER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_LADDER = 536870912"
    },
    {
      "trigger": "CONTENTS_MONSTER",
      "contents": "CONTENTS_MONSTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_MONSTER = 33554432"
    },
    {
      "trigger": "CONTENTS_ORIGIN",
      "contents": "CONTENTS_ORIGIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_ORIGIN = 16777216"
    },
    {
      "trigger": "CONTENTS_TRANSLUCENT",
      "contents": "CONTENTS_TRANSLUCENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CONTENTS_TRANSLUCENT = 268435456"
    },
    {
      "trigger": "LAST_VISIBLE_CONTENTS",
      "contents": "LAST_VISIBLE_CONTENTS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "LAST_VISIBLE_CONTENTS = 128"
    },
    {
      "trigger": "ALL_VISIBLE_CONTENTS",
      "contents": "ALL_VISIBLE_CONTENTS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "ALL_VISIBLE_CONTENTS = 255"
    },
    {
      "trigger": "CREATERENDERTARGETFLAGS_HDR",
      "contents": "CREATERENDERTARGETFLAGS_HDR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CREATERENDERTARGETFLAGS_HDR = 1"
    },
    {
      "trigger": "CREATERENDERTARGETFLAGS_AUTOMIPMAP",
      "contents": "CREATERENDERTARGETFLAGS_AUTOMIPMAP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CREATERENDERTARGETFLAGS_AUTOMIPMAP = 2"
    },
    {
      "trigger": "CREATERENDERTARGETFLAGS_UNFILTERABLE_OK",
      "contents": "CREATERENDERTARGETFLAGS_UNFILTERABLE_OK",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CREATERENDERTARGETFLAGS_UNFILTERABLE_OK = 4"
    },
    {
      "trigger": "CT_DEFAULT",
      "contents": "CT_DEFAULT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CT_DEFAULT = 0"
    },
    {
      "trigger": "CT_DOWNTRODDEN",
      "contents": "CT_DOWNTRODDEN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CT_DOWNTRODDEN = 1"
    },
    {
      "trigger": "CT_REFUGEE",
      "contents": "CT_REFUGEE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CT_REFUGEE = 2"
    },
    {
      "trigger": "CT_REBEL",
      "contents": "CT_REBEL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CT_REBEL = 3"
    },
    {
      "trigger": "CT_UNIQUE",
      "contents": "CT_UNIQUE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "CT_UNIQUE = 4"
    },
    {
      "trigger": "D_ER",
      "contents": "D_ER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "D_ER = 0"
    },
    {
      "trigger": "D_HT",
      "contents": "D_HT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "D_HT = 1"
    },
    {
      "trigger": "D_FR",
      "contents": "D_FR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "D_FR = 2"
    },
    {
      "trigger": "D_LI",
      "contents": "D_LI",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "D_LI = 3"
    },
    {
      "trigger": "D_NU",
      "contents": "D_NU",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "D_NU = 4"
    },
    {
      "trigger": "DISPSURF_SURFACE",
      "contents": "DISPSURF_SURFACE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DISPSURF_SURFACE = 1"
    },
    {
      "trigger": "DISPSURF_WALKABLE",
      "contents": "DISPSURF_WALKABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DISPSURF_WALKABLE = 2"
    },
    {
      "trigger": "DISPSURF_BUILDABLE",
      "contents": "DISPSURF_BUILDABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DISPSURF_BUILDABLE = 4"
    },
    {
      "trigger": "DISPSURF_SURFPROP1",
      "contents": "DISPSURF_SURFPROP1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DISPSURF_SURFPROP1 = 8"
    },
    {
      "trigger": "DISPSURF_SURFPROP2",
      "contents": "DISPSURF_SURFPROP2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DISPSURF_SURFPROP2 = 16"
    },
    {
      "trigger": "DMG_GENERIC",
      "contents": "DMG_GENERIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_GENERIC = 0"
    },
    {
      "trigger": "DMG_CRUSH",
      "contents": "DMG_CRUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_CRUSH = 1"
    },
    {
      "trigger": "DMG_BULLET",
      "contents": "DMG_BULLET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_BULLET = 2"
    },
    {
      "trigger": "DMG_SLASH",
      "contents": "DMG_SLASH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_SLASH = 4"
    },
    {
      "trigger": "DMG_BURN",
      "contents": "DMG_BURN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_BURN = 8"
    },
    {
      "trigger": "DMG_VEHICLE",
      "contents": "DMG_VEHICLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_VEHICLE = 16"
    },
    {
      "trigger": "DMG_FALL",
      "contents": "DMG_FALL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_FALL = 32"
    },
    {
      "trigger": "DMG_BLAST",
      "contents": "DMG_BLAST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_BLAST = 64"
    },
    {
      "trigger": "DMG_CLUB",
      "contents": "DMG_CLUB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_CLUB = 128"
    },
    {
      "trigger": "DMG_SHOCK",
      "contents": "DMG_SHOCK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_SHOCK = 256"
    },
    {
      "trigger": "DMG_SONIC",
      "contents": "DMG_SONIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_SONIC = 512"
    },
    {
      "trigger": "DMG_ENERGYBEAM",
      "contents": "DMG_ENERGYBEAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_ENERGYBEAM = 1024"
    },
    {
      "trigger": "DMG_PREVENT_PHYSICS_FORCE",
      "contents": "DMG_PREVENT_PHYSICS_FORCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_PREVENT_PHYSICS_FORCE = 2048"
    },
    {
      "trigger": "DMG_NEVERGIB",
      "contents": "DMG_NEVERGIB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_NEVERGIB = 4096"
    },
    {
      "trigger": "DMG_ALWAYSGIB",
      "contents": "DMG_ALWAYSGIB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_ALWAYSGIB = 8192"
    },
    {
      "trigger": "DMG_DROWN",
      "contents": "DMG_DROWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_DROWN = 16384"
    },
    {
      "trigger": "DMG_PARALYZE",
      "contents": "DMG_PARALYZE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_PARALYZE = 32768"
    },
    {
      "trigger": "DMG_NERVEGAS",
      "contents": "DMG_NERVEGAS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_NERVEGAS = 65536"
    },
    {
      "trigger": "DMG_POISON",
      "contents": "DMG_POISON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_POISON = 131072"
    },
    {
      "trigger": "DMG_RADIATION",
      "contents": "DMG_RADIATION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_RADIATION = 262144"
    },
    {
      "trigger": "DMG_DROWNRECOVER",
      "contents": "DMG_DROWNRECOVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_DROWNRECOVER = 524288"
    },
    {
      "trigger": "DMG_ACID",
      "contents": "DMG_ACID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_ACID = 1048576"
    },
    {
      "trigger": "DMG_SLOWBURN",
      "contents": "DMG_SLOWBURN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_SLOWBURN = 2097152"
    },
    {
      "trigger": "DMG_REMOVENORAGDOLL",
      "contents": "DMG_REMOVENORAGDOLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_REMOVENORAGDOLL = 4194304"
    },
    {
      "trigger": "DMG_PHYSGUN",
      "contents": "DMG_PHYSGUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_PHYSGUN = 8388608"
    },
    {
      "trigger": "DMG_PLASMA",
      "contents": "DMG_PLASMA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_PLASMA = 16777216"
    },
    {
      "trigger": "DMG_AIRBOAT",
      "contents": "DMG_AIRBOAT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_AIRBOAT = 33554432"
    },
    {
      "trigger": "DMG_DISSOLVE",
      "contents": "DMG_DISSOLVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_DISSOLVE = 67108864"
    },
    {
      "trigger": "DMG_BLAST_SURFACE",
      "contents": "DMG_BLAST_SURFACE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_BLAST_SURFACE = 134217728"
    },
    {
      "trigger": "DMG_DIRECT",
      "contents": "DMG_DIRECT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_DIRECT = 268435456"
    },
    {
      "trigger": "DMG_BUCKSHOT",
      "contents": "DMG_BUCKSHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_BUCKSHOT = 536870912"
    },
    {
      "trigger": "DMG_SNIPER",
      "contents": "DMG_SNIPER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_SNIPER = 1073741824"
    },
    {
      "trigger": "DMG_MISSILEDEFENSE",
      "contents": "DMG_MISSILEDEFENSE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DMG_MISSILEDEFENSE = 2147483648"
    },
    {
      "trigger": "NODOCK",
      "contents": "NODOCK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NODOCK = 0"
    },
    {
      "trigger": "FILL",
      "contents": "FILL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FILL = 1"
    },
    {
      "trigger": "LEFT",
      "contents": "LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "LEFT = 2"
    },
    {
      "trigger": "RIGHT",
      "contents": "RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RIGHT = 3"
    },
    {
      "trigger": "TOP",
      "contents": "TOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TOP = 4"
    },
    {
      "trigger": "BOTTOM",
      "contents": "BOTTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "BOTTOM = 5"
    },
    {
      "trigger": "DOF_OFFSET",
      "contents": "DOF_OFFSET",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DOF_OFFSET = 256"
    },
    {
      "trigger": "DOF_SPACING",
      "contents": "DOF_SPACING",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "DOF_SPACING = 512"
    },
    {
      "trigger": "EF_BONEMERGE",
      "contents": "EF_BONEMERGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_BONEMERGE = 1"
    },
    {
      "trigger": "EF_BONEMERGE_FASTCULL",
      "contents": "EF_BONEMERGE_FASTCULL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_BONEMERGE_FASTCULL = 128"
    },
    {
      "trigger": "EF_BRIGHTLIGHT",
      "contents": "EF_BRIGHTLIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_BRIGHTLIGHT = 2"
    },
    {
      "trigger": "EF_DIMLIGHT",
      "contents": "EF_DIMLIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_DIMLIGHT = 4"
    },
    {
      "trigger": "EF_NOINTERP",
      "contents": "EF_NOINTERP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_NOINTERP = 8"
    },
    {
      "trigger": "EF_NOSHADOW",
      "contents": "EF_NOSHADOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_NOSHADOW = 16"
    },
    {
      "trigger": "EF_NODRAW",
      "contents": "EF_NODRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_NODRAW = 32"
    },
    {
      "trigger": "EF_NORECEIVESHADOW",
      "contents": "EF_NORECEIVESHADOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_NORECEIVESHADOW = 64"
    },
    {
      "trigger": "EF_ITEM_BLINK",
      "contents": "EF_ITEM_BLINK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_ITEM_BLINK = 256"
    },
    {
      "trigger": "EF_PARENT_ANIMATES",
      "contents": "EF_PARENT_ANIMATES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_PARENT_ANIMATES = 512"
    },
    {
      "trigger": "EF_FOLLOWBONE",
      "contents": "EF_FOLLOWBONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_FOLLOWBONE = 1024"
    },
    {
      "trigger": "EF_NOFLASHLIGHT",
      "contents": "EF_NOFLASHLIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EF_NOFLASHLIGHT = 8192"
    },
    {
      "trigger": "EFL_KILLME",
      "contents": "EFL_KILLME",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_KILLME = 1"
    },
    {
      "trigger": "EFL_DORMANT",
      "contents": "EFL_DORMANT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DORMANT = 2"
    },
    {
      "trigger": "EFL_NOCLIP_ACTIVE",
      "contents": "EFL_NOCLIP_ACTIVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NOCLIP_ACTIVE = 4"
    },
    {
      "trigger": "EFL_SETTING_UP_BONES",
      "contents": "EFL_SETTING_UP_BONES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_SETTING_UP_BONES = 8"
    },
    {
      "trigger": "EFL_KEEP_ON_RECREATE_ENTITIES",
      "contents": "EFL_KEEP_ON_RECREATE_ENTITIES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_KEEP_ON_RECREATE_ENTITIES = 16"
    },
    {
      "trigger": "EFL_HAS_PLAYER_CHILD",
      "contents": "EFL_HAS_PLAYER_CHILD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_HAS_PLAYER_CHILD = 16"
    },
    {
      "trigger": "EFL_DIRTY_SHADOWUPDATE",
      "contents": "EFL_DIRTY_SHADOWUPDATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_SHADOWUPDATE = 32"
    },
    {
      "trigger": "EFL_NOTIFY",
      "contents": "EFL_NOTIFY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NOTIFY = 64"
    },
    {
      "trigger": "EFL_FORCE_CHECK_TRANSMIT",
      "contents": "EFL_FORCE_CHECK_TRANSMIT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_FORCE_CHECK_TRANSMIT = 128"
    },
    {
      "trigger": "EFL_BOT_FROZEN",
      "contents": "EFL_BOT_FROZEN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_BOT_FROZEN = 256"
    },
    {
      "trigger": "EFL_SERVER_ONLY",
      "contents": "EFL_SERVER_ONLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_SERVER_ONLY = 512"
    },
    {
      "trigger": "EFL_NO_AUTO_EDICT_ATTACH",
      "contents": "EFL_NO_AUTO_EDICT_ATTACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_AUTO_EDICT_ATTACH = 1024"
    },
    {
      "trigger": "EFL_DIRTY_ABSTRANSFORM",
      "contents": "EFL_DIRTY_ABSTRANSFORM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_ABSTRANSFORM = 2048"
    },
    {
      "trigger": "EFL_DIRTY_ABSVELOCITY",
      "contents": "EFL_DIRTY_ABSVELOCITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_ABSVELOCITY = 4096"
    },
    {
      "trigger": "EFL_DIRTY_ABSANGVELOCITY",
      "contents": "EFL_DIRTY_ABSANGVELOCITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_ABSANGVELOCITY = 8192"
    },
    {
      "trigger": "EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS",
      "contents": "EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS = 16384"
    },
    {
      "trigger": "EFL_DIRTY_SPATIAL_PARTITION",
      "contents": "EFL_DIRTY_SPATIAL_PARTITION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DIRTY_SPATIAL_PARTITION = 32768"
    },
    {
      "trigger": "EFL_IN_SKYBOX",
      "contents": "EFL_IN_SKYBOX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_IN_SKYBOX = 131072"
    },
    {
      "trigger": "EFL_USE_PARTITION_WHEN_NOT_SOLID",
      "contents": "EFL_USE_PARTITION_WHEN_NOT_SOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_USE_PARTITION_WHEN_NOT_SOLID = 262144"
    },
    {
      "trigger": "EFL_TOUCHING_FLUID",
      "contents": "EFL_TOUCHING_FLUID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_TOUCHING_FLUID = 524288"
    },
    {
      "trigger": "EFL_IS_BEING_LIFTED_BY_BARNACLE",
      "contents": "EFL_IS_BEING_LIFTED_BY_BARNACLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_IS_BEING_LIFTED_BY_BARNACLE = 1048576"
    },
    {
      "trigger": "EFL_NO_ROTORWASH_PUSH",
      "contents": "EFL_NO_ROTORWASH_PUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_ROTORWASH_PUSH = 2097152"
    },
    {
      "trigger": "EFL_NO_THINK_FUNCTION",
      "contents": "EFL_NO_THINK_FUNCTION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_THINK_FUNCTION = 4194304"
    },
    {
      "trigger": "EFL_NO_GAME_PHYSICS_SIMULATION",
      "contents": "EFL_NO_GAME_PHYSICS_SIMULATION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_GAME_PHYSICS_SIMULATION = 8388608"
    },
    {
      "trigger": "EFL_CHECK_UNTOUCH",
      "contents": "EFL_CHECK_UNTOUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_CHECK_UNTOUCH = 16777216"
    },
    {
      "trigger": "EFL_DONTBLOCKLOS",
      "contents": "EFL_DONTBLOCKLOS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DONTBLOCKLOS = 33554432"
    },
    {
      "trigger": "EFL_DONTWALKON",
      "contents": "EFL_DONTWALKON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_DONTWALKON = 67108864"
    },
    {
      "trigger": "EFL_NO_DISSOLVE",
      "contents": "EFL_NO_DISSOLVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_DISSOLVE = 134217728"
    },
    {
      "trigger": "EFL_NO_MEGAPHYSCANNON_RAGDOLL",
      "contents": "EFL_NO_MEGAPHYSCANNON_RAGDOLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_MEGAPHYSCANNON_RAGDOLL = 268435456"
    },
    {
      "trigger": "EFL_NO_WATER_VELOCITY_CHANGE",
      "contents": "EFL_NO_WATER_VELOCITY_CHANGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_WATER_VELOCITY_CHANGE = 536870912"
    },
    {
      "trigger": "EFL_NO_PHYSCANNON_INTERACTION",
      "contents": "EFL_NO_PHYSCANNON_INTERACTION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_PHYSCANNON_INTERACTION = 1073741824"
    },
    {
      "trigger": "EFL_NO_DAMAGE_FORCES",
      "contents": "EFL_NO_DAMAGE_FORCES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EFL_NO_DAMAGE_FORCES = -2147483648"
    },
    {
      "trigger": "FCVAR_ARCHIVE",
      "contents": "FCVAR_ARCHIVE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_ARCHIVE = 128"
    },
    {
      "trigger": "FCVAR_ARCHIVE_XBOX",
      "contents": "FCVAR_ARCHIVE_XBOX",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_ARCHIVE_XBOX = 16777216"
    },
    {
      "trigger": "FCVAR_CHEAT",
      "contents": "FCVAR_CHEAT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_CHEAT = 16384"
    },
    {
      "trigger": "FCVAR_CLIENTCMD_CAN_EXECUTE",
      "contents": "FCVAR_CLIENTCMD_CAN_EXECUTE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_CLIENTCMD_CAN_EXECUTE = 1073741824"
    },
    {
      "trigger": "FCVAR_CLIENTDLL",
      "contents": "FCVAR_CLIENTDLL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_CLIENTDLL = 8"
    },
    {
      "trigger": "FCVAR_DEMO",
      "contents": "FCVAR_DEMO",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_DEMO = 65536"
    },
    {
      "trigger": "FCVAR_DONTRECORD",
      "contents": "FCVAR_DONTRECORD",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_DONTRECORD = 131072"
    },
    {
      "trigger": "FCVAR_GAMEDLL",
      "contents": "FCVAR_GAMEDLL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_GAMEDLL = 4"
    },
    {
      "trigger": "FCVAR_LUA_CLIENT",
      "contents": "FCVAR_LUA_CLIENT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_LUA_CLIENT = 262144"
    },
    {
      "trigger": "FCVAR_LUA_SERVER",
      "contents": "FCVAR_LUA_SERVER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_LUA_SERVER = 524288"
    },
    {
      "trigger": "FCVAR_NEVER_AS_STRING",
      "contents": "FCVAR_NEVER_AS_STRING",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_NEVER_AS_STRING = 4096"
    },
    {
      "trigger": "FCVAR_NONE",
      "contents": "FCVAR_NONE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_NONE = 0"
    },
    {
      "trigger": "FCVAR_NOTIFY",
      "contents": "FCVAR_NOTIFY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_NOTIFY = 256"
    },
    {
      "trigger": "FCVAR_NOT_CONNECTED",
      "contents": "FCVAR_NOT_CONNECTED",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_NOT_CONNECTED = 4194304"
    },
    {
      "trigger": "FCVAR_PRINTABLEONLY",
      "contents": "FCVAR_PRINTABLEONLY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_PRINTABLEONLY = 1024"
    },
    {
      "trigger": "FCVAR_PROTECTED",
      "contents": "FCVAR_PROTECTED",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_PROTECTED = 32"
    },
    {
      "trigger": "FCVAR_REPLICATED",
      "contents": "FCVAR_REPLICATED",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_REPLICATED = 8192"
    },
    {
      "trigger": "FCVAR_SERVER_CANNOT_QUERY",
      "contents": "FCVAR_SERVER_CANNOT_QUERY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_SERVER_CANNOT_QUERY = 536870912"
    },
    {
      "trigger": "FCVAR_SERVER_CAN_EXECUTE",
      "contents": "FCVAR_SERVER_CAN_EXECUTE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_SERVER_CAN_EXECUTE = 268435456"
    },
    {
      "trigger": "FCVAR_SPONLY",
      "contents": "FCVAR_SPONLY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_SPONLY = 64"
    },
    {
      "trigger": "FCVAR_UNLOGGED",
      "contents": "FCVAR_UNLOGGED",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_UNLOGGED = 2048"
    },
    {
      "trigger": "FCVAR_UNREGISTERED",
      "contents": "FCVAR_UNREGISTERED",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_UNREGISTERED = 1"
    },
    {
      "trigger": "FCVAR_USERINFO",
      "contents": "FCVAR_USERINFO",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FCVAR_USERINFO = 512"
    },
    {
      "trigger": "FFT_256",
      "contents": "FFT_256",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_256 = 0"
    },
    {
      "trigger": "FFT_512",
      "contents": "FFT_512",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_512 = 1"
    },
    {
      "trigger": "FFT_1024",
      "contents": "FFT_1024",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_1024 = 2"
    },
    {
      "trigger": "FFT_2048",
      "contents": "FFT_2048",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_2048 = 3"
    },
    {
      "trigger": "FFT_4096",
      "contents": "FFT_4096",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_4096 = 4"
    },
    {
      "trigger": "FFT_8192",
      "contents": "FFT_8192",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_8192 = 5"
    },
    {
      "trigger": "FFT_16384",
      "contents": "FFT_16384",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_16384 = 6"
    },
    {
      "trigger": "FFT_32768",
      "contents": "FFT_32768",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FFT_32768 = 7"
    },
    {
      "trigger": "FL_ONGROUND",
      "contents": "FL_ONGROUND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_ONGROUND = 1"
    },
    {
      "trigger": "FL_DUCKING",
      "contents": "FL_DUCKING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_DUCKING = 2"
    },
    {
      "trigger": "FL_ANIMDUCKING",
      "contents": "FL_ANIMDUCKING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_ANIMDUCKING = 4"
    },
    {
      "trigger": "FL_WATERJUMP",
      "contents": "FL_WATERJUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_WATERJUMP = 8"
    },
    {
      "trigger": "FL_ONTRAIN",
      "contents": "FL_ONTRAIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_ONTRAIN = 16"
    },
    {
      "trigger": "FL_INRAIN",
      "contents": "FL_INRAIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_INRAIN = 32"
    },
    {
      "trigger": "FL_FROZEN",
      "contents": "FL_FROZEN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_FROZEN = 64"
    },
    {
      "trigger": "FL_ATCONTROLS",
      "contents": "FL_ATCONTROLS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_ATCONTROLS = 128"
    },
    {
      "trigger": "FL_CLIENT",
      "contents": "FL_CLIENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_CLIENT = 256"
    },
    {
      "trigger": "FL_FAKECLIENT",
      "contents": "FL_FAKECLIENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_FAKECLIENT = 512"
    },
    {
      "trigger": "FL_INWATER",
      "contents": "FL_INWATER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_INWATER = 1024"
    },
    {
      "trigger": "FL_FLY",
      "contents": "FL_FLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_FLY = 2048"
    },
    {
      "trigger": "FL_SWIM",
      "contents": "FL_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_SWIM = 4096"
    },
    {
      "trigger": "FL_CONVEYOR",
      "contents": "FL_CONVEYOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_CONVEYOR = 8192"
    },
    {
      "trigger": "FL_NPC",
      "contents": "FL_NPC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_NPC = 16384"
    },
    {
      "trigger": "FL_GODMODE",
      "contents": "FL_GODMODE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_GODMODE = 32768"
    },
    {
      "trigger": "FL_NOTARGET",
      "contents": "FL_NOTARGET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_NOTARGET = 65536"
    },
    {
      "trigger": "FL_AIMTARGET",
      "contents": "FL_AIMTARGET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_AIMTARGET = 131072"
    },
    {
      "trigger": "FL_PARTIALGROUND",
      "contents": "FL_PARTIALGROUND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_PARTIALGROUND = 262144"
    },
    {
      "trigger": "FL_STATICPROP",
      "contents": "FL_STATICPROP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_STATICPROP = 524288"
    },
    {
      "trigger": "FL_GRAPHED",
      "contents": "FL_GRAPHED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_GRAPHED = 1048576"
    },
    {
      "trigger": "FL_GRENADE",
      "contents": "FL_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_GRENADE = 2097152"
    },
    {
      "trigger": "FL_STEPMOVEMENT",
      "contents": "FL_STEPMOVEMENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_STEPMOVEMENT = 4194304"
    },
    {
      "trigger": "FL_DONTTOUCH",
      "contents": "FL_DONTTOUCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_DONTTOUCH = 8388608"
    },
    {
      "trigger": "FL_BASEVELOCITY",
      "contents": "FL_BASEVELOCITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_BASEVELOCITY = 16777216"
    },
    {
      "trigger": "FL_WORLDBRUSH",
      "contents": "FL_WORLDBRUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_WORLDBRUSH = 33554432"
    },
    {
      "trigger": "FL_OBJECT",
      "contents": "FL_OBJECT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_OBJECT = 67108864"
    },
    {
      "trigger": "FL_KILLME",
      "contents": "FL_KILLME",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_KILLME = 134217728"
    },
    {
      "trigger": "FL_ONFIRE",
      "contents": "FL_ONFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_ONFIRE = 268435456"
    },
    {
      "trigger": "FL_DISSOLVING",
      "contents": "FL_DISSOLVING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_DISSOLVING = 536870912"
    },
    {
      "trigger": "FL_TRANSRAGDOLL",
      "contents": "FL_TRANSRAGDOLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_TRANSRAGDOLL = 1073741824"
    },
    {
      "trigger": "FL_UNBLOCKABLE_BY_PLAYER",
      "contents": "FL_UNBLOCKABLE_BY_PLAYER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FL_UNBLOCKABLE_BY_PLAYER = -2147483648"
    },
    {
      "trigger": "FORCE_STRING",
      "contents": "FORCE_STRING",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_STRING = 1"
    },
    {
      "trigger": "FORCE_NUMBER",
      "contents": "FORCE_NUMBER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_NUMBER = 2"
    },
    {
      "trigger": "FORCE_BOOL",
      "contents": "FORCE_BOOL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_BOOL = 3"
    },
    {
      "trigger": "FORCE_ANGLE",
      "contents": "FORCE_ANGLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_ANGLE = 4"
    },
    {
      "trigger": "FORCE_COLOR",
      "contents": "FORCE_COLOR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_COLOR = 5"
    },
    {
      "trigger": "FORCE_VECTOR",
      "contents": "FORCE_VECTOR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FORCE_VECTOR = 6"
    },
    {
      "trigger": "FSASYNC_ERR_NOT_MINE",
      "contents": "FSASYNC_ERR_NOT_MINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_NOT_MINE = -8"
    },
    {
      "trigger": "FSASYNC_ERR_RETRY_LATER",
      "contents": "FSASYNC_ERR_RETRY_LATER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_RETRY_LATER = -7"
    },
    {
      "trigger": "FSASYNC_ERR_ALIGNMENT",
      "contents": "FSASYNC_ERR_ALIGNMENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_ALIGNMENT = -6"
    },
    {
      "trigger": "FSASYNC_ERR_FAILURE",
      "contents": "FSASYNC_ERR_FAILURE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_FAILURE = -5"
    },
    {
      "trigger": "FSASYNC_ERR_READING",
      "contents": "FSASYNC_ERR_READING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_READING = -4"
    },
    {
      "trigger": "FSASYNC_ERR_NOMEMORY",
      "contents": "FSASYNC_ERR_NOMEMORY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_NOMEMORY = -3"
    },
    {
      "trigger": "FSASYNC_ERR_UNKNOWNID",
      "contents": "FSASYNC_ERR_UNKNOWNID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_UNKNOWNID = -2"
    },
    {
      "trigger": "FSASYNC_ERR_FILEOPEN",
      "contents": "FSASYNC_ERR_FILEOPEN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_ERR_FILEOPEN = -1"
    },
    {
      "trigger": "FSASYNC_OK",
      "contents": "FSASYNC_OK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_OK = 0"
    },
    {
      "trigger": "FSASYNC_STATUS_PENDING",
      "contents": "FSASYNC_STATUS_PENDING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_STATUS_PENDING = 1"
    },
    {
      "trigger": "FSASYNC_STATUS_INPROGRESS",
      "contents": "FSASYNC_STATUS_INPROGRESS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_STATUS_INPROGRESS = 2"
    },
    {
      "trigger": "FSASYNC_STATUS_ABORTED",
      "contents": "FSASYNC_STATUS_ABORTED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_STATUS_ABORTED = 3"
    },
    {
      "trigger": "FSASYNC_STATUS_UNSERVICED",
      "contents": "FSASYNC_STATUS_UNSERVICED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSASYNC_STATUS_UNSERVICED = 4"
    },
    {
      "trigger": "FSOLID_CUSTOMRAYTEST",
      "contents": "FSOLID_CUSTOMRAYTEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_CUSTOMRAYTEST = 1"
    },
    {
      "trigger": "FSOLID_CUSTOMBOXTEST",
      "contents": "FSOLID_CUSTOMBOXTEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_CUSTOMBOXTEST = 2"
    },
    {
      "trigger": "FSOLID_NOT_SOLID",
      "contents": "FSOLID_NOT_SOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_NOT_SOLID = 4"
    },
    {
      "trigger": "FSOLID_TRIGGER",
      "contents": "FSOLID_TRIGGER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_TRIGGER = 8"
    },
    {
      "trigger": "FSOLID_NOT_STANDABLE",
      "contents": "FSOLID_NOT_STANDABLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_NOT_STANDABLE = 16"
    },
    {
      "trigger": "FSOLID_VOLUME_CONTENTS",
      "contents": "FSOLID_VOLUME_CONTENTS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_VOLUME_CONTENTS = 32"
    },
    {
      "trigger": "FSOLID_FORCE_WORLD_ALIGNED",
      "contents": "FSOLID_FORCE_WORLD_ALIGNED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_FORCE_WORLD_ALIGNED = 64"
    },
    {
      "trigger": "FSOLID_USE_TRIGGER_BOUNDS",
      "contents": "FSOLID_USE_TRIGGER_BOUNDS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_USE_TRIGGER_BOUNDS = 128"
    },
    {
      "trigger": "FSOLID_ROOT_PARENT_ALIGNED",
      "contents": "FSOLID_ROOT_PARENT_ALIGNED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_ROOT_PARENT_ALIGNED = 256"
    },
    {
      "trigger": "FSOLID_TRIGGER_TOUCH_DEBRIS",
      "contents": "FSOLID_TRIGGER_TOUCH_DEBRIS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_TRIGGER_TOUCH_DEBRIS = 512"
    },
    {
      "trigger": "FSOLID_MAX_BITS",
      "contents": "FSOLID_MAX_BITS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FSOLID_MAX_BITS = 10"
    },
    {
      "trigger": "FVPHYSICS_CONSTRAINT_STATIC",
      "contents": "FVPHYSICS_CONSTRAINT_STATIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_CONSTRAINT_STATIC = 2"
    },
    {
      "trigger": "FVPHYSICS_DMG_DISSOLVE",
      "contents": "FVPHYSICS_DMG_DISSOLVE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_DMG_DISSOLVE = 512"
    },
    {
      "trigger": "FVPHYSICS_DMG_SLICE",
      "contents": "FVPHYSICS_DMG_SLICE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_DMG_SLICE = 1"
    },
    {
      "trigger": "FVPHYSICS_HEAVY_OBJECT",
      "contents": "FVPHYSICS_HEAVY_OBJECT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_HEAVY_OBJECT = 32"
    },
    {
      "trigger": "FVPHYSICS_MULTIOBJECT_ENTITY",
      "contents": "FVPHYSICS_MULTIOBJECT_ENTITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_MULTIOBJECT_ENTITY = 16"
    },
    {
      "trigger": "FVPHYSICS_NO_IMPACT_DMG",
      "contents": "FVPHYSICS_NO_IMPACT_DMG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_NO_IMPACT_DMG = 1024"
    },
    {
      "trigger": "FVPHYSICS_NO_NPC_IMPACT_DMG",
      "contents": "FVPHYSICS_NO_NPC_IMPACT_DMG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_NO_NPC_IMPACT_DMG = 2048"
    },
    {
      "trigger": "FVPHYSICS_NO_PLAYER_PICKUP",
      "contents": "FVPHYSICS_NO_PLAYER_PICKUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_NO_PLAYER_PICKUP = 128"
    },
    {
      "trigger": "FVPHYSICS_NO_SELF_COLLISIONS",
      "contents": "FVPHYSICS_NO_SELF_COLLISIONS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_NO_SELF_COLLISIONS = 32768"
    },
    {
      "trigger": "FVPHYSICS_PART_OF_RAGDOLL",
      "contents": "FVPHYSICS_PART_OF_RAGDOLL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_PART_OF_RAGDOLL = 8"
    },
    {
      "trigger": "FVPHYSICS_PENETRATING",
      "contents": "FVPHYSICS_PENETRATING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_PENETRATING = 64"
    },
    {
      "trigger": "FVPHYSICS_PLAYER_HELD",
      "contents": "FVPHYSICS_PLAYER_HELD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_PLAYER_HELD = 4"
    },
    {
      "trigger": "FVPHYSICS_WAS_THROWN",
      "contents": "FVPHYSICS_WAS_THROWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "FVPHYSICS_WAS_THROWN = 256"
    },
    {
      "trigger": "GESTURE_SLOT_ATTACK_AND_RELOAD",
      "contents": "GESTURE_SLOT_ATTACK_AND_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_ATTACK_AND_RELOAD = 0"
    },
    {
      "trigger": "GESTURE_SLOT_GRENADE",
      "contents": "GESTURE_SLOT_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_GRENADE = 1"
    },
    {
      "trigger": "GESTURE_SLOT_JUMP",
      "contents": "GESTURE_SLOT_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_JUMP = 2"
    },
    {
      "trigger": "GESTURE_SLOT_SWIM",
      "contents": "GESTURE_SLOT_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_SWIM = 3"
    },
    {
      "trigger": "GESTURE_SLOT_FLINCH",
      "contents": "GESTURE_SLOT_FLINCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_FLINCH = 4"
    },
    {
      "trigger": "GESTURE_SLOT_VCD",
      "contents": "GESTURE_SLOT_VCD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_VCD = 5"
    },
    {
      "trigger": "GESTURE_SLOT_CUSTOM",
      "contents": "GESTURE_SLOT_CUSTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GESTURE_SLOT_CUSTOM = 6"
    },
    {
      "trigger": "GLOBAL_OFF",
      "contents": "GLOBAL_OFF",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GLOBAL_OFF = 0"
    },
    {
      "trigger": "GLOBAL_ON",
      "contents": "GLOBAL_ON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GLOBAL_ON = 1"
    },
    {
      "trigger": "GLOBAL_DEAD",
      "contents": "GLOBAL_DEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GLOBAL_DEAD = 2"
    },
    {
      "trigger": "GMOD_CHANNEL_STOPPED",
      "contents": "GMOD_CHANNEL_STOPPED",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GMOD_CHANNEL_STOPPED = 0"
    },
    {
      "trigger": "GMOD_CHANNEL_PLAYING",
      "contents": "GMOD_CHANNEL_PLAYING",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GMOD_CHANNEL_PLAYING = 1"
    },
    {
      "trigger": "GMOD_CHANNEL_PAUSED",
      "contents": "GMOD_CHANNEL_PAUSED",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GMOD_CHANNEL_PAUSED = 2"
    },
    {
      "trigger": "GMOD_CHANNEL_STALLED",
      "contents": "GMOD_CHANNEL_STALLED",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GMOD_CHANNEL_STALLED = 3"
    },
    {
      "trigger": "GOALTYPE_NONE",
      "contents": "GOALTYPE_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_NONE = 0"
    },
    {
      "trigger": "GOALTYPE_TARGETENT",
      "contents": "GOALTYPE_TARGETENT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_TARGETENT = 1"
    },
    {
      "trigger": "GOALTYPE_ENEMY",
      "contents": "GOALTYPE_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_ENEMY = 2"
    },
    {
      "trigger": "GOALTYPE_PATHCORNER",
      "contents": "GOALTYPE_PATHCORNER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_PATHCORNER = 3"
    },
    {
      "trigger": "GOALTYPE_LOCATION",
      "contents": "GOALTYPE_LOCATION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_LOCATION = 4"
    },
    {
      "trigger": "GOALTYPE_LOCATION_NEAREST_NODE",
      "contents": "GOALTYPE_LOCATION_NEAREST_NODE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_LOCATION_NEAREST_NODE = 5"
    },
    {
      "trigger": "GOALTYPE_FLANK",
      "contents": "GOALTYPE_FLANK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_FLANK = 6"
    },
    {
      "trigger": "GOALTYPE_COVER",
      "contents": "GOALTYPE_COVER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_COVER = 7"
    },
    {
      "trigger": "GOALTYPE_INVALID",
      "contents": "GOALTYPE_INVALID",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GOALTYPE_INVALID = 8"
    },
    {
      "trigger": "HITGROUP_GENERIC",
      "contents": "HITGROUP_GENERIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_GENERIC = 0"
    },
    {
      "trigger": "HITGROUP_HEAD",
      "contents": "HITGROUP_HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_HEAD = 1"
    },
    {
      "trigger": "HITGROUP_CHEST",
      "contents": "HITGROUP_CHEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_CHEST = 2"
    },
    {
      "trigger": "HITGROUP_STOMACH",
      "contents": "HITGROUP_STOMACH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_STOMACH = 3"
    },
    {
      "trigger": "HITGROUP_LEFTARM",
      "contents": "HITGROUP_LEFTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_LEFTARM = 4"
    },
    {
      "trigger": "HITGROUP_RIGHTARM",
      "contents": "HITGROUP_RIGHTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_RIGHTARM = 5"
    },
    {
      "trigger": "HITGROUP_LEFTLEG",
      "contents": "HITGROUP_LEFTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_LEFTLEG = 6"
    },
    {
      "trigger": "HITGROUP_RIGHTLEG",
      "contents": "HITGROUP_RIGHTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_RIGHTLEG = 7"
    },
    {
      "trigger": "HITGROUP_GEAR",
      "contents": "HITGROUP_GEAR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HITGROUP_GEAR = 10"
    },
    {
      "trigger": "HUD_PRINTNOTIFY",
      "contents": "HUD_PRINTNOTIFY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HUD_PRINTNOTIFY = 1"
    },
    {
      "trigger": "HUD_PRINTCONSOLE",
      "contents": "HUD_PRINTCONSOLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HUD_PRINTCONSOLE = 2"
    },
    {
      "trigger": "HUD_PRINTTALK",
      "contents": "HUD_PRINTTALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HUD_PRINTTALK = 3"
    },
    {
      "trigger": "HUD_PRINTCENTER",
      "contents": "HUD_PRINTCENTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HUD_PRINTCENTER = 4"
    },
    {
      "trigger": "HULL_HUMAN",
      "contents": "HULL_HUMAN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_HUMAN = 0"
    },
    {
      "trigger": "HULL_SMALL_CENTERED",
      "contents": "HULL_SMALL_CENTERED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_SMALL_CENTERED = 1"
    },
    {
      "trigger": "HULL_WIDE_HUMAN",
      "contents": "HULL_WIDE_HUMAN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_WIDE_HUMAN = 2"
    },
    {
      "trigger": "HULL_TINY",
      "contents": "HULL_TINY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_TINY = 3"
    },
    {
      "trigger": "HULL_WIDE_SHORT",
      "contents": "HULL_WIDE_SHORT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_WIDE_SHORT = 4"
    },
    {
      "trigger": "HULL_MEDIUM",
      "contents": "HULL_MEDIUM",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_MEDIUM = 5"
    },
    {
      "trigger": "HULL_TINY_CENTERED",
      "contents": "HULL_TINY_CENTERED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_TINY_CENTERED = 6"
    },
    {
      "trigger": "HULL_LARGE",
      "contents": "HULL_LARGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_LARGE = 7"
    },
    {
      "trigger": "HULL_LARGE_CENTERED",
      "contents": "HULL_LARGE_CENTERED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_LARGE_CENTERED = 8"
    },
    {
      "trigger": "HULL_MEDIUM_TALL",
      "contents": "HULL_MEDIUM_TALL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "HULL_MEDIUM_TALL = 9"
    },
    {
      "trigger": "IMAGE_FORMAT_DEFAULT",
      "contents": "IMAGE_FORMAT_DEFAULT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_DEFAULT = -1"
    },
    {
      "trigger": "IMAGE_FORMAT_RGBA8888",
      "contents": "IMAGE_FORMAT_RGBA8888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_RGBA8888 = 0"
    },
    {
      "trigger": "IMAGE_FORMAT_ABGR8888",
      "contents": "IMAGE_FORMAT_ABGR8888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_ABGR8888 = 1"
    },
    {
      "trigger": "IMAGE_FORMAT_RGB888",
      "contents": "IMAGE_FORMAT_RGB888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_RGB888 = 2"
    },
    {
      "trigger": "IMAGE_FORMAT_BGR888",
      "contents": "IMAGE_FORMAT_BGR888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_BGR888 = 3"
    },
    {
      "trigger": "IMAGE_FORMAT_RGB565",
      "contents": "IMAGE_FORMAT_RGB565",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_RGB565 = 4"
    },
    {
      "trigger": "IMAGE_FORMAT_ARGB8888",
      "contents": "IMAGE_FORMAT_ARGB8888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_ARGB8888 = 11"
    },
    {
      "trigger": "IMAGE_FORMAT_BGRA8888",
      "contents": "IMAGE_FORMAT_BGRA8888",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_BGRA8888 = 12"
    },
    {
      "trigger": "IMAGE_FORMAT_RGBA16161616",
      "contents": "IMAGE_FORMAT_RGBA16161616",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_RGBA16161616 = 25"
    },
    {
      "trigger": "IMAGE_FORMAT_RGBA16161616F",
      "contents": "IMAGE_FORMAT_RGBA16161616F",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IMAGE_FORMAT_RGBA16161616F = 24"
    },
    {
      "trigger": "IN_ATTACK",
      "contents": "IN_ATTACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_ATTACK = 1"
    },
    {
      "trigger": "IN_JUMP",
      "contents": "IN_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_JUMP = 2"
    },
    {
      "trigger": "IN_DUCK",
      "contents": "IN_DUCK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_DUCK = 4"
    },
    {
      "trigger": "IN_FORWARD",
      "contents": "IN_FORWARD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_FORWARD = 8"
    },
    {
      "trigger": "IN_BACK",
      "contents": "IN_BACK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_BACK = 16"
    },
    {
      "trigger": "IN_USE",
      "contents": "IN_USE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_USE = 32"
    },
    {
      "trigger": "IN_CANCEL",
      "contents": "IN_CANCEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_CANCEL = 64"
    },
    {
      "trigger": "IN_LEFT",
      "contents": "IN_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_LEFT = 128"
    },
    {
      "trigger": "IN_RIGHT",
      "contents": "IN_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_RIGHT = 256"
    },
    {
      "trigger": "IN_MOVELEFT",
      "contents": "IN_MOVELEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_MOVELEFT = 512"
    },
    {
      "trigger": "IN_MOVERIGHT",
      "contents": "IN_MOVERIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_MOVERIGHT = 1024"
    },
    {
      "trigger": "IN_ATTACK2",
      "contents": "IN_ATTACK2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_ATTACK2 = 2048"
    },
    {
      "trigger": "IN_RUN",
      "contents": "IN_RUN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_RUN = 4096"
    },
    {
      "trigger": "IN_RELOAD",
      "contents": "IN_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_RELOAD = 8192"
    },
    {
      "trigger": "IN_ALT1",
      "contents": "IN_ALT1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_ALT1 = 16384"
    },
    {
      "trigger": "IN_ALT2",
      "contents": "IN_ALT2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_ALT2 = 32768"
    },
    {
      "trigger": "IN_SCORE",
      "contents": "IN_SCORE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_SCORE = 65536"
    },
    {
      "trigger": "IN_SPEED",
      "contents": "IN_SPEED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_SPEED = 131072"
    },
    {
      "trigger": "IN_WALK",
      "contents": "IN_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_WALK = 262144"
    },
    {
      "trigger": "IN_ZOOM",
      "contents": "IN_ZOOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_ZOOM = 524288"
    },
    {
      "trigger": "IN_WEAPON1",
      "contents": "IN_WEAPON1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_WEAPON1 = 1048576"
    },
    {
      "trigger": "IN_WEAPON2",
      "contents": "IN_WEAPON2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_WEAPON2 = 2097152"
    },
    {
      "trigger": "IN_BULLRUSH",
      "contents": "IN_BULLRUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_BULLRUSH = 4194304"
    },
    {
      "trigger": "IN_GRENADE1",
      "contents": "IN_GRENADE1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_GRENADE1 = 8388608"
    },
    {
      "trigger": "IN_GRENADE2",
      "contents": "IN_GRENADE2",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "IN_GRENADE2 = 16777216"
    },
    {
      "trigger": "JOYSTICK_FIRST",
      "contents": "JOYSTICK_FIRST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_FIRST = 114"
    },
    {
      "trigger": "JOYSTICK_FIRST_BUTTON",
      "contents": "JOYSTICK_FIRST_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_FIRST_BUTTON = 114"
    },
    {
      "trigger": "JOYSTICK_LAST_BUTTON",
      "contents": "JOYSTICK_LAST_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_LAST_BUTTON = 145"
    },
    {
      "trigger": "JOYSTICK_FIRST_POV_BUTTON",
      "contents": "JOYSTICK_FIRST_POV_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_FIRST_POV_BUTTON = 146"
    },
    {
      "trigger": "JOYSTICK_LAST_POV_BUTTON",
      "contents": "JOYSTICK_LAST_POV_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_LAST_POV_BUTTON = 149"
    },
    {
      "trigger": "JOYSTICK_FIRST_AXIS_BUTTON",
      "contents": "JOYSTICK_FIRST_AXIS_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_FIRST_AXIS_BUTTON = 150"
    },
    {
      "trigger": "JOYSTICK_LAST_AXIS_BUTTON",
      "contents": "JOYSTICK_LAST_AXIS_BUTTON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_LAST_AXIS_BUTTON = 161"
    },
    {
      "trigger": "JOYSTICK_LAST",
      "contents": "JOYSTICK_LAST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "JOYSTICK_LAST = 161"
    },
    {
      "trigger": "KEY_FIRST",
      "contents": "KEY_FIRST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_FIRST = 0"
    },
    {
      "trigger": "KEY_NONE",
      "contents": "KEY_NONE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_NONE = 0"
    },
    {
      "trigger": "KEY_0",
      "contents": "KEY_0",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_0 = 1"
    },
    {
      "trigger": "KEY_1",
      "contents": "KEY_1",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_1 = 2"
    },
    {
      "trigger": "KEY_2",
      "contents": "KEY_2",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_2 = 3"
    },
    {
      "trigger": "KEY_3",
      "contents": "KEY_3",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_3 = 4"
    },
    {
      "trigger": "KEY_4",
      "contents": "KEY_4",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_4 = 5"
    },
    {
      "trigger": "KEY_5",
      "contents": "KEY_5",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_5 = 6"
    },
    {
      "trigger": "KEY_6",
      "contents": "KEY_6",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_6 = 7"
    },
    {
      "trigger": "KEY_7",
      "contents": "KEY_7",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_7 = 8"
    },
    {
      "trigger": "KEY_8",
      "contents": "KEY_8",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_8 = 9"
    },
    {
      "trigger": "KEY_9",
      "contents": "KEY_9",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_9 = 10"
    },
    {
      "trigger": "KEY_A",
      "contents": "KEY_A",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_A = 11"
    },
    {
      "trigger": "KEY_B",
      "contents": "KEY_B",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_B = 12"
    },
    {
      "trigger": "KEY_C",
      "contents": "KEY_C",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_C = 13"
    },
    {
      "trigger": "KEY_D",
      "contents": "KEY_D",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_D = 14"
    },
    {
      "trigger": "KEY_E",
      "contents": "KEY_E",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_E = 15"
    },
    {
      "trigger": "KEY_F",
      "contents": "KEY_F",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F = 16"
    },
    {
      "trigger": "KEY_G",
      "contents": "KEY_G",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_G = 17"
    },
    {
      "trigger": "KEY_H",
      "contents": "KEY_H",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_H = 18"
    },
    {
      "trigger": "KEY_I",
      "contents": "KEY_I",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_I = 19"
    },
    {
      "trigger": "KEY_J",
      "contents": "KEY_J",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_J = 20"
    },
    {
      "trigger": "KEY_K",
      "contents": "KEY_K",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_K = 21"
    },
    {
      "trigger": "KEY_L",
      "contents": "KEY_L",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_L = 22"
    },
    {
      "trigger": "KEY_M",
      "contents": "KEY_M",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_M = 23"
    },
    {
      "trigger": "KEY_N",
      "contents": "KEY_N",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_N = 24"
    },
    {
      "trigger": "KEY_O",
      "contents": "KEY_O",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_O = 25"
    },
    {
      "trigger": "KEY_P",
      "contents": "KEY_P",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_P = 26"
    },
    {
      "trigger": "KEY_Q",
      "contents": "KEY_Q",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_Q = 27"
    },
    {
      "trigger": "KEY_R",
      "contents": "KEY_R",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_R = 28"
    },
    {
      "trigger": "KEY_S",
      "contents": "KEY_S",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_S = 29"
    },
    {
      "trigger": "KEY_T",
      "contents": "KEY_T",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_T = 30"
    },
    {
      "trigger": "KEY_U",
      "contents": "KEY_U",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_U = 31"
    },
    {
      "trigger": "KEY_V",
      "contents": "KEY_V",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_V = 32"
    },
    {
      "trigger": "KEY_W",
      "contents": "KEY_W",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_W = 33"
    },
    {
      "trigger": "KEY_X",
      "contents": "KEY_X",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_X = 34"
    },
    {
      "trigger": "KEY_Y",
      "contents": "KEY_Y",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_Y = 35"
    },
    {
      "trigger": "KEY_Z",
      "contents": "KEY_Z",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_Z = 36"
    },
    {
      "trigger": "KEY_PAD_0",
      "contents": "KEY_PAD_0",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_0 = 37"
    },
    {
      "trigger": "KEY_PAD_1",
      "contents": "KEY_PAD_1",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_1 = 38"
    },
    {
      "trigger": "KEY_PAD_2",
      "contents": "KEY_PAD_2",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_2 = 39"
    },
    {
      "trigger": "KEY_PAD_3",
      "contents": "KEY_PAD_3",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_3 = 40"
    },
    {
      "trigger": "KEY_PAD_4",
      "contents": "KEY_PAD_4",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_4 = 41"
    },
    {
      "trigger": "KEY_PAD_5",
      "contents": "KEY_PAD_5",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_5 = 42"
    },
    {
      "trigger": "KEY_PAD_6",
      "contents": "KEY_PAD_6",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_6 = 43"
    },
    {
      "trigger": "KEY_PAD_7",
      "contents": "KEY_PAD_7",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_7 = 44"
    },
    {
      "trigger": "KEY_PAD_8",
      "contents": "KEY_PAD_8",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_8 = 45"
    },
    {
      "trigger": "KEY_PAD_9",
      "contents": "KEY_PAD_9",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_9 = 46"
    },
    {
      "trigger": "KEY_PAD_DIVIDE",
      "contents": "KEY_PAD_DIVIDE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_DIVIDE = 47"
    },
    {
      "trigger": "KEY_PAD_MULTIPLY",
      "contents": "KEY_PAD_MULTIPLY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_MULTIPLY = 48"
    },
    {
      "trigger": "KEY_PAD_MINUS",
      "contents": "KEY_PAD_MINUS",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_MINUS = 49"
    },
    {
      "trigger": "KEY_PAD_PLUS",
      "contents": "KEY_PAD_PLUS",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_PLUS = 50"
    },
    {
      "trigger": "KEY_PAD_ENTER",
      "contents": "KEY_PAD_ENTER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_ENTER = 51"
    },
    {
      "trigger": "KEY_PAD_DECIMAL",
      "contents": "KEY_PAD_DECIMAL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAD_DECIMAL = 52"
    },
    {
      "trigger": "KEY_LBRACKET",
      "contents": "KEY_LBRACKET",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LBRACKET = 53"
    },
    {
      "trigger": "KEY_RBRACKET",
      "contents": "KEY_RBRACKET",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RBRACKET = 54"
    },
    {
      "trigger": "KEY_SEMICOLON",
      "contents": "KEY_SEMICOLON",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_SEMICOLON = 55"
    },
    {
      "trigger": "KEY_APOSTROPHE",
      "contents": "KEY_APOSTROPHE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_APOSTROPHE = 56"
    },
    {
      "trigger": "KEY_BACKQUOTE",
      "contents": "KEY_BACKQUOTE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_BACKQUOTE = 57"
    },
    {
      "trigger": "KEY_COMMA",
      "contents": "KEY_COMMA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_COMMA = 58"
    },
    {
      "trigger": "KEY_PERIOD",
      "contents": "KEY_PERIOD",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PERIOD = 59"
    },
    {
      "trigger": "KEY_SLASH",
      "contents": "KEY_SLASH",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_SLASH = 60"
    },
    {
      "trigger": "KEY_BACKSLASH",
      "contents": "KEY_BACKSLASH",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_BACKSLASH = 61"
    },
    {
      "trigger": "KEY_MINUS",
      "contents": "KEY_MINUS",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_MINUS = 62"
    },
    {
      "trigger": "KEY_EQUAL",
      "contents": "KEY_EQUAL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_EQUAL = 63"
    },
    {
      "trigger": "KEY_ENTER",
      "contents": "KEY_ENTER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_ENTER = 64"
    },
    {
      "trigger": "KEY_SPACE",
      "contents": "KEY_SPACE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_SPACE = 65"
    },
    {
      "trigger": "KEY_BACKSPACE",
      "contents": "KEY_BACKSPACE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_BACKSPACE = 66"
    },
    {
      "trigger": "KEY_TAB",
      "contents": "KEY_TAB",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_TAB = 67"
    },
    {
      "trigger": "KEY_CAPSLOCK",
      "contents": "KEY_CAPSLOCK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_CAPSLOCK = 68"
    },
    {
      "trigger": "KEY_NUMLOCK",
      "contents": "KEY_NUMLOCK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_NUMLOCK = 69"
    },
    {
      "trigger": "KEY_ESCAPE",
      "contents": "KEY_ESCAPE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_ESCAPE = 70"
    },
    {
      "trigger": "KEY_SCROLLLOCK",
      "contents": "KEY_SCROLLLOCK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_SCROLLLOCK = 71"
    },
    {
      "trigger": "KEY_INSERT",
      "contents": "KEY_INSERT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_INSERT = 72"
    },
    {
      "trigger": "KEY_DELETE",
      "contents": "KEY_DELETE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_DELETE = 73"
    },
    {
      "trigger": "KEY_HOME",
      "contents": "KEY_HOME",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_HOME = 74"
    },
    {
      "trigger": "KEY_END",
      "contents": "KEY_END",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_END = 75"
    },
    {
      "trigger": "KEY_PAGEUP",
      "contents": "KEY_PAGEUP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAGEUP = 76"
    },
    {
      "trigger": "KEY_PAGEDOWN",
      "contents": "KEY_PAGEDOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_PAGEDOWN = 77"
    },
    {
      "trigger": "KEY_BREAK",
      "contents": "KEY_BREAK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_BREAK = 78"
    },
    {
      "trigger": "KEY_LSHIFT",
      "contents": "KEY_LSHIFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LSHIFT = 79"
    },
    {
      "trigger": "KEY_RSHIFT",
      "contents": "KEY_RSHIFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RSHIFT = 80"
    },
    {
      "trigger": "KEY_LALT",
      "contents": "KEY_LALT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LALT = 81"
    },
    {
      "trigger": "KEY_RALT",
      "contents": "KEY_RALT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RALT = 82"
    },
    {
      "trigger": "KEY_LCONTROL",
      "contents": "KEY_LCONTROL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LCONTROL = 83"
    },
    {
      "trigger": "KEY_RCONTROL",
      "contents": "KEY_RCONTROL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RCONTROL = 84"
    },
    {
      "trigger": "KEY_LWIN",
      "contents": "KEY_LWIN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LWIN = 85"
    },
    {
      "trigger": "KEY_RWIN",
      "contents": "KEY_RWIN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RWIN = 86"
    },
    {
      "trigger": "KEY_APP",
      "contents": "KEY_APP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_APP = 87"
    },
    {
      "trigger": "KEY_UP",
      "contents": "KEY_UP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_UP = 88"
    },
    {
      "trigger": "KEY_LEFT",
      "contents": "KEY_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LEFT = 89"
    },
    {
      "trigger": "KEY_DOWN",
      "contents": "KEY_DOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_DOWN = 90"
    },
    {
      "trigger": "KEY_RIGHT",
      "contents": "KEY_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_RIGHT = 91"
    },
    {
      "trigger": "KEY_F1",
      "contents": "KEY_F1",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F1 = 92"
    },
    {
      "trigger": "KEY_F2",
      "contents": "KEY_F2",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F2 = 93"
    },
    {
      "trigger": "KEY_F3",
      "contents": "KEY_F3",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F3 = 94"
    },
    {
      "trigger": "KEY_F4",
      "contents": "KEY_F4",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F4 = 95"
    },
    {
      "trigger": "KEY_F5",
      "contents": "KEY_F5",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F5 = 96"
    },
    {
      "trigger": "KEY_F6",
      "contents": "KEY_F6",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F6 = 97"
    },
    {
      "trigger": "KEY_F7",
      "contents": "KEY_F7",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F7 = 98"
    },
    {
      "trigger": "KEY_F8",
      "contents": "KEY_F8",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F8 = 99"
    },
    {
      "trigger": "KEY_F9",
      "contents": "KEY_F9",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F9 = 100"
    },
    {
      "trigger": "KEY_F10",
      "contents": "KEY_F10",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F10 = 101"
    },
    {
      "trigger": "KEY_F11",
      "contents": "KEY_F11",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F11 = 102"
    },
    {
      "trigger": "KEY_F12",
      "contents": "KEY_F12",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_F12 = 103"
    },
    {
      "trigger": "KEY_CAPSLOCKTOGGLE",
      "contents": "KEY_CAPSLOCKTOGGLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_CAPSLOCKTOGGLE = 104"
    },
    {
      "trigger": "KEY_NUMLOCKTOGGLE",
      "contents": "KEY_NUMLOCKTOGGLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_NUMLOCKTOGGLE = 105"
    },
    {
      "trigger": "KEY_LAST",
      "contents": "KEY_LAST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_LAST = 106"
    },
    {
      "trigger": "KEY_SCROLLLOCKTOGGLE",
      "contents": "KEY_SCROLLLOCKTOGGLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_SCROLLLOCKTOGGLE = 106"
    },
    {
      "trigger": "KEY_COUNT",
      "contents": "KEY_COUNT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_COUNT = 107"
    },
    {
      "trigger": "KEY_XBUTTON_A",
      "contents": "KEY_XBUTTON_A",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_A = 114"
    },
    {
      "trigger": "KEY_XBUTTON_B",
      "contents": "KEY_XBUTTON_B",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_B = 115"
    },
    {
      "trigger": "KEY_XBUTTON_X",
      "contents": "KEY_XBUTTON_X",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_X = 116"
    },
    {
      "trigger": "KEY_XBUTTON_Y",
      "contents": "KEY_XBUTTON_Y",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_Y = 117"
    },
    {
      "trigger": "KEY_XBUTTON_LEFT_SHOULDER",
      "contents": "KEY_XBUTTON_LEFT_SHOULDER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_LEFT_SHOULDER = 118"
    },
    {
      "trigger": "KEY_XBUTTON_RIGHT_SHOULDER",
      "contents": "KEY_XBUTTON_RIGHT_SHOULDER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_RIGHT_SHOULDER = 119"
    },
    {
      "trigger": "KEY_XBUTTON_BACK",
      "contents": "KEY_XBUTTON_BACK",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_BACK = 120"
    },
    {
      "trigger": "KEY_XBUTTON_START",
      "contents": "KEY_XBUTTON_START",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_START = 121"
    },
    {
      "trigger": "KEY_XBUTTON_STICK1",
      "contents": "KEY_XBUTTON_STICK1",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_STICK1 = 122"
    },
    {
      "trigger": "KEY_XBUTTON_STICK2",
      "contents": "KEY_XBUTTON_STICK2",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_STICK2 = 123"
    },
    {
      "trigger": "KEY_XBUTTON_UP",
      "contents": "KEY_XBUTTON_UP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_UP = 146"
    },
    {
      "trigger": "KEY_XBUTTON_RIGHT",
      "contents": "KEY_XBUTTON_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_RIGHT = 147"
    },
    {
      "trigger": "KEY_XBUTTON_DOWN",
      "contents": "KEY_XBUTTON_DOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_DOWN = 148"
    },
    {
      "trigger": "KEY_XBUTTON_LEFT",
      "contents": "KEY_XBUTTON_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_LEFT = 149"
    },
    {
      "trigger": "KEY_XSTICK1_RIGHT",
      "contents": "KEY_XSTICK1_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK1_RIGHT = 150"
    },
    {
      "trigger": "KEY_XSTICK1_LEFT",
      "contents": "KEY_XSTICK1_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK1_LEFT = 151"
    },
    {
      "trigger": "KEY_XSTICK1_DOWN",
      "contents": "KEY_XSTICK1_DOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK1_DOWN = 152"
    },
    {
      "trigger": "KEY_XSTICK1_UP",
      "contents": "KEY_XSTICK1_UP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK1_UP = 153"
    },
    {
      "trigger": "KEY_XBUTTON_LTRIGGER",
      "contents": "KEY_XBUTTON_LTRIGGER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_LTRIGGER = 154"
    },
    {
      "trigger": "KEY_XBUTTON_RTRIGGER",
      "contents": "KEY_XBUTTON_RTRIGGER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XBUTTON_RTRIGGER = 155"
    },
    {
      "trigger": "KEY_XSTICK2_RIGHT",
      "contents": "KEY_XSTICK2_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK2_RIGHT = 156"
    },
    {
      "trigger": "KEY_XSTICK2_LEFT",
      "contents": "KEY_XSTICK2_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK2_LEFT = 157"
    },
    {
      "trigger": "KEY_XSTICK2_DOWN",
      "contents": "KEY_XSTICK2_DOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK2_DOWN = 158"
    },
    {
      "trigger": "KEY_XSTICK2_UP",
      "contents": "KEY_XSTICK2_UP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "KEY_XSTICK2_UP = 159"
    },
    {
      "trigger": "kRenderFxNone",
      "contents": "kRenderFxNone",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxNone = 0"
    },
    {
      "trigger": "kRenderFxPulseSlow",
      "contents": "kRenderFxPulseSlow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxPulseSlow = 1"
    },
    {
      "trigger": "kRenderFxPulseFast",
      "contents": "kRenderFxPulseFast",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxPulseFast = 2"
    },
    {
      "trigger": "kRenderFxPulseSlowWide",
      "contents": "kRenderFxPulseSlowWide",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxPulseSlowWide = 3"
    },
    {
      "trigger": "kRenderFxPulseFastWide",
      "contents": "kRenderFxPulseFastWide",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxPulseFastWide = 4"
    },
    {
      "trigger": "kRenderFxFadeSlow",
      "contents": "kRenderFxFadeSlow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxFadeSlow = 5"
    },
    {
      "trigger": "kRenderFxFadeFast",
      "contents": "kRenderFxFadeFast",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxFadeFast = 6"
    },
    {
      "trigger": "kRenderFxSolidSlow",
      "contents": "kRenderFxSolidSlow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxSolidSlow = 7"
    },
    {
      "trigger": "kRenderFxSolidFast",
      "contents": "kRenderFxSolidFast",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxSolidFast = 8"
    },
    {
      "trigger": "kRenderFxStrobeSlow",
      "contents": "kRenderFxStrobeSlow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxStrobeSlow = 9"
    },
    {
      "trigger": "kRenderFxStrobeFast",
      "contents": "kRenderFxStrobeFast",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxStrobeFast = 10"
    },
    {
      "trigger": "kRenderFxStrobeFaster",
      "contents": "kRenderFxStrobeFaster",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxStrobeFaster = 11"
    },
    {
      "trigger": "kRenderFxFlickerSlow",
      "contents": "kRenderFxFlickerSlow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxFlickerSlow = 12"
    },
    {
      "trigger": "kRenderFxFlickerFast",
      "contents": "kRenderFxFlickerFast",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxFlickerFast = 13"
    },
    {
      "trigger": "kRenderFxNoDissipation",
      "contents": "kRenderFxNoDissipation",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxNoDissipation = 14"
    },
    {
      "trigger": "kRenderFxDistort",
      "contents": "kRenderFxDistort",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxDistort = 15"
    },
    {
      "trigger": "kRenderFxHologram",
      "contents": "kRenderFxHologram",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxHologram = 16"
    },
    {
      "trigger": "kRenderFxExplode",
      "contents": "kRenderFxExplode",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxExplode = 17"
    },
    {
      "trigger": "kRenderFxGlowShell",
      "contents": "kRenderFxGlowShell",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxGlowShell = 18"
    },
    {
      "trigger": "kRenderFxClampMinScale",
      "contents": "kRenderFxClampMinScale",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxClampMinScale = 19"
    },
    {
      "trigger": "kRenderFxEnvRain",
      "contents": "kRenderFxEnvRain",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxEnvRain = 20"
    },
    {
      "trigger": "kRenderFxEnvSnow",
      "contents": "kRenderFxEnvSnow",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxEnvSnow = 21"
    },
    {
      "trigger": "kRenderFxSpotlight",
      "contents": "kRenderFxSpotlight",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxSpotlight = 22"
    },
    {
      "trigger": "kRenderFxRagdoll",
      "contents": "kRenderFxRagdoll",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxRagdoll = 23"
    },
    {
      "trigger": "kRenderFxPulseFastWider",
      "contents": "kRenderFxPulseFastWider",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "kRenderFxPulseFastWider = 24"
    },
    {
      "trigger": "MASK_ALL",
      "contents": "MASK_ALL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_ALL = 4294967295"
    },
    {
      "trigger": "MASK_BLOCKLOS",
      "contents": "MASK_BLOCKLOS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_BLOCKLOS = 16449"
    },
    {
      "trigger": "MASK_BLOCKLOS_AND_NPCS",
      "contents": "MASK_BLOCKLOS_AND_NPCS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_BLOCKLOS_AND_NPCS = 33570881"
    },
    {
      "trigger": "MASK_CURRENT",
      "contents": "MASK_CURRENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_CURRENT = 16515072"
    },
    {
      "trigger": "MASK_DEADSOLID",
      "contents": "MASK_DEADSOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_DEADSOLID = 65547"
    },
    {
      "trigger": "MASK_NPCSOLID",
      "contents": "MASK_NPCSOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_NPCSOLID = 33701899"
    },
    {
      "trigger": "MASK_NPCSOLID_BRUSHONLY",
      "contents": "MASK_NPCSOLID_BRUSHONLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_NPCSOLID_BRUSHONLY = 147467"
    },
    {
      "trigger": "MASK_NPCWORLDSTATIC",
      "contents": "MASK_NPCWORLDSTATIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_NPCWORLDSTATIC = 131083"
    },
    {
      "trigger": "MASK_OPAQUE",
      "contents": "MASK_OPAQUE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_OPAQUE = 16513"
    },
    {
      "trigger": "MASK_OPAQUE_AND_NPCS",
      "contents": "MASK_OPAQUE_AND_NPCS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_OPAQUE_AND_NPCS = 33570945"
    },
    {
      "trigger": "MASK_PLAYERSOLID",
      "contents": "MASK_PLAYERSOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_PLAYERSOLID = 33636363"
    },
    {
      "trigger": "MASK_PLAYERSOLID_BRUSHONLY",
      "contents": "MASK_PLAYERSOLID_BRUSHONLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_PLAYERSOLID_BRUSHONLY = 81931"
    },
    {
      "trigger": "MASK_SHOT",
      "contents": "MASK_SHOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SHOT = 1174421507"
    },
    {
      "trigger": "MASK_SHOT_HULL",
      "contents": "MASK_SHOT_HULL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SHOT_HULL = 100679691"
    },
    {
      "trigger": "MASK_SHOT_PORTAL",
      "contents": "MASK_SHOT_PORTAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SHOT_PORTAL = 33570819"
    },
    {
      "trigger": "MASK_SOLID",
      "contents": "MASK_SOLID",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SOLID = 33570827"
    },
    {
      "trigger": "MASK_SOLID_BRUSHONLY",
      "contents": "MASK_SOLID_BRUSHONLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SOLID_BRUSHONLY = 16395"
    },
    {
      "trigger": "MASK_SPLITAREAPORTAL",
      "contents": "MASK_SPLITAREAPORTAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_SPLITAREAPORTAL = 48"
    },
    {
      "trigger": "MASK_VISIBLE",
      "contents": "MASK_VISIBLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_VISIBLE = 24705"
    },
    {
      "trigger": "MASK_VISIBLE_AND_NPCS",
      "contents": "MASK_VISIBLE_AND_NPCS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_VISIBLE_AND_NPCS = 33579137"
    },
    {
      "trigger": "MASK_WATER",
      "contents": "MASK_WATER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MASK_WATER = 16432"
    },
    {
      "trigger": "MAT_ANTLION",
      "contents": "MAT_ANTLION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_ANTLION = 65"
    },
    {
      "trigger": "MAT_BLOODYFLESH",
      "contents": "MAT_BLOODYFLESH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_BLOODYFLESH = 66"
    },
    {
      "trigger": "MAT_CONCRETE",
      "contents": "MAT_CONCRETE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_CONCRETE = 67"
    },
    {
      "trigger": "MAT_DIRT",
      "contents": "MAT_DIRT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_DIRT = 68"
    },
    {
      "trigger": "MAT_EGGSHELL",
      "contents": "MAT_EGGSHELL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_EGGSHELL = 69"
    },
    {
      "trigger": "MAT_FLESH",
      "contents": "MAT_FLESH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_FLESH = 70"
    },
    {
      "trigger": "MAT_GRATE",
      "contents": "MAT_GRATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_GRATE = 71"
    },
    {
      "trigger": "MAT_ALIENFLESH",
      "contents": "MAT_ALIENFLESH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_ALIENFLESH = 72"
    },
    {
      "trigger": "MAT_CLIP",
      "contents": "MAT_CLIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_CLIP = 73"
    },
    {
      "trigger": "MAT_SNOW",
      "contents": "MAT_SNOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_SNOW = 74"
    },
    {
      "trigger": "MAT_PLASTIC",
      "contents": "MAT_PLASTIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_PLASTIC = 76"
    },
    {
      "trigger": "MAT_METAL",
      "contents": "MAT_METAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_METAL = 77"
    },
    {
      "trigger": "MAT_SAND",
      "contents": "MAT_SAND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_SAND = 78"
    },
    {
      "trigger": "MAT_FOLIAGE",
      "contents": "MAT_FOLIAGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_FOLIAGE = 79"
    },
    {
      "trigger": "MAT_COMPUTER",
      "contents": "MAT_COMPUTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_COMPUTER = 80"
    },
    {
      "trigger": "MAT_SLOSH",
      "contents": "MAT_SLOSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_SLOSH = 83"
    },
    {
      "trigger": "MAT_TILE",
      "contents": "MAT_TILE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_TILE = 84"
    },
    {
      "trigger": "MAT_GRASS",
      "contents": "MAT_GRASS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_GRASS = 85"
    },
    {
      "trigger": "MAT_VENT",
      "contents": "MAT_VENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_VENT = 86"
    },
    {
      "trigger": "MAT_WOOD",
      "contents": "MAT_WOOD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_WOOD = 87"
    },
    {
      "trigger": "MAT_DEFAULT",
      "contents": "MAT_DEFAULT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_DEFAULT = 88"
    },
    {
      "trigger": "MAT_GLASS",
      "contents": "MAT_GLASS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_GLASS = 89"
    },
    {
      "trigger": "MAT_WARPSHIELD",
      "contents": "MAT_WARPSHIELD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MAT_WARPSHIELD = 90"
    },
    {
      "trigger": "MATERIAL_LINES",
      "contents": "MATERIAL_LINES",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LINES = 1"
    },
    {
      "trigger": "MATERIAL_LINE_LOOP",
      "contents": "MATERIAL_LINE_LOOP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LINE_LOOP = 5"
    },
    {
      "trigger": "MATERIAL_LINE_STRIP",
      "contents": "MATERIAL_LINE_STRIP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LINE_STRIP = 4"
    },
    {
      "trigger": "MATERIAL_POINTS",
      "contents": "MATERIAL_POINTS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_POINTS = 0"
    },
    {
      "trigger": "MATERIAL_POLYGON",
      "contents": "MATERIAL_POLYGON",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_POLYGON = 6"
    },
    {
      "trigger": "MATERIAL_QUADS",
      "contents": "MATERIAL_QUADS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_QUADS = 7"
    },
    {
      "trigger": "MATERIAL_TRIANGLES",
      "contents": "MATERIAL_TRIANGLES",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_TRIANGLES = 2"
    },
    {
      "trigger": "MATERIAL_TRIANGLE_STRIP",
      "contents": "MATERIAL_TRIANGLE_STRIP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_TRIANGLE_STRIP = 3"
    },
    {
      "trigger": "MATERIAL_CULLMODE_CCW",
      "contents": "MATERIAL_CULLMODE_CCW",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_CULLMODE_CCW = 0"
    },
    {
      "trigger": "MATERIAL_CULLMODE_CW",
      "contents": "MATERIAL_CULLMODE_CW",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_CULLMODE_CW = 1"
    },
    {
      "trigger": "MATERIAL_FOG_NONE",
      "contents": "MATERIAL_FOG_NONE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_FOG_NONE = 0"
    },
    {
      "trigger": "MATERIAL_FOG_LINEAR",
      "contents": "MATERIAL_FOG_LINEAR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_FOG_LINEAR = 1"
    },
    {
      "trigger": "MATERIAL_FOG_LINEAR_BELOW_FOG_Z",
      "contents": "MATERIAL_FOG_LINEAR_BELOW_FOG_Z",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_FOG_LINEAR_BELOW_FOG_Z = 2"
    },
    {
      "trigger": "MATERIAL_LIGHT_DISABLE",
      "contents": "MATERIAL_LIGHT_DISABLE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LIGHT_DISABLE = 0"
    },
    {
      "trigger": "MATERIAL_LIGHT_POINT",
      "contents": "MATERIAL_LIGHT_POINT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LIGHT_POINT = 1"
    },
    {
      "trigger": "MATERIAL_LIGHT_DIRECTIONAL",
      "contents": "MATERIAL_LIGHT_DIRECTIONAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LIGHT_DIRECTIONAL = 2"
    },
    {
      "trigger": "MATERIAL_LIGHT_SPOT",
      "contents": "MATERIAL_LIGHT_SPOT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_LIGHT_SPOT = 3"
    },
    {
      "trigger": "MATERIAL_RT_DEPTH_SHARED",
      "contents": "MATERIAL_RT_DEPTH_SHARED",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_RT_DEPTH_SHARED = 0"
    },
    {
      "trigger": "MATERIAL_RT_DEPTH_SEPARATE",
      "contents": "MATERIAL_RT_DEPTH_SEPARATE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_RT_DEPTH_SEPARATE = 1"
    },
    {
      "trigger": "MATERIAL_RT_DEPTH_NONE",
      "contents": "MATERIAL_RT_DEPTH_NONE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_RT_DEPTH_NONE = 2"
    },
    {
      "trigger": "MATERIAL_RT_DEPTH_ONLY",
      "contents": "MATERIAL_RT_DEPTH_ONLY",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MATERIAL_RT_DEPTH_ONLY = 3"
    },
    {
      "trigger": "MOUSE_FIRST",
      "contents": "MOUSE_FIRST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_FIRST = 107"
    },
    {
      "trigger": "MOUSE_LEFT",
      "contents": "MOUSE_LEFT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_LEFT = 107"
    },
    {
      "trigger": "MOUSE_RIGHT",
      "contents": "MOUSE_RIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_RIGHT = 108"
    },
    {
      "trigger": "MOUSE_MIDDLE",
      "contents": "MOUSE_MIDDLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_MIDDLE = 109"
    },
    {
      "trigger": "MOUSE_4",
      "contents": "MOUSE_4",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_4 = 110"
    },
    {
      "trigger": "MOUSE_5",
      "contents": "MOUSE_5",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_5 = 111"
    },
    {
      "trigger": "MOUSE_WHEEL_UP",
      "contents": "MOUSE_WHEEL_UP",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_WHEEL_UP = 112"
    },
    {
      "trigger": "MOUSE_WHEEL_DOWN",
      "contents": "MOUSE_WHEEL_DOWN",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_WHEEL_DOWN = 113"
    },
    {
      "trigger": "MOUSE_LAST",
      "contents": "MOUSE_LAST",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_LAST = 113"
    },
    {
      "trigger": "MOUSE_COUNT",
      "contents": "MOUSE_COUNT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOUSE_COUNT = 7"
    },
    {
      "trigger": "MOVECOLLIDE_DEFAULT",
      "contents": "MOVECOLLIDE_DEFAULT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVECOLLIDE_DEFAULT = 0"
    },
    {
      "trigger": "MOVECOLLIDE_FLY_BOUNCE",
      "contents": "MOVECOLLIDE_FLY_BOUNCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVECOLLIDE_FLY_BOUNCE = 1"
    },
    {
      "trigger": "MOVECOLLIDE_FLY_CUSTOM",
      "contents": "MOVECOLLIDE_FLY_CUSTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVECOLLIDE_FLY_CUSTOM = 2"
    },
    {
      "trigger": "MOVECOLLIDE_FLY_SLIDE",
      "contents": "MOVECOLLIDE_FLY_SLIDE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVECOLLIDE_FLY_SLIDE = 3"
    },
    {
      "trigger": "MOVECOLLIDE_COUNT",
      "contents": "MOVECOLLIDE_COUNT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVECOLLIDE_COUNT = 4"
    },
    {
      "trigger": "MOVETYPE_NONE",
      "contents": "MOVETYPE_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_NONE = 0"
    },
    {
      "trigger": "MOVETYPE_ISOMETRIC",
      "contents": "MOVETYPE_ISOMETRIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_ISOMETRIC = 1"
    },
    {
      "trigger": "MOVETYPE_WALK",
      "contents": "MOVETYPE_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_WALK = 2"
    },
    {
      "trigger": "MOVETYPE_STEP",
      "contents": "MOVETYPE_STEP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_STEP = 3"
    },
    {
      "trigger": "MOVETYPE_FLY",
      "contents": "MOVETYPE_FLY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_FLY = 4"
    },
    {
      "trigger": "MOVETYPE_FLYGRAVITY",
      "contents": "MOVETYPE_FLYGRAVITY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_FLYGRAVITY = 5"
    },
    {
      "trigger": "MOVETYPE_VPHYSICS",
      "contents": "MOVETYPE_VPHYSICS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_VPHYSICS = 6"
    },
    {
      "trigger": "MOVETYPE_PUSH",
      "contents": "MOVETYPE_PUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_PUSH = 7"
    },
    {
      "trigger": "MOVETYPE_NOCLIP",
      "contents": "MOVETYPE_NOCLIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_NOCLIP = 8"
    },
    {
      "trigger": "MOVETYPE_LADDER",
      "contents": "MOVETYPE_LADDER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_LADDER = 9"
    },
    {
      "trigger": "MOVETYPE_OBSERVER",
      "contents": "MOVETYPE_OBSERVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_OBSERVER = 10"
    },
    {
      "trigger": "MOVETYPE_CUSTOM",
      "contents": "MOVETYPE_CUSTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "MOVETYPE_CUSTOM = 11"
    },
    {
      "trigger": "NAV_NONE",
      "contents": "NAV_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_NONE = -1"
    },
    {
      "trigger": "NAV_GROUND",
      "contents": "NAV_GROUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_GROUND = 0"
    },
    {
      "trigger": "NAV_JUMP",
      "contents": "NAV_JUMP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_JUMP = 1"
    },
    {
      "trigger": "NAV_FLY",
      "contents": "NAV_FLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_FLY = 2"
    },
    {
      "trigger": "NAV_CLIMB",
      "contents": "NAV_CLIMB",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_CLIMB = 3"
    },
    {
      "trigger": "NAV_MESH_INVALID",
      "contents": "NAV_MESH_INVALID",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_INVALID = 0"
    },
    {
      "trigger": "NAV_MESH_CROUCH",
      "contents": "NAV_MESH_CROUCH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_CROUCH = 1"
    },
    {
      "trigger": "NAV_MESH_JUMP",
      "contents": "NAV_MESH_JUMP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_JUMP = 2"
    },
    {
      "trigger": "NAV_MESH_PRECISE",
      "contents": "NAV_MESH_PRECISE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_PRECISE = 4"
    },
    {
      "trigger": "NAV_MESH_NO_JUMP",
      "contents": "NAV_MESH_NO_JUMP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_NO_JUMP = 8"
    },
    {
      "trigger": "NAV_MESH_STOP",
      "contents": "NAV_MESH_STOP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_STOP = 16"
    },
    {
      "trigger": "NAV_MESH_RUN",
      "contents": "NAV_MESH_RUN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_RUN = 32"
    },
    {
      "trigger": "NAV_MESH_WALK",
      "contents": "NAV_MESH_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_WALK = 64"
    },
    {
      "trigger": "NAV_MESH_AVOID",
      "contents": "NAV_MESH_AVOID",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_AVOID = 128"
    },
    {
      "trigger": "NAV_MESH_TRANSIENT",
      "contents": "NAV_MESH_TRANSIENT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_TRANSIENT = 256"
    },
    {
      "trigger": "NAV_MESH_DONT_HIDE",
      "contents": "NAV_MESH_DONT_HIDE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_DONT_HIDE = 512"
    },
    {
      "trigger": "NAV_MESH_STAND",
      "contents": "NAV_MESH_STAND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_STAND = 1024"
    },
    {
      "trigger": "NAV_MESH_NO_HOSTAGES",
      "contents": "NAV_MESH_NO_HOSTAGES",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_NO_HOSTAGES = 2048"
    },
    {
      "trigger": "NAV_MESH_STAIRS",
      "contents": "NAV_MESH_STAIRS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_STAIRS = 4096"
    },
    {
      "trigger": "NAV_MESH_NO_MERGE",
      "contents": "NAV_MESH_NO_MERGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_NO_MERGE = 8192"
    },
    {
      "trigger": "NAV_MESH_OBSTACLE_TOP",
      "contents": "NAV_MESH_OBSTACLE_TOP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_OBSTACLE_TOP = 16384"
    },
    {
      "trigger": "NAV_MESH_CLIFF",
      "contents": "NAV_MESH_CLIFF",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_CLIFF = 32768"
    },
    {
      "trigger": "NAV_MESH_FUNC_COST",
      "contents": "NAV_MESH_FUNC_COST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_FUNC_COST = 536870912"
    },
    {
      "trigger": "NAV_MESH_BLOCKED_PROPDOOR",
      "contents": "NAV_MESH_BLOCKED_PROPDOOR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_BLOCKED_PROPDOOR = 268435456"
    },
    {
      "trigger": "NAV_MESH_HAS_ELEVATOR",
      "contents": "NAV_MESH_HAS_ELEVATOR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_HAS_ELEVATOR = 1073741824"
    },
    {
      "trigger": "NAV_MESH_NAV_BLOCKER",
      "contents": "NAV_MESH_NAV_BLOCKER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NAV_MESH_NAV_BLOCKER = -2147483648"
    },
    {
      "trigger": "NORTH_WEST",
      "contents": "NORTH_WEST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NORTH_WEST = 0"
    },
    {
      "trigger": "NORTH_EAST",
      "contents": "NORTH_EAST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NORTH_EAST = 1"
    },
    {
      "trigger": "SOUTH_EAST",
      "contents": "SOUTH_EAST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUTH_EAST = 2"
    },
    {
      "trigger": "SOUTH_WEST",
      "contents": "SOUTH_WEST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUTH_WEST = 3"
    },
    {
      "trigger": "NUM_CORNERS",
      "contents": "NUM_CORNERS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NUM_CORNERS = 4"
    },
    {
      "trigger": "NORTH",
      "contents": "NORTH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NORTH = 0"
    },
    {
      "trigger": "EAST",
      "contents": "EAST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "EAST = 1"
    },
    {
      "trigger": "SOUTH",
      "contents": "SOUTH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUTH = 2"
    },
    {
      "trigger": "WEST",
      "contents": "WEST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEST = 3"
    },
    {
      "trigger": "GO_NORTH",
      "contents": "GO_NORTH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_NORTH = 0"
    },
    {
      "trigger": "GO_EAST",
      "contents": "GO_EAST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_EAST = 1"
    },
    {
      "trigger": "GO_SOUTH",
      "contents": "GO_SOUTH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_SOUTH = 2"
    },
    {
      "trigger": "GO_WEST",
      "contents": "GO_WEST",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_WEST = 3"
    },
    {
      "trigger": "GO_LADDER_UP",
      "contents": "GO_LADDER_UP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_LADDER_UP = 4"
    },
    {
      "trigger": "GO_LADDER_DOWN",
      "contents": "GO_LADDER_DOWN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_LADDER_DOWN = 5"
    },
    {
      "trigger": "GO_JUMP",
      "contents": "GO_JUMP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_JUMP = 6"
    },
    {
      "trigger": "GO_ELEVATOR_UP",
      "contents": "GO_ELEVATOR_UP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_ELEVATOR_UP = 7"
    },
    {
      "trigger": "GO_ELEVATOR_DOWN",
      "contents": "GO_ELEVATOR_DOWN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "GO_ELEVATOR_DOWN = 8"
    },
    {
      "trigger": "NOTIFY_GENERIC",
      "contents": "NOTIFY_GENERIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NOTIFY_GENERIC = 0"
    },
    {
      "trigger": "NOTIFY_ERROR",
      "contents": "NOTIFY_ERROR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NOTIFY_ERROR = 1"
    },
    {
      "trigger": "NOTIFY_UNDO",
      "contents": "NOTIFY_UNDO",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NOTIFY_UNDO = 2"
    },
    {
      "trigger": "NOTIFY_HINT",
      "contents": "NOTIFY_HINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NOTIFY_HINT = 3"
    },
    {
      "trigger": "NOTIFY_CLEANUP",
      "contents": "NOTIFY_CLEANUP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NOTIFY_CLEANUP = 4"
    },
    {
      "trigger": "NPC_STATE_INVALID",
      "contents": "NPC_STATE_INVALID",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_INVALID = -1"
    },
    {
      "trigger": "NPC_STATE_NONE",
      "contents": "NPC_STATE_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_NONE = 0"
    },
    {
      "trigger": "NPC_STATE_IDLE",
      "contents": "NPC_STATE_IDLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_IDLE = 1"
    },
    {
      "trigger": "NPC_STATE_ALERT",
      "contents": "NPC_STATE_ALERT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_ALERT = 2"
    },
    {
      "trigger": "NPC_STATE_COMBAT",
      "contents": "NPC_STATE_COMBAT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_COMBAT = 3"
    },
    {
      "trigger": "NPC_STATE_SCRIPT",
      "contents": "NPC_STATE_SCRIPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_SCRIPT = 4"
    },
    {
      "trigger": "NPC_STATE_PLAYDEAD",
      "contents": "NPC_STATE_PLAYDEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_PLAYDEAD = 5"
    },
    {
      "trigger": "NPC_STATE_PRONE",
      "contents": "NPC_STATE_PRONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_PRONE = 6"
    },
    {
      "trigger": "NPC_STATE_DEAD",
      "contents": "NPC_STATE_DEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NPC_STATE_DEAD = 7"
    },
    {
      "trigger": "NUM_AI_CLASSES",
      "contents": "NUM_AI_CLASSES",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NUM_AI_CLASSES = 36"
    },
    {
      "trigger": "NUM_HULLS",
      "contents": "NUM_HULLS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "NUM_HULLS = 10"
    },
    {
      "trigger": "OBS_MODE_NONE",
      "contents": "OBS_MODE_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_NONE = 0"
    },
    {
      "trigger": "OBS_MODE_DEATHCAM",
      "contents": "OBS_MODE_DEATHCAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_DEATHCAM = 1"
    },
    {
      "trigger": "OBS_MODE_FREEZECAM",
      "contents": "OBS_MODE_FREEZECAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_FREEZECAM = 2"
    },
    {
      "trigger": "OBS_MODE_FIXED",
      "contents": "OBS_MODE_FIXED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_FIXED = 3"
    },
    {
      "trigger": "OBS_MODE_IN_EYE",
      "contents": "OBS_MODE_IN_EYE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_IN_EYE = 4"
    },
    {
      "trigger": "OBS_MODE_CHASE",
      "contents": "OBS_MODE_CHASE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_CHASE = 5"
    },
    {
      "trigger": "OBS_MODE_ROAMING",
      "contents": "OBS_MODE_ROAMING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "OBS_MODE_ROAMING = 6"
    },
    {
      "trigger": "PATTACH_ABSORIGIN",
      "contents": "PATTACH_ABSORIGIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_ABSORIGIN = 0"
    },
    {
      "trigger": "PATTACH_ABSORIGIN_FOLLOW",
      "contents": "PATTACH_ABSORIGIN_FOLLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_ABSORIGIN_FOLLOW = 1"
    },
    {
      "trigger": "PATTACH_CUSTOMORIGIN",
      "contents": "PATTACH_CUSTOMORIGIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_CUSTOMORIGIN = 2"
    },
    {
      "trigger": "PATTACH_POINT",
      "contents": "PATTACH_POINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_POINT = 3"
    },
    {
      "trigger": "PATTACH_POINT_FOLLOW",
      "contents": "PATTACH_POINT_FOLLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_POINT_FOLLOW = 4"
    },
    {
      "trigger": "PATTACH_WORLDORIGIN",
      "contents": "PATTACH_WORLDORIGIN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PATTACH_WORLDORIGIN = 5"
    },
    {
      "trigger": "PLAYER_IDLE",
      "contents": "PLAYER_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_IDLE = 0"
    },
    {
      "trigger": "PLAYER_WALK",
      "contents": "PLAYER_WALK",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_WALK = 1"
    },
    {
      "trigger": "PLAYER_JUMP",
      "contents": "PLAYER_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_JUMP = 2"
    },
    {
      "trigger": "PLAYER_SUPERJUMP",
      "contents": "PLAYER_SUPERJUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_SUPERJUMP = 3"
    },
    {
      "trigger": "PLAYER_DIE",
      "contents": "PLAYER_DIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_DIE = 4"
    },
    {
      "trigger": "PLAYER_ATTACK1",
      "contents": "PLAYER_ATTACK1",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_ATTACK1 = 5"
    },
    {
      "trigger": "PLAYER_IN_VEHICLE",
      "contents": "PLAYER_IN_VEHICLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_IN_VEHICLE = 6"
    },
    {
      "trigger": "PLAYER_RELOAD",
      "contents": "PLAYER_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_RELOAD = 7"
    },
    {
      "trigger": "PLAYER_START_AIMING",
      "contents": "PLAYER_START_AIMING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_START_AIMING = 8"
    },
    {
      "trigger": "PLAYER_LEAVE_AIMING",
      "contents": "PLAYER_LEAVE_AIMING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYER_LEAVE_AIMING = 9"
    },
    {
      "trigger": "PLAYERANIMEVENT_ATTACK_PRIMARY",
      "contents": "PLAYERANIMEVENT_ATTACK_PRIMARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_ATTACK_PRIMARY = 0"
    },
    {
      "trigger": "PLAYERANIMEVENT_ATTACK_SECONDARY",
      "contents": "PLAYERANIMEVENT_ATTACK_SECONDARY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_ATTACK_SECONDARY = 1"
    },
    {
      "trigger": "PLAYERANIMEVENT_ATTACK_GRENADE",
      "contents": "PLAYERANIMEVENT_ATTACK_GRENADE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_ATTACK_GRENADE = 2"
    },
    {
      "trigger": "PLAYERANIMEVENT_RELOAD",
      "contents": "PLAYERANIMEVENT_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_RELOAD = 3"
    },
    {
      "trigger": "PLAYERANIMEVENT_RELOAD_LOOP",
      "contents": "PLAYERANIMEVENT_RELOAD_LOOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_RELOAD_LOOP = 4"
    },
    {
      "trigger": "PLAYERANIMEVENT_RELOAD_END",
      "contents": "PLAYERANIMEVENT_RELOAD_END",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_RELOAD_END = 5"
    },
    {
      "trigger": "PLAYERANIMEVENT_JUMP",
      "contents": "PLAYERANIMEVENT_JUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_JUMP = 6"
    },
    {
      "trigger": "PLAYERANIMEVENT_SWIM",
      "contents": "PLAYERANIMEVENT_SWIM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_SWIM = 7"
    },
    {
      "trigger": "PLAYERANIMEVENT_DIE",
      "contents": "PLAYERANIMEVENT_DIE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_DIE = 8"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_CHEST",
      "contents": "PLAYERANIMEVENT_FLINCH_CHEST",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_CHEST = 9"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_HEAD",
      "contents": "PLAYERANIMEVENT_FLINCH_HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_HEAD = 10"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_LEFTARM",
      "contents": "PLAYERANIMEVENT_FLINCH_LEFTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_LEFTARM = 11"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_RIGHTARM",
      "contents": "PLAYERANIMEVENT_FLINCH_RIGHTARM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_RIGHTARM = 12"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_LEFTLEG",
      "contents": "PLAYERANIMEVENT_FLINCH_LEFTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_LEFTLEG = 13"
    },
    {
      "trigger": "PLAYERANIMEVENT_FLINCH_RIGHTLEG",
      "contents": "PLAYERANIMEVENT_FLINCH_RIGHTLEG",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_FLINCH_RIGHTLEG = 14"
    },
    {
      "trigger": "PLAYERANIMEVENT_DOUBLEJUMP",
      "contents": "PLAYERANIMEVENT_DOUBLEJUMP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_DOUBLEJUMP = 15"
    },
    {
      "trigger": "PLAYERANIMEVENT_CANCEL",
      "contents": "PLAYERANIMEVENT_CANCEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CANCEL = 16"
    },
    {
      "trigger": "PLAYERANIMEVENT_SPAWN",
      "contents": "PLAYERANIMEVENT_SPAWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_SPAWN = 17"
    },
    {
      "trigger": "PLAYERANIMEVENT_SNAP_YAW",
      "contents": "PLAYERANIMEVENT_SNAP_YAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_SNAP_YAW = 18"
    },
    {
      "trigger": "PLAYERANIMEVENT_CUSTOM",
      "contents": "PLAYERANIMEVENT_CUSTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CUSTOM = 19"
    },
    {
      "trigger": "PLAYERANIMEVENT_CUSTOM_GESTURE",
      "contents": "PLAYERANIMEVENT_CUSTOM_GESTURE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CUSTOM_GESTURE = 20"
    },
    {
      "trigger": "PLAYERANIMEVENT_CUSTOM_SEQUENCE",
      "contents": "PLAYERANIMEVENT_CUSTOM_SEQUENCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CUSTOM_SEQUENCE = 21"
    },
    {
      "trigger": "PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE",
      "contents": "PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE = 22"
    },
    {
      "trigger": "PLAYERANIMEVENT_CANCEL_RELOAD",
      "contents": "PLAYERANIMEVENT_CANCEL_RELOAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "PLAYERANIMEVENT_CANCEL_RELOAD = 23"
    },
    {
      "trigger": "RENDERGROUP_STATIC_HUGE",
      "contents": "RENDERGROUP_STATIC_HUGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_STATIC_HUGE = 0"
    },
    {
      "trigger": "RENDERGROUP_OPAQUE_HUGE",
      "contents": "RENDERGROUP_OPAQUE_HUGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_OPAQUE_HUGE = 1"
    },
    {
      "trigger": "RENDERGROUP_STATIC",
      "contents": "RENDERGROUP_STATIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_STATIC = 6"
    },
    {
      "trigger": "RENDERGROUP_OPAQUE",
      "contents": "RENDERGROUP_OPAQUE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_OPAQUE = 7"
    },
    {
      "trigger": "RENDERGROUP_TRANSLUCENT",
      "contents": "RENDERGROUP_TRANSLUCENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_TRANSLUCENT = 8"
    },
    {
      "trigger": "RENDERGROUP_BOTH",
      "contents": "RENDERGROUP_BOTH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_BOTH = 9"
    },
    {
      "trigger": "RENDERGROUP_VIEWMODEL",
      "contents": "RENDERGROUP_VIEWMODEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_VIEWMODEL = 10"
    },
    {
      "trigger": "RENDERGROUP_VIEWMODEL_TRANSLUCENT",
      "contents": "RENDERGROUP_VIEWMODEL_TRANSLUCENT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_VIEWMODEL_TRANSLUCENT = 11"
    },
    {
      "trigger": "RENDERGROUP_OPAQUE_BRUSH",
      "contents": "RENDERGROUP_OPAQUE_BRUSH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_OPAQUE_BRUSH = 12"
    },
    {
      "trigger": "RENDERGROUP_OTHER",
      "contents": "RENDERGROUP_OTHER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERGROUP_OTHER = 13"
    },
    {
      "trigger": "RENDERMODE_NORMAL",
      "contents": "RENDERMODE_NORMAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_NORMAL = 0"
    },
    {
      "trigger": "RENDERMODE_TRANSCOLOR",
      "contents": "RENDERMODE_TRANSCOLOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSCOLOR = 1"
    },
    {
      "trigger": "RENDERMODE_TRANSTEXTURE",
      "contents": "RENDERMODE_TRANSTEXTURE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSTEXTURE = 2"
    },
    {
      "trigger": "RENDERMODE_GLOW",
      "contents": "RENDERMODE_GLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_GLOW = 3"
    },
    {
      "trigger": "RENDERMODE_TRANSALPHA",
      "contents": "RENDERMODE_TRANSALPHA",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSALPHA = 4"
    },
    {
      "trigger": "RENDERMODE_TRANSADD",
      "contents": "RENDERMODE_TRANSADD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSADD = 5"
    },
    {
      "trigger": "RENDERMODE_ENVIROMENTAL",
      "contents": "RENDERMODE_ENVIROMENTAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_ENVIROMENTAL = 6"
    },
    {
      "trigger": "RENDERMODE_TRANSADDFRAMEBLEND",
      "contents": "RENDERMODE_TRANSADDFRAMEBLEND",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSADDFRAMEBLEND = 7"
    },
    {
      "trigger": "RENDERMODE_TRANSALPHADD",
      "contents": "RENDERMODE_TRANSALPHADD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_TRANSALPHADD = 8"
    },
    {
      "trigger": "RENDERMODE_WORLDGLOW",
      "contents": "RENDERMODE_WORLDGLOW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_WORLDGLOW = 9"
    },
    {
      "trigger": "RENDERMODE_NONE",
      "contents": "RENDERMODE_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RENDERMODE_NONE = 10"
    },
    {
      "trigger": "RT_SIZE_NO_CHANGE",
      "contents": "RT_SIZE_NO_CHANGE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_NO_CHANGE = 0"
    },
    {
      "trigger": "RT_SIZE_DEFAULT",
      "contents": "RT_SIZE_DEFAULT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_DEFAULT = 1"
    },
    {
      "trigger": "RT_SIZE_PICMIP",
      "contents": "RT_SIZE_PICMIP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_PICMIP = 2"
    },
    {
      "trigger": "RT_SIZE_HDR",
      "contents": "RT_SIZE_HDR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_HDR = 3"
    },
    {
      "trigger": "RT_SIZE_FULL_FRAME_BUFFER",
      "contents": "RT_SIZE_FULL_FRAME_BUFFER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_FULL_FRAME_BUFFER = 4"
    },
    {
      "trigger": "RT_SIZE_OFFSCREEN",
      "contents": "RT_SIZE_OFFSCREEN",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_OFFSCREEN = 5"
    },
    {
      "trigger": "RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP",
      "contents": "RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP = 6"
    },
    {
      "trigger": "RT_SIZE_REPLAY_SCREENSHOT",
      "contents": "RT_SIZE_REPLAY_SCREENSHOT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_REPLAY_SCREENSHOT = 7"
    },
    {
      "trigger": "RT_SIZE_LITERAL",
      "contents": "RT_SIZE_LITERAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_LITERAL = 8"
    },
    {
      "trigger": "RT_SIZE_LITERAL_PICMIP",
      "contents": "RT_SIZE_LITERAL_PICMIP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "RT_SIZE_LITERAL_PICMIP = 9"
    },
    {
      "trigger": "LAST_SHARED_SCHEDULE",
      "contents": "LAST_SHARED_SCHEDULE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "LAST_SHARED_SCHEDULE = 88"
    },
    {
      "trigger": "SCHED_AISCRIPT",
      "contents": "SCHED_AISCRIPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_AISCRIPT = 56"
    },
    {
      "trigger": "SCHED_ALERT_FACE",
      "contents": "SCHED_ALERT_FACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_FACE = 5"
    },
    {
      "trigger": "SCHED_ALERT_FACE_BESTSOUND",
      "contents": "SCHED_ALERT_FACE_BESTSOUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_FACE_BESTSOUND = 6"
    },
    {
      "trigger": "SCHED_ALERT_REACT_TO_COMBAT_SOUND",
      "contents": "SCHED_ALERT_REACT_TO_COMBAT_SOUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_REACT_TO_COMBAT_SOUND = 7"
    },
    {
      "trigger": "SCHED_ALERT_SCAN",
      "contents": "SCHED_ALERT_SCAN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_SCAN = 8"
    },
    {
      "trigger": "SCHED_ALERT_STAND",
      "contents": "SCHED_ALERT_STAND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_STAND = 9"
    },
    {
      "trigger": "SCHED_ALERT_WALK",
      "contents": "SCHED_ALERT_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ALERT_WALK = 10"
    },
    {
      "trigger": "SCHED_AMBUSH",
      "contents": "SCHED_AMBUSH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_AMBUSH = 52"
    },
    {
      "trigger": "SCHED_ARM_WEAPON",
      "contents": "SCHED_ARM_WEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ARM_WEAPON = 48"
    },
    {
      "trigger": "SCHED_BACK_AWAY_FROM_ENEMY",
      "contents": "SCHED_BACK_AWAY_FROM_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_BACK_AWAY_FROM_ENEMY = 24"
    },
    {
      "trigger": "SCHED_BACK_AWAY_FROM_SAVE_POSITION",
      "contents": "SCHED_BACK_AWAY_FROM_SAVE_POSITION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_BACK_AWAY_FROM_SAVE_POSITION = 26"
    },
    {
      "trigger": "SCHED_BIG_FLINCH",
      "contents": "SCHED_BIG_FLINCH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_BIG_FLINCH = 23"
    },
    {
      "trigger": "SCHED_CHASE_ENEMY",
      "contents": "SCHED_CHASE_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_CHASE_ENEMY = 17"
    },
    {
      "trigger": "SCHED_CHASE_ENEMY_FAILED",
      "contents": "SCHED_CHASE_ENEMY_FAILED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_CHASE_ENEMY_FAILED = 18"
    },
    {
      "trigger": "SCHED_COMBAT_FACE",
      "contents": "SCHED_COMBAT_FACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COMBAT_FACE = 12"
    },
    {
      "trigger": "SCHED_COMBAT_PATROL",
      "contents": "SCHED_COMBAT_PATROL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COMBAT_PATROL = 75"
    },
    {
      "trigger": "SCHED_COMBAT_STAND",
      "contents": "SCHED_COMBAT_STAND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COMBAT_STAND = 15"
    },
    {
      "trigger": "SCHED_COMBAT_SWEEP",
      "contents": "SCHED_COMBAT_SWEEP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COMBAT_SWEEP = 13"
    },
    {
      "trigger": "SCHED_COMBAT_WALK",
      "contents": "SCHED_COMBAT_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COMBAT_WALK = 16"
    },
    {
      "trigger": "SCHED_COWER",
      "contents": "SCHED_COWER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_COWER = 40"
    },
    {
      "trigger": "SCHED_DIE",
      "contents": "SCHED_DIE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_DIE = 53"
    },
    {
      "trigger": "SCHED_DIE_RAGDOLL",
      "contents": "SCHED_DIE_RAGDOLL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_DIE_RAGDOLL = 54"
    },
    {
      "trigger": "SCHED_DISARM_WEAPON",
      "contents": "SCHED_DISARM_WEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_DISARM_WEAPON = 49"
    },
    {
      "trigger": "SCHED_DROPSHIP_DUSTOFF",
      "contents": "SCHED_DROPSHIP_DUSTOFF",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_DROPSHIP_DUSTOFF = 79"
    },
    {
      "trigger": "SCHED_DUCK_DODGE",
      "contents": "SCHED_DUCK_DODGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_DUCK_DODGE = 84"
    },
    {
      "trigger": "SCHED_ESTABLISH_LINE_OF_FIRE",
      "contents": "SCHED_ESTABLISH_LINE_OF_FIRE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ESTABLISH_LINE_OF_FIRE = 35"
    },
    {
      "trigger": "SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK",
      "contents": "SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK = 36"
    },
    {
      "trigger": "SCHED_FAIL",
      "contents": "SCHED_FAIL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FAIL = 81"
    },
    {
      "trigger": "SCHED_FAIL_ESTABLISH_LINE_OF_FIRE",
      "contents": "SCHED_FAIL_ESTABLISH_LINE_OF_FIRE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FAIL_ESTABLISH_LINE_OF_FIRE = 38"
    },
    {
      "trigger": "SCHED_FAIL_NOSTOP",
      "contents": "SCHED_FAIL_NOSTOP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FAIL_NOSTOP = 82"
    },
    {
      "trigger": "SCHED_FAIL_TAKE_COVER",
      "contents": "SCHED_FAIL_TAKE_COVER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FAIL_TAKE_COVER = 31"
    },
    {
      "trigger": "SCHED_FALL_TO_GROUND",
      "contents": "SCHED_FALL_TO_GROUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FALL_TO_GROUND = 78"
    },
    {
      "trigger": "SCHED_FEAR_FACE",
      "contents": "SCHED_FEAR_FACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FEAR_FACE = 14"
    },
    {
      "trigger": "SCHED_FLEE_FROM_BEST_SOUND",
      "contents": "SCHED_FLEE_FROM_BEST_SOUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FLEE_FROM_BEST_SOUND = 29"
    },
    {
      "trigger": "SCHED_FLINCH_PHYSICS",
      "contents": "SCHED_FLINCH_PHYSICS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FLINCH_PHYSICS = 80"
    },
    {
      "trigger": "SCHED_FORCED_GO",
      "contents": "SCHED_FORCED_GO",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FORCED_GO = 71"
    },
    {
      "trigger": "SCHED_FORCED_GO_RUN",
      "contents": "SCHED_FORCED_GO_RUN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_FORCED_GO_RUN = 72"
    },
    {
      "trigger": "SCHED_GET_HEALTHKIT",
      "contents": "SCHED_GET_HEALTHKIT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_GET_HEALTHKIT = 66"
    },
    {
      "trigger": "SCHED_HIDE_AND_RELOAD",
      "contents": "SCHED_HIDE_AND_RELOAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_HIDE_AND_RELOAD = 50"
    },
    {
      "trigger": "SCHED_IDLE_STAND",
      "contents": "SCHED_IDLE_STAND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_IDLE_STAND = 1"
    },
    {
      "trigger": "SCHED_IDLE_WALK",
      "contents": "SCHED_IDLE_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_IDLE_WALK = 2"
    },
    {
      "trigger": "SCHED_IDLE_WANDER",
      "contents": "SCHED_IDLE_WANDER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_IDLE_WANDER = 3"
    },
    {
      "trigger": "SCHED_INTERACTION_MOVE_TO_PARTNER",
      "contents": "SCHED_INTERACTION_MOVE_TO_PARTNER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_INTERACTION_MOVE_TO_PARTNER = 85"
    },
    {
      "trigger": "SCHED_INTERACTION_WAIT_FOR_PARTNER",
      "contents": "SCHED_INTERACTION_WAIT_FOR_PARTNER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_INTERACTION_WAIT_FOR_PARTNER = 86"
    },
    {
      "trigger": "SCHED_INVESTIGATE_SOUND",
      "contents": "SCHED_INVESTIGATE_SOUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_INVESTIGATE_SOUND = 11"
    },
    {
      "trigger": "SCHED_MELEE_ATTACK1",
      "contents": "SCHED_MELEE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MELEE_ATTACK1 = 41"
    },
    {
      "trigger": "SCHED_MELEE_ATTACK2",
      "contents": "SCHED_MELEE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MELEE_ATTACK2 = 42"
    },
    {
      "trigger": "SCHED_MOVE_AWAY",
      "contents": "SCHED_MOVE_AWAY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MOVE_AWAY = 68"
    },
    {
      "trigger": "SCHED_MOVE_AWAY_END",
      "contents": "SCHED_MOVE_AWAY_END",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MOVE_AWAY_END = 70"
    },
    {
      "trigger": "SCHED_MOVE_AWAY_FAIL",
      "contents": "SCHED_MOVE_AWAY_FAIL",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MOVE_AWAY_FAIL = 69"
    },
    {
      "trigger": "SCHED_MOVE_AWAY_FROM_ENEMY",
      "contents": "SCHED_MOVE_AWAY_FROM_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MOVE_AWAY_FROM_ENEMY = 25"
    },
    {
      "trigger": "SCHED_MOVE_TO_WEAPON_RANGE",
      "contents": "SCHED_MOVE_TO_WEAPON_RANGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_MOVE_TO_WEAPON_RANGE = 34"
    },
    {
      "trigger": "SCHED_NEW_WEAPON",
      "contents": "SCHED_NEW_WEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_NEW_WEAPON = 63"
    },
    {
      "trigger": "SCHED_NEW_WEAPON_CHEAT",
      "contents": "SCHED_NEW_WEAPON_CHEAT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_NEW_WEAPON_CHEAT = 64"
    },
    {
      "trigger": "SCHED_NONE",
      "contents": "SCHED_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_NONE = 0"
    },
    {
      "trigger": "SCHED_NPC_FREEZE",
      "contents": "SCHED_NPC_FREEZE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_NPC_FREEZE = 73"
    },
    {
      "trigger": "SCHED_PATROL_RUN",
      "contents": "SCHED_PATROL_RUN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_PATROL_RUN = 76"
    },
    {
      "trigger": "SCHED_PATROL_WALK",
      "contents": "SCHED_PATROL_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_PATROL_WALK = 74"
    },
    {
      "trigger": "SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE",
      "contents": "SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE = 37"
    },
    {
      "trigger": "SCHED_RANGE_ATTACK1",
      "contents": "SCHED_RANGE_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RANGE_ATTACK1 = 43"
    },
    {
      "trigger": "SCHED_RANGE_ATTACK2",
      "contents": "SCHED_RANGE_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RANGE_ATTACK2 = 44"
    },
    {
      "trigger": "SCHED_RELOAD",
      "contents": "SCHED_RELOAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RELOAD = 51"
    },
    {
      "trigger": "SCHED_RUN_FROM_ENEMY",
      "contents": "SCHED_RUN_FROM_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RUN_FROM_ENEMY = 32"
    },
    {
      "trigger": "SCHED_RUN_FROM_ENEMY_FALLBACK",
      "contents": "SCHED_RUN_FROM_ENEMY_FALLBACK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RUN_FROM_ENEMY_FALLBACK = 33"
    },
    {
      "trigger": "SCHED_RUN_FROM_ENEMY_MOB",
      "contents": "SCHED_RUN_FROM_ENEMY_MOB",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RUN_FROM_ENEMY_MOB = 83"
    },
    {
      "trigger": "SCHED_RUN_RANDOM",
      "contents": "SCHED_RUN_RANDOM",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_RUN_RANDOM = 77"
    },
    {
      "trigger": "SCHED_SCENE_GENERIC",
      "contents": "SCHED_SCENE_GENERIC",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCENE_GENERIC = 62"
    },
    {
      "trigger": "SCHED_SCRIPTED_CUSTOM_MOVE",
      "contents": "SCHED_SCRIPTED_CUSTOM_MOVE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCRIPTED_CUSTOM_MOVE = 59"
    },
    {
      "trigger": "SCHED_SCRIPTED_FACE",
      "contents": "SCHED_SCRIPTED_FACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCRIPTED_FACE = 61"
    },
    {
      "trigger": "SCHED_SCRIPTED_RUN",
      "contents": "SCHED_SCRIPTED_RUN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCRIPTED_RUN = 58"
    },
    {
      "trigger": "SCHED_SCRIPTED_WAIT",
      "contents": "SCHED_SCRIPTED_WAIT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCRIPTED_WAIT = 60"
    },
    {
      "trigger": "SCHED_SCRIPTED_WALK",
      "contents": "SCHED_SCRIPTED_WALK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SCRIPTED_WALK = 57"
    },
    {
      "trigger": "SCHED_SHOOT_ENEMY_COVER",
      "contents": "SCHED_SHOOT_ENEMY_COVER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SHOOT_ENEMY_COVER = 39"
    },
    {
      "trigger": "SCHED_SLEEP",
      "contents": "SCHED_SLEEP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SLEEP = 87"
    },
    {
      "trigger": "SCHED_SMALL_FLINCH",
      "contents": "SCHED_SMALL_FLINCH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SMALL_FLINCH = 22"
    },
    {
      "trigger": "SCHED_SPECIAL_ATTACK1",
      "contents": "SCHED_SPECIAL_ATTACK1",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SPECIAL_ATTACK1 = 45"
    },
    {
      "trigger": "SCHED_SPECIAL_ATTACK2",
      "contents": "SCHED_SPECIAL_ATTACK2",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SPECIAL_ATTACK2 = 46"
    },
    {
      "trigger": "SCHED_STANDOFF",
      "contents": "SCHED_STANDOFF",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_STANDOFF = 47"
    },
    {
      "trigger": "SCHED_SWITCH_TO_PENDING_WEAPON",
      "contents": "SCHED_SWITCH_TO_PENDING_WEAPON",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_SWITCH_TO_PENDING_WEAPON = 65"
    },
    {
      "trigger": "SCHED_TAKE_COVER_FROM_BEST_SOUND",
      "contents": "SCHED_TAKE_COVER_FROM_BEST_SOUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_TAKE_COVER_FROM_BEST_SOUND = 28"
    },
    {
      "trigger": "SCHED_TAKE_COVER_FROM_ENEMY",
      "contents": "SCHED_TAKE_COVER_FROM_ENEMY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_TAKE_COVER_FROM_ENEMY = 27"
    },
    {
      "trigger": "SCHED_TAKE_COVER_FROM_ORIGIN",
      "contents": "SCHED_TAKE_COVER_FROM_ORIGIN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_TAKE_COVER_FROM_ORIGIN = 30"
    },
    {
      "trigger": "SCHED_TARGET_CHASE",
      "contents": "SCHED_TARGET_CHASE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_TARGET_CHASE = 21"
    },
    {
      "trigger": "SCHED_TARGET_FACE",
      "contents": "SCHED_TARGET_FACE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_TARGET_FACE = 20"
    },
    {
      "trigger": "SCHED_VICTORY_DANCE",
      "contents": "SCHED_VICTORY_DANCE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_VICTORY_DANCE = 19"
    },
    {
      "trigger": "SCHED_WAIT_FOR_SCRIPT",
      "contents": "SCHED_WAIT_FOR_SCRIPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_WAIT_FOR_SCRIPT = 55"
    },
    {
      "trigger": "SCHED_WAIT_FOR_SPEAK_FINISH",
      "contents": "SCHED_WAIT_FOR_SPEAK_FINISH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_WAIT_FOR_SPEAK_FINISH = 67"
    },
    {
      "trigger": "SCHED_WAKE_ANGRY",
      "contents": "SCHED_WAKE_ANGRY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCHED_WAKE_ANGRY = 4"
    },
    {
      "trigger": "SCREENFADE.IN",
      "contents": "SCREENFADE.IN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCREENFADE.IN = 1"
    },
    {
      "trigger": "SCREENFADE.OUT",
      "contents": "SCREENFADE.OUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCREENFADE.OUT = 2"
    },
    {
      "trigger": "SCREENFADE.MODULATE",
      "contents": "SCREENFADE.MODULATE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCREENFADE.MODULATE = 4"
    },
    {
      "trigger": "SCREENFADE.STAYOUT",
      "contents": "SCREENFADE.STAYOUT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCREENFADE.STAYOUT = 8"
    },
    {
      "trigger": "SCREENFADE.PURGE",
      "contents": "SCREENFADE.PURGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SCREENFADE.PURGE = 16"
    },
    {
      "trigger": "SENSORBONE.SHOULDER_RIGHT",
      "contents": "SENSORBONE.SHOULDER_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.SHOULDER_RIGHT = 8"
    },
    {
      "trigger": "SENSORBONE.SHOULDER_LEFT",
      "contents": "SENSORBONE.SHOULDER_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.SHOULDER_LEFT = 4"
    },
    {
      "trigger": "SENSORBONE.HIP",
      "contents": "SENSORBONE.HIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HIP = 0"
    },
    {
      "trigger": "SENSORBONE.ELBOW_RIGHT",
      "contents": "SENSORBONE.ELBOW_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.ELBOW_RIGHT = 9"
    },
    {
      "trigger": "SENSORBONE.KNEE_RIGHT",
      "contents": "SENSORBONE.KNEE_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.KNEE_RIGHT = 17"
    },
    {
      "trigger": "SENSORBONE.WRIST_RIGHT",
      "contents": "SENSORBONE.WRIST_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.WRIST_RIGHT = 10"
    },
    {
      "trigger": "SENSORBONE.ANKLE_LEFT",
      "contents": "SENSORBONE.ANKLE_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.ANKLE_LEFT = 14"
    },
    {
      "trigger": "SENSORBONE.FOOT_LEFT",
      "contents": "SENSORBONE.FOOT_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.FOOT_LEFT = 15"
    },
    {
      "trigger": "SENSORBONE.WRIST_LEFT",
      "contents": "SENSORBONE.WRIST_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.WRIST_LEFT = 6"
    },
    {
      "trigger": "SENSORBONE.FOOT_RIGHT",
      "contents": "SENSORBONE.FOOT_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.FOOT_RIGHT = 19"
    },
    {
      "trigger": "SENSORBONE.HAND_RIGHT",
      "contents": "SENSORBONE.HAND_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HAND_RIGHT = 11"
    },
    {
      "trigger": "SENSORBONE.SHOULDER",
      "contents": "SENSORBONE.SHOULDER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.SHOULDER = 2"
    },
    {
      "trigger": "SENSORBONE.HIP_LEFT",
      "contents": "SENSORBONE.HIP_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HIP_LEFT = 12"
    },
    {
      "trigger": "SENSORBONE.HIP_RIGHT",
      "contents": "SENSORBONE.HIP_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HIP_RIGHT = 16"
    },
    {
      "trigger": "SENSORBONE.HAND_LEFT",
      "contents": "SENSORBONE.HAND_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HAND_LEFT = 7"
    },
    {
      "trigger": "SENSORBONE.ANKLE_RIGHT",
      "contents": "SENSORBONE.ANKLE_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.ANKLE_RIGHT = 18"
    },
    {
      "trigger": "SENSORBONE.SPINE",
      "contents": "SENSORBONE.SPINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.SPINE = 1"
    },
    {
      "trigger": "SENSORBONE.ELBOW_LEFT",
      "contents": "SENSORBONE.ELBOW_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.ELBOW_LEFT = 5"
    },
    {
      "trigger": "SENSORBONE.KNEE_LEFT",
      "contents": "SENSORBONE.KNEE_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.KNEE_LEFT = 13"
    },
    {
      "trigger": "SENSORBONE.HEAD",
      "contents": "SENSORBONE.HEAD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SENSORBONE.HEAD = 3"
    },
    {
      "trigger": "SF_CITIZEN_AMMORESUPPLIER",
      "contents": "SF_CITIZEN_AMMORESUPPLIER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_AMMORESUPPLIER = 524288"
    },
    {
      "trigger": "SF_CITIZEN_FOLLOW",
      "contents": "SF_CITIZEN_FOLLOW",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_FOLLOW = 65536"
    },
    {
      "trigger": "SF_CITIZEN_IGNORE_SEMAPHORE",
      "contents": "SF_CITIZEN_IGNORE_SEMAPHORE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_IGNORE_SEMAPHORE = 2097152"
    },
    {
      "trigger": "SF_CITIZEN_MEDIC",
      "contents": "SF_CITIZEN_MEDIC",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_MEDIC = 131072"
    },
    {
      "trigger": "SF_CITIZEN_NOT_COMMANDABLE",
      "contents": "SF_CITIZEN_NOT_COMMANDABLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_NOT_COMMANDABLE = 1048576"
    },
    {
      "trigger": "SF_CITIZEN_RANDOM_HEAD",
      "contents": "SF_CITIZEN_RANDOM_HEAD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_RANDOM_HEAD = 262144"
    },
    {
      "trigger": "SF_CITIZEN_RANDOM_HEAD_FEMALE",
      "contents": "SF_CITIZEN_RANDOM_HEAD_FEMALE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_RANDOM_HEAD_FEMALE = 8388608"
    },
    {
      "trigger": "SF_CITIZEN_RANDOM_HEAD_MALE",
      "contents": "SF_CITIZEN_RANDOM_HEAD_MALE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_RANDOM_HEAD_MALE = 4194304"
    },
    {
      "trigger": "SF_CITIZEN_USE_RENDER_BOUNDS",
      "contents": "SF_CITIZEN_USE_RENDER_BOUNDS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_CITIZEN_USE_RENDER_BOUNDS = 16777216"
    },
    {
      "trigger": "SF_FLOOR_TURRET_CITIZEN",
      "contents": "SF_FLOOR_TURRET_CITIZEN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_FLOOR_TURRET_CITIZEN = 512"
    },
    {
      "trigger": "SF_NPC_ALTCOLLISION",
      "contents": "SF_NPC_ALTCOLLISION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_ALTCOLLISION = 4096"
    },
    {
      "trigger": "SF_NPC_ALWAYSTHINK",
      "contents": "SF_NPC_ALWAYSTHINK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_ALWAYSTHINK = 1024"
    },
    {
      "trigger": "SF_NPC_DROP_HEALTHKIT",
      "contents": "SF_NPC_DROP_HEALTHKIT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_DROP_HEALTHKIT = 8"
    },
    {
      "trigger": "SF_NPC_FADE_CORPSE",
      "contents": "SF_NPC_FADE_CORPSE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_FADE_CORPSE = 512"
    },
    {
      "trigger": "SF_NPC_FALL_TO_GROUND",
      "contents": "SF_NPC_FALL_TO_GROUND",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_FALL_TO_GROUND = 4"
    },
    {
      "trigger": "SF_NPC_GAG",
      "contents": "SF_NPC_GAG",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_GAG = 2"
    },
    {
      "trigger": "SF_NPC_LONG_RANGE",
      "contents": "SF_NPC_LONG_RANGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_LONG_RANGE = 256"
    },
    {
      "trigger": "SF_NPC_NO_PLAYER_PUSHAWAY",
      "contents": "SF_NPC_NO_PLAYER_PUSHAWAY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_NO_PLAYER_PUSHAWAY = 16384"
    },
    {
      "trigger": "SF_NPC_NO_WEAPON_DROP",
      "contents": "SF_NPC_NO_WEAPON_DROP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_NO_WEAPON_DROP = 8192"
    },
    {
      "trigger": "SF_NPC_START_EFFICIENT",
      "contents": "SF_NPC_START_EFFICIENT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_START_EFFICIENT = 16"
    },
    {
      "trigger": "SF_NPC_TEMPLATE",
      "contents": "SF_NPC_TEMPLATE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_TEMPLATE = 2048"
    },
    {
      "trigger": "SF_NPC_WAIT_FOR_SCRIPT",
      "contents": "SF_NPC_WAIT_FOR_SCRIPT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_WAIT_FOR_SCRIPT = 128"
    },
    {
      "trigger": "SF_NPC_WAIT_TILL_SEEN",
      "contents": "SF_NPC_WAIT_TILL_SEEN",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_NPC_WAIT_TILL_SEEN = 1"
    },
    {
      "trigger": "SF_PHYSBOX_MOTIONDISABLED",
      "contents": "SF_PHYSBOX_MOTIONDISABLED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSBOX_MOTIONDISABLED = 32768"
    },
    {
      "trigger": "SF_PHYSBOX_ALWAYS_PICK_UP",
      "contents": "SF_PHYSBOX_ALWAYS_PICK_UP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSBOX_ALWAYS_PICK_UP = 1048576"
    },
    {
      "trigger": "SF_PHYSBOX_NEVER_PICK_UP",
      "contents": "SF_PHYSBOX_NEVER_PICK_UP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSBOX_NEVER_PICK_UP = 2097152"
    },
    {
      "trigger": "SF_PHYSBOX_NEVER_PUNT",
      "contents": "SF_PHYSBOX_NEVER_PUNT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSBOX_NEVER_PUNT = 4194304"
    },
    {
      "trigger": "SF_PHYSPROP_MOTIONDISABLED",
      "contents": "SF_PHYSPROP_MOTIONDISABLED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSPROP_MOTIONDISABLED = 8"
    },
    {
      "trigger": "SF_PHYSPROP_PREVENT_PICKUP",
      "contents": "SF_PHYSPROP_PREVENT_PICKUP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSPROP_PREVENT_PICKUP = 512"
    },
    {
      "trigger": "SF_PHYSPROP_IS_GIB",
      "contents": "SF_PHYSPROP_IS_GIB",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_PHYSPROP_IS_GIB = 4194304"
    },
    {
      "trigger": "SF_ROLLERMINE_FRIENDLY",
      "contents": "SF_ROLLERMINE_FRIENDLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_ROLLERMINE_FRIENDLY = 65536"
    },
    {
      "trigger": "SF_WEAPON_START_CONSTRAINED",
      "contents": "SF_WEAPON_START_CONSTRAINED",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_WEAPON_START_CONSTRAINED = 1"
    },
    {
      "trigger": "SF_WEAPON_NO_PLAYER_PICKUP",
      "contents": "SF_WEAPON_NO_PLAYER_PICKUP",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_WEAPON_NO_PLAYER_PICKUP = 2"
    },
    {
      "trigger": "SF_WEAPON_NO_PHYSCANNON_PUNT",
      "contents": "SF_WEAPON_NO_PHYSCANNON_PUNT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SF_WEAPON_NO_PHYSCANNON_PUNT = 4"
    },
    {
      "trigger": "SIGNONSTATE_NONE",
      "contents": "SIGNONSTATE_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_NONE = 0"
    },
    {
      "trigger": "SIGNONSTATE_CHALLENGE",
      "contents": "SIGNONSTATE_CHALLENGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_CHALLENGE = 1"
    },
    {
      "trigger": "SIGNONSTATE_CONNECTED",
      "contents": "SIGNONSTATE_CONNECTED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_CONNECTED = 2"
    },
    {
      "trigger": "SIGNONSTATE_NEW",
      "contents": "SIGNONSTATE_NEW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_NEW = 3"
    },
    {
      "trigger": "SIGNONSTATE_PRESPAWN",
      "contents": "SIGNONSTATE_PRESPAWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_PRESPAWN = 4"
    },
    {
      "trigger": "SIGNONSTATE_SPAWN",
      "contents": "SIGNONSTATE_SPAWN",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_SPAWN = 5"
    },
    {
      "trigger": "SIGNONSTATE_FULL",
      "contents": "SIGNONSTATE_FULL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_FULL = 6"
    },
    {
      "trigger": "SIGNONSTATE_CHANGELEVEL",
      "contents": "SIGNONSTATE_CHANGELEVEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIGNONSTATE_CHANGELEVEL = 7"
    },
    {
      "trigger": "SIM_NOTHING",
      "contents": "SIM_NOTHING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIM_NOTHING = 0"
    },
    {
      "trigger": "SIM_LOCAL_ACCELERATION",
      "contents": "SIM_LOCAL_ACCELERATION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIM_LOCAL_ACCELERATION = 1"
    },
    {
      "trigger": "SIM_LOCAL_FORCE",
      "contents": "SIM_LOCAL_FORCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIM_LOCAL_FORCE = 2"
    },
    {
      "trigger": "SIM_GLOBAL_ACCELERATION",
      "contents": "SIM_GLOBAL_ACCELERATION",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIM_GLOBAL_ACCELERATION = 3"
    },
    {
      "trigger": "SIM_GLOBAL_FORCE",
      "contents": "SIM_GLOBAL_FORCE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SIM_GLOBAL_FORCE = 4"
    },
    {
      "trigger": "SND_NOFLAGS",
      "contents": "SND_NOFLAGS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_NOFLAGS = 0"
    },
    {
      "trigger": "SND_CHANGE_VOL",
      "contents": "SND_CHANGE_VOL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_CHANGE_VOL = 1"
    },
    {
      "trigger": "SND_CHANGE_PITCH",
      "contents": "SND_CHANGE_PITCH",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_CHANGE_PITCH = 2"
    },
    {
      "trigger": "SND_STOP",
      "contents": "SND_STOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_STOP = 4"
    },
    {
      "trigger": "SND_SPAWNING",
      "contents": "SND_SPAWNING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_SPAWNING = 8"
    },
    {
      "trigger": "SND_DELAY",
      "contents": "SND_DELAY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_DELAY = 16"
    },
    {
      "trigger": "SND_STOP_LOOPING",
      "contents": "SND_STOP_LOOPING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_STOP_LOOPING = 32"
    },
    {
      "trigger": "SND_SHOULDPAUSE",
      "contents": "SND_SHOULDPAUSE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_SHOULDPAUSE = 128"
    },
    {
      "trigger": "SND_IGNORE_PHONEMES",
      "contents": "SND_IGNORE_PHONEMES",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_IGNORE_PHONEMES = 256"
    },
    {
      "trigger": "SND_IGNORE_NAME",
      "contents": "SND_IGNORE_NAME",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_IGNORE_NAME = 512"
    },
    {
      "trigger": "SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL",
      "contents": "SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL = 1024"
    },
    {
      "trigger": "SNDLVL_NONE",
      "contents": "SNDLVL_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_NONE = 0"
    },
    {
      "trigger": "SNDLVL_20dB",
      "contents": "SNDLVL_20dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_20dB = 20"
    },
    {
      "trigger": "SNDLVL_25dB",
      "contents": "SNDLVL_25dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_25dB = 25"
    },
    {
      "trigger": "SNDLVL_30dB",
      "contents": "SNDLVL_30dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_30dB = 30"
    },
    {
      "trigger": "SNDLVL_35dB",
      "contents": "SNDLVL_35dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_35dB = 35"
    },
    {
      "trigger": "SNDLVL_40dB",
      "contents": "SNDLVL_40dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_40dB = 40"
    },
    {
      "trigger": "SNDLVL_45dB",
      "contents": "SNDLVL_45dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_45dB = 45"
    },
    {
      "trigger": "SNDLVL_50dB",
      "contents": "SNDLVL_50dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_50dB = 50"
    },
    {
      "trigger": "SNDLVL_55dB",
      "contents": "SNDLVL_55dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_55dB = 55"
    },
    {
      "trigger": "SNDLVL_60dB",
      "contents": "SNDLVL_60dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_60dB = 60"
    },
    {
      "trigger": "SNDLVL_IDLE",
      "contents": "SNDLVL_IDLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_IDLE = 60"
    },
    {
      "trigger": "SNDLVL_65dB",
      "contents": "SNDLVL_65dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_65dB = 65"
    },
    {
      "trigger": "SNDLVL_STATIC",
      "contents": "SNDLVL_STATIC",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_STATIC = 66"
    },
    {
      "trigger": "SNDLVL_70dB",
      "contents": "SNDLVL_70dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_70dB = 70"
    },
    {
      "trigger": "SNDLVL_75dB",
      "contents": "SNDLVL_75dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_75dB = 75"
    },
    {
      "trigger": "SNDLVL_NORM",
      "contents": "SNDLVL_NORM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_NORM = 75"
    },
    {
      "trigger": "SNDLVL_80dB",
      "contents": "SNDLVL_80dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_80dB = 80"
    },
    {
      "trigger": "SNDLVL_TALKING",
      "contents": "SNDLVL_TALKING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_TALKING = 80"
    },
    {
      "trigger": "SNDLVL_85dB",
      "contents": "SNDLVL_85dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_85dB = 85"
    },
    {
      "trigger": "SNDLVL_90dB",
      "contents": "SNDLVL_90dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_90dB = 90"
    },
    {
      "trigger": "SNDLVL_95dB",
      "contents": "SNDLVL_95dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_95dB = 95"
    },
    {
      "trigger": "SNDLVL_100dB",
      "contents": "SNDLVL_100dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_100dB = 100"
    },
    {
      "trigger": "SNDLVL_105dB",
      "contents": "SNDLVL_105dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_105dB = 105"
    },
    {
      "trigger": "SNDLVL_110dB",
      "contents": "SNDLVL_110dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_110dB = 110"
    },
    {
      "trigger": "SNDLVL_120dB",
      "contents": "SNDLVL_120dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_120dB = 120"
    },
    {
      "trigger": "SNDLVL_130dB",
      "contents": "SNDLVL_130dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_130dB = 130"
    },
    {
      "trigger": "SNDLVL_140dB",
      "contents": "SNDLVL_140dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_140dB = 140"
    },
    {
      "trigger": "SNDLVL_GUNFIRE",
      "contents": "SNDLVL_GUNFIRE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_GUNFIRE = 140"
    },
    {
      "trigger": "SNDLVL_150dB",
      "contents": "SNDLVL_150dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_150dB = 150"
    },
    {
      "trigger": "SNDLVL_180dB",
      "contents": "SNDLVL_180dB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SNDLVL_180dB = 180"
    },
    {
      "trigger": "SOLID_NONE",
      "contents": "SOLID_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_NONE = 0"
    },
    {
      "trigger": "SOLID_BSP",
      "contents": "SOLID_BSP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_BSP = 1"
    },
    {
      "trigger": "SOLID_BBOX",
      "contents": "SOLID_BBOX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_BBOX = 2"
    },
    {
      "trigger": "SOLID_OBB",
      "contents": "SOLID_OBB",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_OBB = 3"
    },
    {
      "trigger": "SOLID_OBB_YAW",
      "contents": "SOLID_OBB_YAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_OBB_YAW = 4"
    },
    {
      "trigger": "SOLID_CUSTOM",
      "contents": "SOLID_CUSTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_CUSTOM = 5"
    },
    {
      "trigger": "SOLID_VPHYSICS",
      "contents": "SOLID_VPHYSICS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOLID_VPHYSICS = 6"
    },
    {
      "trigger": "SOUND_NONE",
      "contents": "SOUND_NONE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_NONE = 0"
    },
    {
      "trigger": "SOUND_COMBAT",
      "contents": "SOUND_COMBAT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_COMBAT = 1"
    },
    {
      "trigger": "SOUND_WORLD",
      "contents": "SOUND_WORLD",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_WORLD = 2"
    },
    {
      "trigger": "SOUND_PLAYER",
      "contents": "SOUND_PLAYER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_PLAYER = 4"
    },
    {
      "trigger": "SOUND_DANGER",
      "contents": "SOUND_DANGER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_DANGER = 8"
    },
    {
      "trigger": "SOUND_BULLET_IMPACT",
      "contents": "SOUND_BULLET_IMPACT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_BULLET_IMPACT = 16"
    },
    {
      "trigger": "SOUND_CARCASS",
      "contents": "SOUND_CARCASS",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CARCASS = 32"
    },
    {
      "trigger": "SOUND_MEAT",
      "contents": "SOUND_MEAT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_MEAT = 64"
    },
    {
      "trigger": "SOUND_GARBAGE",
      "contents": "SOUND_GARBAGE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_GARBAGE = 128"
    },
    {
      "trigger": "SOUND_THUMPER",
      "contents": "SOUND_THUMPER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_THUMPER = 256"
    },
    {
      "trigger": "SOUND_BUGBAIT",
      "contents": "SOUND_BUGBAIT",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_BUGBAIT = 512"
    },
    {
      "trigger": "SOUND_PHYSICS_DANGER",
      "contents": "SOUND_PHYSICS_DANGER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_PHYSICS_DANGER = 1024"
    },
    {
      "trigger": "SOUND_DANGER_SNIPERONLY",
      "contents": "SOUND_DANGER_SNIPERONLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_DANGER_SNIPERONLY = 2048"
    },
    {
      "trigger": "SOUND_MOVE_AWAY",
      "contents": "SOUND_MOVE_AWAY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_MOVE_AWAY = 4096"
    },
    {
      "trigger": "SOUND_PLAYER_VEHICLE",
      "contents": "SOUND_PLAYER_VEHICLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_PLAYER_VEHICLE = 8192"
    },
    {
      "trigger": "SOUND_READINESS_LOW",
      "contents": "SOUND_READINESS_LOW",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_READINESS_LOW = 16384"
    },
    {
      "trigger": "SOUND_READINESS_MEDIUM",
      "contents": "SOUND_READINESS_MEDIUM",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_READINESS_MEDIUM = 32768"
    },
    {
      "trigger": "SOUND_READINESS_HIGH",
      "contents": "SOUND_READINESS_HIGH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_READINESS_HIGH = 65536"
    },
    {
      "trigger": "SOUND_CONTEXT_FROM_SNIPER",
      "contents": "SOUND_CONTEXT_FROM_SNIPER",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_FROM_SNIPER = 1048576"
    },
    {
      "trigger": "SOUND_CONTEXT_GUNFIRE",
      "contents": "SOUND_CONTEXT_GUNFIRE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_GUNFIRE = 2097152"
    },
    {
      "trigger": "SOUND_CONTEXT_MORTAR",
      "contents": "SOUND_CONTEXT_MORTAR",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_MORTAR = 4194304"
    },
    {
      "trigger": "SOUND_CONTEXT_COMBINE_ONLY",
      "contents": "SOUND_CONTEXT_COMBINE_ONLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_COMBINE_ONLY = 8388608"
    },
    {
      "trigger": "SOUND_CONTEXT_REACT_TO_SOURCE",
      "contents": "SOUND_CONTEXT_REACT_TO_SOURCE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_REACT_TO_SOURCE = 16777216"
    },
    {
      "trigger": "SOUND_CONTEXT_EXPLOSION",
      "contents": "SOUND_CONTEXT_EXPLOSION",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_EXPLOSION = 33554432"
    },
    {
      "trigger": "SOUND_CONTEXT_EXCLUDE_COMBINE",
      "contents": "SOUND_CONTEXT_EXCLUDE_COMBINE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_EXCLUDE_COMBINE = 67108864"
    },
    {
      "trigger": "SOUND_CONTEXT_DANGER_APPROACH",
      "contents": "SOUND_CONTEXT_DANGER_APPROACH",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_DANGER_APPROACH = 134217728"
    },
    {
      "trigger": "SOUND_CONTEXT_ALLIES_ONLY",
      "contents": "SOUND_CONTEXT_ALLIES_ONLY",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_ALLIES_ONLY = 268435456"
    },
    {
      "trigger": "SOUND_CONTEXT_PLAYER_VEHICLE",
      "contents": "SOUND_CONTEXT_PLAYER_VEHICLE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SOUND_CONTEXT_PLAYER_VEHICLE = 536870912"
    },
    {
      "trigger": "STENCIL_NEVER",
      "contents": "STENCIL_NEVER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_NEVER = 1"
    },
    {
      "trigger": "STENCIL_LESS",
      "contents": "STENCIL_LESS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_LESS = 2"
    },
    {
      "trigger": "STENCIL_EQUAL",
      "contents": "STENCIL_EQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_EQUAL = 3"
    },
    {
      "trigger": "STENCIL_LESSEQUAL",
      "contents": "STENCIL_LESSEQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_LESSEQUAL = 4"
    },
    {
      "trigger": "STENCIL_GREATER",
      "contents": "STENCIL_GREATER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_GREATER = 5"
    },
    {
      "trigger": "STENCIL_NOTEQUAL",
      "contents": "STENCIL_NOTEQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_NOTEQUAL = 6"
    },
    {
      "trigger": "STENCIL_GREATEREQUAL",
      "contents": "STENCIL_GREATEREQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_GREATEREQUAL = 7"
    },
    {
      "trigger": "STENCIL_ALWAYS",
      "contents": "STENCIL_ALWAYS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_ALWAYS = 8"
    },
    {
      "trigger": "STENCIL_KEEP",
      "contents": "STENCIL_KEEP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_KEEP = 1"
    },
    {
      "trigger": "STENCIL_ZERO",
      "contents": "STENCIL_ZERO",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_ZERO = 2"
    },
    {
      "trigger": "STENCIL_REPLACE",
      "contents": "STENCIL_REPLACE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_REPLACE = 3"
    },
    {
      "trigger": "STENCIL_INCRSAT",
      "contents": "STENCIL_INCRSAT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_INCRSAT = 4"
    },
    {
      "trigger": "STENCIL_DECRSAT",
      "contents": "STENCIL_DECRSAT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_DECRSAT = 5"
    },
    {
      "trigger": "STENCIL_INVERT",
      "contents": "STENCIL_INVERT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_INVERT = 6"
    },
    {
      "trigger": "STENCIL_INCR",
      "contents": "STENCIL_INCR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_INCR = 7"
    },
    {
      "trigger": "STENCIL_DECR",
      "contents": "STENCIL_DECR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCIL_DECR = 8"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_NEVER",
      "contents": "STENCILCOMPARISONFUNCTION_NEVER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_NEVER = 1"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_LESS",
      "contents": "STENCILCOMPARISONFUNCTION_LESS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_LESS = 2"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_EQUAL",
      "contents": "STENCILCOMPARISONFUNCTION_EQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_EQUAL = 3"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_LESSEQUAL",
      "contents": "STENCILCOMPARISONFUNCTION_LESSEQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_LESSEQUAL = 4"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_GREATER",
      "contents": "STENCILCOMPARISONFUNCTION_GREATER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_GREATER = 5"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_NOTEQUAL",
      "contents": "STENCILCOMPARISONFUNCTION_NOTEQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_NOTEQUAL = 6"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_GREATEREQUAL",
      "contents": "STENCILCOMPARISONFUNCTION_GREATEREQUAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_GREATEREQUAL = 7"
    },
    {
      "trigger": "STENCILCOMPARISONFUNCTION_ALWAYS",
      "contents": "STENCILCOMPARISONFUNCTION_ALWAYS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILCOMPARISONFUNCTION_ALWAYS = 8"
    },
    {
      "trigger": "STENCILOPERATION_KEEP",
      "contents": "STENCILOPERATION_KEEP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_KEEP = 1"
    },
    {
      "trigger": "STENCILOPERATION_ZERO",
      "contents": "STENCILOPERATION_ZERO",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_ZERO = 2"
    },
    {
      "trigger": "STENCILOPERATION_REPLACE",
      "contents": "STENCILOPERATION_REPLACE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_REPLACE = 3"
    },
    {
      "trigger": "STENCILOPERATION_INCRSAT",
      "contents": "STENCILOPERATION_INCRSAT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_INCRSAT = 4"
    },
    {
      "trigger": "STENCILOPERATION_DECRSAT",
      "contents": "STENCILOPERATION_DECRSAT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_DECRSAT = 5"
    },
    {
      "trigger": "STENCILOPERATION_INVERT",
      "contents": "STENCILOPERATION_INVERT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_INVERT = 6"
    },
    {
      "trigger": "STENCILOPERATION_INCR",
      "contents": "STENCILOPERATION_INCR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_INCR = 7"
    },
    {
      "trigger": "STENCILOPERATION_DECR",
      "contents": "STENCILOPERATION_DECR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STENCILOPERATION_DECR = 8"
    },
    {
      "trigger": "STEPSOUNDTIME_NORMAL",
      "contents": "STEPSOUNDTIME_NORMAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STEPSOUNDTIME_NORMAL = 0"
    },
    {
      "trigger": "STEPSOUNDTIME_ON_LADDER",
      "contents": "STEPSOUNDTIME_ON_LADDER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STEPSOUNDTIME_ON_LADDER = 1"
    },
    {
      "trigger": "STEPSOUNDTIME_WATER_KNEE",
      "contents": "STEPSOUNDTIME_WATER_KNEE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STEPSOUNDTIME_WATER_KNEE = 2"
    },
    {
      "trigger": "STEPSOUNDTIME_WATER_FOOT",
      "contents": "STEPSOUNDTIME_WATER_FOOT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STEPSOUNDTIME_WATER_FOOT = 3"
    },
    {
      "trigger": "STUDIO_RENDER",
      "contents": "STUDIO_RENDER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_RENDER = 1"
    },
    {
      "trigger": "STUDIO_VIEWXFORMATTACHMENTS",
      "contents": "STUDIO_VIEWXFORMATTACHMENTS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_VIEWXFORMATTACHMENTS = 2"
    },
    {
      "trigger": "STUDIO_DRAWTRANSLUCENTSUBMODELS",
      "contents": "STUDIO_DRAWTRANSLUCENTSUBMODELS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_DRAWTRANSLUCENTSUBMODELS = 4"
    },
    {
      "trigger": "STUDIO_TWOPASS",
      "contents": "STUDIO_TWOPASS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_TWOPASS = 8"
    },
    {
      "trigger": "STUDIO_STATIC_LIGHTING",
      "contents": "STUDIO_STATIC_LIGHTING",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_STATIC_LIGHTING = 16"
    },
    {
      "trigger": "STUDIO_WIREFRAME",
      "contents": "STUDIO_WIREFRAME",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_WIREFRAME = 32"
    },
    {
      "trigger": "STUDIO_ITEM_BLINK",
      "contents": "STUDIO_ITEM_BLINK",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_ITEM_BLINK = 64"
    },
    {
      "trigger": "STUDIO_NOSHADOWS",
      "contents": "STUDIO_NOSHADOWS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_NOSHADOWS = 128"
    },
    {
      "trigger": "STUDIO_WIREFRAME_VCOLLIDE",
      "contents": "STUDIO_WIREFRAME_VCOLLIDE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_WIREFRAME_VCOLLIDE = 256"
    },
    {
      "trigger": "STUDIO_GENERATE_STATS",
      "contents": "STUDIO_GENERATE_STATS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_GENERATE_STATS = 16777216"
    },
    {
      "trigger": "STUDIO_SSAODEPTHTEXTURE",
      "contents": "STUDIO_SSAODEPTHTEXTURE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_SSAODEPTHTEXTURE = 134217728"
    },
    {
      "trigger": "STUDIO_SHADOWDEPTHTEXTURE",
      "contents": "STUDIO_SHADOWDEPTHTEXTURE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_SHADOWDEPTHTEXTURE = 1073741824"
    },
    {
      "trigger": "STUDIO_TRANSPARENCY",
      "contents": "STUDIO_TRANSPARENCY",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "STUDIO_TRANSPARENCY = 2147483648"
    },
    {
      "trigger": "SURF_LIGHT",
      "contents": "SURF_LIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_LIGHT = 1"
    },
    {
      "trigger": "SURF_SKY2D",
      "contents": "SURF_SKY2D",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_SKY2D = 2"
    },
    {
      "trigger": "SURF_SKY",
      "contents": "SURF_SKY",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_SKY = 4"
    },
    {
      "trigger": "SURF_WARP",
      "contents": "SURF_WARP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_WARP = 8"
    },
    {
      "trigger": "SURF_TRANS",
      "contents": "SURF_TRANS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_TRANS = 16"
    },
    {
      "trigger": "SURF_NOPORTAL",
      "contents": "SURF_NOPORTAL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NOPORTAL = 32"
    },
    {
      "trigger": "SURF_TRIGGER",
      "contents": "SURF_TRIGGER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_TRIGGER = 64"
    },
    {
      "trigger": "SURF_NODRAW",
      "contents": "SURF_NODRAW",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NODRAW = 128"
    },
    {
      "trigger": "SURF_HINT",
      "contents": "SURF_HINT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_HINT = 256"
    },
    {
      "trigger": "SURF_SKIP",
      "contents": "SURF_SKIP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_SKIP = 512"
    },
    {
      "trigger": "SURF_NOLIGHT",
      "contents": "SURF_NOLIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NOLIGHT = 1024"
    },
    {
      "trigger": "SURF_BUMPLIGHT",
      "contents": "SURF_BUMPLIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_BUMPLIGHT = 2048"
    },
    {
      "trigger": "SURF_NOSHADOWS",
      "contents": "SURF_NOSHADOWS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NOSHADOWS = 4096"
    },
    {
      "trigger": "SURF_NODECALS",
      "contents": "SURF_NODECALS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NODECALS = 8192"
    },
    {
      "trigger": "SURF_NOCHOP",
      "contents": "SURF_NOCHOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_NOCHOP = 16384"
    },
    {
      "trigger": "SURF_HITBOX",
      "contents": "SURF_HITBOX",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "SURF_HITBOX = 32768"
    },
    {
      "trigger": "TASKSTATUS_NEW",
      "contents": "TASKSTATUS_NEW",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TASKSTATUS_NEW = 0"
    },
    {
      "trigger": "TASKSTATUS_RUN_MOVE_AND_TASK",
      "contents": "TASKSTATUS_RUN_MOVE_AND_TASK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TASKSTATUS_RUN_MOVE_AND_TASK = 1"
    },
    {
      "trigger": "TASKSTATUS_RUN_MOVE",
      "contents": "TASKSTATUS_RUN_MOVE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TASKSTATUS_RUN_MOVE = 2"
    },
    {
      "trigger": "TASKSTATUS_RUN_TASK",
      "contents": "TASKSTATUS_RUN_TASK",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TASKSTATUS_RUN_TASK = 3"
    },
    {
      "trigger": "TASKSTATUS_COMPLETE",
      "contents": "TASKSTATUS_COMPLETE",
      "annotation": "Server",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TASKSTATUS_COMPLETE = 4"
    },
    {
      "trigger": "TEAM_CONNECTING",
      "contents": "TEAM_CONNECTING",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEAM_CONNECTING = 0"
    },
    {
      "trigger": "TEAM_UNASSIGNED",
      "contents": "TEAM_UNASSIGNED",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEAM_UNASSIGNED = 1001"
    },
    {
      "trigger": "TEAM_SPECTATOR",
      "contents": "TEAM_SPECTATOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEAM_SPECTATOR = 1002"
    },
    {
      "trigger": "TEXFILTER.NONE",
      "contents": "TEXFILTER.NONE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXFILTER.NONE = 0"
    },
    {
      "trigger": "TEXFILTER.POINT",
      "contents": "TEXFILTER.POINT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXFILTER.POINT = 1"
    },
    {
      "trigger": "TEXFILTER.LINEAR",
      "contents": "TEXFILTER.LINEAR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXFILTER.LINEAR = 2"
    },
    {
      "trigger": "TEXFILTER.ANISOTROPIC",
      "contents": "TEXFILTER.ANISOTROPIC",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXFILTER.ANISOTROPIC = 3"
    },
    {
      "trigger": "TEXT_ALIGN_LEFT",
      "contents": "TEXT_ALIGN_LEFT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_ALIGN_LEFT = 0"
    },
    {
      "trigger": "TEXT_ALIGN_CENTER",
      "contents": "TEXT_ALIGN_CENTER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_ALIGN_CENTER = 1"
    },
    {
      "trigger": "TEXT_ALIGN_RIGHT",
      "contents": "TEXT_ALIGN_RIGHT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_ALIGN_RIGHT = 2"
    },
    {
      "trigger": "TEXT_ALIGN_TOP",
      "contents": "TEXT_ALIGN_TOP",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_ALIGN_TOP = 3"
    },
    {
      "trigger": "TEXT_ALIGN_BOTTOM",
      "contents": "TEXT_ALIGN_BOTTOM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_ALIGN_BOTTOM = 4"
    },
    {
      "trigger": "TEXT_FILTER_UNKNOWN",
      "contents": "TEXT_FILTER_UNKNOWN",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_FILTER_UNKNOWN = 0"
    },
    {
      "trigger": "TEXT_FILTER_GAME_CONTENT",
      "contents": "TEXT_FILTER_GAME_CONTENT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_FILTER_GAME_CONTENT = 1"
    },
    {
      "trigger": "TEXT_FILTER_CHAT",
      "contents": "TEXT_FILTER_CHAT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_FILTER_CHAT = 2"
    },
    {
      "trigger": "TEXT_FILTER_NAME",
      "contents": "TEXT_FILTER_NAME",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXT_FILTER_NAME = 3"
    },
    {
      "trigger": "TEXTUREFLAGS_POINTSAMPLE",
      "contents": "TEXTUREFLAGS_POINTSAMPLE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_POINTSAMPLE = 1"
    },
    {
      "trigger": "TEXTUREFLAGS_TRILINEAR",
      "contents": "TEXTUREFLAGS_TRILINEAR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_TRILINEAR = 2"
    },
    {
      "trigger": "TEXTUREFLAGS_CLAMPS",
      "contents": "TEXTUREFLAGS_CLAMPS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_CLAMPS = 4"
    },
    {
      "trigger": "TEXTUREFLAGS_CLAMPT",
      "contents": "TEXTUREFLAGS_CLAMPT",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_CLAMPT = 8"
    },
    {
      "trigger": "TEXTUREFLAGS_ANISOTROPIC",
      "contents": "TEXTUREFLAGS_ANISOTROPIC",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_ANISOTROPIC = 16"
    },
    {
      "trigger": "TEXTUREFLAGS_HINT_DXT5",
      "contents": "TEXTUREFLAGS_HINT_DXT5",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_HINT_DXT5 = 32"
    },
    {
      "trigger": "TEXTUREFLAGS_PWL_CORRECTED",
      "contents": "TEXTUREFLAGS_PWL_CORRECTED",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_PWL_CORRECTED = 64"
    },
    {
      "trigger": "TEXTUREFLAGS_NORMAL",
      "contents": "TEXTUREFLAGS_NORMAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_NORMAL = 128"
    },
    {
      "trigger": "TEXTUREFLAGS_NOMIP",
      "contents": "TEXTUREFLAGS_NOMIP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_NOMIP = 256"
    },
    {
      "trigger": "TEXTUREFLAGS_NOLOD",
      "contents": "TEXTUREFLAGS_NOLOD",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_NOLOD = 512"
    },
    {
      "trigger": "TEXTUREFLAGS_ALL_MIPS",
      "contents": "TEXTUREFLAGS_ALL_MIPS",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_ALL_MIPS = 1024"
    },
    {
      "trigger": "TEXTUREFLAGS_PROCEDURAL",
      "contents": "TEXTUREFLAGS_PROCEDURAL",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_PROCEDURAL = 2048"
    },
    {
      "trigger": "TEXTUREFLAGS_ONEBITALPHA",
      "contents": "TEXTUREFLAGS_ONEBITALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_ONEBITALPHA = 4096"
    },
    {
      "trigger": "TEXTUREFLAGS_EIGHTBITALPHA",
      "contents": "TEXTUREFLAGS_EIGHTBITALPHA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_EIGHTBITALPHA = 8192"
    },
    {
      "trigger": "TEXTUREFLAGS_ENVMAP",
      "contents": "TEXTUREFLAGS_ENVMAP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_ENVMAP = 16384"
    },
    {
      "trigger": "TEXTUREFLAGS_RENDERTARGET",
      "contents": "TEXTUREFLAGS_RENDERTARGET",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_RENDERTARGET = 32768"
    },
    {
      "trigger": "TEXTUREFLAGS_DEPTHRENDERTARGET",
      "contents": "TEXTUREFLAGS_DEPTHRENDERTARGET",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_DEPTHRENDERTARGET = 65536"
    },
    {
      "trigger": "TEXTUREFLAGS_NODEBUGOVERRIDE",
      "contents": "TEXTUREFLAGS_NODEBUGOVERRIDE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_NODEBUGOVERRIDE = 131072"
    },
    {
      "trigger": "TEXTUREFLAGS_SINGLECOPY",
      "contents": "TEXTUREFLAGS_SINGLECOPY",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_SINGLECOPY = 262144"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_00080000",
      "contents": "TEXTUREFLAGS_UNUSED_00080000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_00080000 = 524288"
    },
    {
      "trigger": "TEXTUREFLAGS_IMMEDIATE_CLEANUP",
      "contents": "TEXTUREFLAGS_IMMEDIATE_CLEANUP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_IMMEDIATE_CLEANUP = 1048576"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_00200000",
      "contents": "TEXTUREFLAGS_UNUSED_00200000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_00200000 = 2097152"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_00400000",
      "contents": "TEXTUREFLAGS_UNUSED_00400000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_00400000 = 4194304"
    },
    {
      "trigger": "TEXTUREFLAGS_NODEPTHBUFFER",
      "contents": "TEXTUREFLAGS_NODEPTHBUFFER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_NODEPTHBUFFER = 8388608"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_01000000",
      "contents": "TEXTUREFLAGS_UNUSED_01000000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_01000000 = 16777216"
    },
    {
      "trigger": "TEXTUREFLAGS_CLAMPU",
      "contents": "TEXTUREFLAGS_CLAMPU",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_CLAMPU = 33554432"
    },
    {
      "trigger": "TEXTUREFLAGS_VERTEXTEXTURE",
      "contents": "TEXTUREFLAGS_VERTEXTEXTURE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_VERTEXTEXTURE = 67108864"
    },
    {
      "trigger": "TEXTUREFLAGS_SSBUMP",
      "contents": "TEXTUREFLAGS_SSBUMP",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_SSBUMP = 134217728"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_10000000",
      "contents": "TEXTUREFLAGS_UNUSED_10000000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_10000000 = 268435456"
    },
    {
      "trigger": "TEXTUREFLAGS_BORDER",
      "contents": "TEXTUREFLAGS_BORDER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_BORDER = 536870912"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_40000000",
      "contents": "TEXTUREFLAGS_UNUSED_40000000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_40000000 = 1073741824"
    },
    {
      "trigger": "TEXTUREFLAGS_UNUSED_80000000",
      "contents": "TEXTUREFLAGS_UNUSED_80000000",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TEXTUREFLAGS_UNUSED_80000000 = 2147483648"
    },
    {
      "trigger": "TRACER_NONE",
      "contents": "TRACER_NONE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRACER_NONE = 0"
    },
    {
      "trigger": "TRACER_LINE",
      "contents": "TRACER_LINE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRACER_LINE = 1"
    },
    {
      "trigger": "TRACER_RAIL",
      "contents": "TRACER_RAIL",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRACER_RAIL = 2"
    },
    {
      "trigger": "TRACER_BEAM",
      "contents": "TRACER_BEAM",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRACER_BEAM = 3"
    },
    {
      "trigger": "TRACER_LINE_AND_WHIZ",
      "contents": "TRACER_LINE_AND_WHIZ",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRACER_LINE_AND_WHIZ = 4"
    },
    {
      "trigger": "TRANSMIT_ALWAYS",
      "contents": "TRANSMIT_ALWAYS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRANSMIT_ALWAYS = 0"
    },
    {
      "trigger": "TRANSMIT_NEVER",
      "contents": "TRANSMIT_NEVER",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRANSMIT_NEVER = 1"
    },
    {
      "trigger": "TRANSMIT_PVS",
      "contents": "TRANSMIT_PVS",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TRANSMIT_PVS = 2"
    },
    {
      "trigger": "TYPE_NONE",
      "contents": "TYPE_NONE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_NONE = -1"
    },
    {
      "trigger": "TYPE_INVALID",
      "contents": "TYPE_INVALID",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_INVALID = -1"
    },
    {
      "trigger": "TYPE_NIL",
      "contents": "TYPE_NIL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_NIL = 0"
    },
    {
      "trigger": "TYPE_BOOL",
      "contents": "TYPE_BOOL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_BOOL = 1"
    },
    {
      "trigger": "TYPE_LIGHTUSERDATA",
      "contents": "TYPE_LIGHTUSERDATA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_LIGHTUSERDATA = 2"
    },
    {
      "trigger": "TYPE_NUMBER",
      "contents": "TYPE_NUMBER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_NUMBER = 3"
    },
    {
      "trigger": "TYPE_STRING",
      "contents": "TYPE_STRING",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_STRING = 4"
    },
    {
      "trigger": "TYPE_TABLE",
      "contents": "TYPE_TABLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_TABLE = 5"
    },
    {
      "trigger": "TYPE_FUNCTION",
      "contents": "TYPE_FUNCTION",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_FUNCTION = 6"
    },
    {
      "trigger": "TYPE_USERDATA",
      "contents": "TYPE_USERDATA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_USERDATA = 7"
    },
    {
      "trigger": "TYPE_THREAD",
      "contents": "TYPE_THREAD",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_THREAD = 8"
    },
    {
      "trigger": "TYPE_ENTITY",
      "contents": "TYPE_ENTITY",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_ENTITY = 9"
    },
    {
      "trigger": "TYPE_VECTOR",
      "contents": "TYPE_VECTOR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_VECTOR = 10"
    },
    {
      "trigger": "TYPE_ANGLE",
      "contents": "TYPE_ANGLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_ANGLE = 11"
    },
    {
      "trigger": "TYPE_PHYSOBJ",
      "contents": "TYPE_PHYSOBJ",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PHYSOBJ = 12"
    },
    {
      "trigger": "TYPE_SAVE",
      "contents": "TYPE_SAVE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_SAVE = 13"
    },
    {
      "trigger": "TYPE_RESTORE",
      "contents": "TYPE_RESTORE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_RESTORE = 14"
    },
    {
      "trigger": "TYPE_DAMAGEINFO",
      "contents": "TYPE_DAMAGEINFO",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_DAMAGEINFO = 15"
    },
    {
      "trigger": "TYPE_EFFECTDATA",
      "contents": "TYPE_EFFECTDATA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_EFFECTDATA = 16"
    },
    {
      "trigger": "TYPE_MOVEDATA",
      "contents": "TYPE_MOVEDATA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_MOVEDATA = 17"
    },
    {
      "trigger": "TYPE_RECIPIENTFILTER",
      "contents": "TYPE_RECIPIENTFILTER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_RECIPIENTFILTER = 18"
    },
    {
      "trigger": "TYPE_USERCMD",
      "contents": "TYPE_USERCMD",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_USERCMD = 19"
    },
    {
      "trigger": "TYPE_SCRIPTEDVEHICLE",
      "contents": "TYPE_SCRIPTEDVEHICLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_SCRIPTEDVEHICLE = 20"
    },
    {
      "trigger": "TYPE_MATERIAL",
      "contents": "TYPE_MATERIAL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_MATERIAL = 21"
    },
    {
      "trigger": "TYPE_PANEL",
      "contents": "TYPE_PANEL",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PANEL = 22"
    },
    {
      "trigger": "TYPE_PARTICLE",
      "contents": "TYPE_PARTICLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PARTICLE = 23"
    },
    {
      "trigger": "TYPE_PARTICLEEMITTER",
      "contents": "TYPE_PARTICLEEMITTER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PARTICLEEMITTER = 24"
    },
    {
      "trigger": "TYPE_TEXTURE",
      "contents": "TYPE_TEXTURE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_TEXTURE = 25"
    },
    {
      "trigger": "TYPE_USERMSG",
      "contents": "TYPE_USERMSG",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_USERMSG = 26"
    },
    {
      "trigger": "TYPE_CONVAR",
      "contents": "TYPE_CONVAR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_CONVAR = 27"
    },
    {
      "trigger": "TYPE_IMESH",
      "contents": "TYPE_IMESH",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_IMESH = 28"
    },
    {
      "trigger": "TYPE_MATRIX",
      "contents": "TYPE_MATRIX",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_MATRIX = 29"
    },
    {
      "trigger": "TYPE_SOUND",
      "contents": "TYPE_SOUND",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_SOUND = 30"
    },
    {
      "trigger": "TYPE_PIXELVISHANDLE",
      "contents": "TYPE_PIXELVISHANDLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PIXELVISHANDLE = 31"
    },
    {
      "trigger": "TYPE_DLIGHT",
      "contents": "TYPE_DLIGHT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_DLIGHT = 32"
    },
    {
      "trigger": "TYPE_VIDEO",
      "contents": "TYPE_VIDEO",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_VIDEO = 33"
    },
    {
      "trigger": "TYPE_FILE",
      "contents": "TYPE_FILE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_FILE = 34"
    },
    {
      "trigger": "TYPE_LOCOMOTION",
      "contents": "TYPE_LOCOMOTION",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_LOCOMOTION = 35"
    },
    {
      "trigger": "TYPE_PATH",
      "contents": "TYPE_PATH",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PATH = 36"
    },
    {
      "trigger": "TYPE_NAVAREA",
      "contents": "TYPE_NAVAREA",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_NAVAREA = 37"
    },
    {
      "trigger": "TYPE_SOUNDHANDLE",
      "contents": "TYPE_SOUNDHANDLE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_SOUNDHANDLE = 38"
    },
    {
      "trigger": "TYPE_NAVLADDER",
      "contents": "TYPE_NAVLADDER",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_NAVLADDER = 39"
    },
    {
      "trigger": "TYPE_PARTICLESYSTEM",
      "contents": "TYPE_PARTICLESYSTEM",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PARTICLESYSTEM = 40"
    },
    {
      "trigger": "TYPE_PROJECTEDTEXTURE",
      "contents": "TYPE_PROJECTEDTEXTURE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PROJECTEDTEXTURE = 41"
    },
    {
      "trigger": "TYPE_PHYSCOLLIDE",
      "contents": "TYPE_PHYSCOLLIDE",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_PHYSCOLLIDE = 42"
    },
    {
      "trigger": "TYPE_SURFACEINFO",
      "contents": "TYPE_SURFACEINFO",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_SURFACEINFO = 43"
    },
    {
      "trigger": "TYPE_COUNT",
      "contents": "TYPE_COUNT",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_COUNT = 44"
    },
    {
      "trigger": "TYPE_COLOR",
      "contents": "TYPE_COLOR",
      "annotation": "SharedMenu",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "TYPE_COLOR = 255"
    },
    {
      "trigger": "USE_OFF",
      "contents": "USE_OFF",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "USE_OFF = 0"
    },
    {
      "trigger": "USE_ON",
      "contents": "USE_ON",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "USE_ON = 1"
    },
    {
      "trigger": "USE_SET",
      "contents": "USE_SET",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "USE_SET = 2"
    },
    {
      "trigger": "USE_TOGGLE",
      "contents": "USE_TOGGLE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "USE_TOGGLE = 3"
    },
    {
      "trigger": "VIEW_MAIN",
      "contents": "VIEW_MAIN",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_MAIN = 0"
    },
    {
      "trigger": "VIEW_3DSKY",
      "contents": "VIEW_3DSKY",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_3DSKY = 1"
    },
    {
      "trigger": "VIEW_MONITOR",
      "contents": "VIEW_MONITOR",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_MONITOR = 2"
    },
    {
      "trigger": "VIEW_REFLECTION",
      "contents": "VIEW_REFLECTION",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_REFLECTION = 3"
    },
    {
      "trigger": "VIEW_REFRACTION",
      "contents": "VIEW_REFRACTION",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_REFRACTION = 4"
    },
    {
      "trigger": "VIEW_INTRO_PLAYER",
      "contents": "VIEW_INTRO_PLAYER",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_INTRO_PLAYER = 5"
    },
    {
      "trigger": "VIEW_INTRO_CAMERA",
      "contents": "VIEW_INTRO_CAMERA",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_INTRO_CAMERA = 6"
    },
    {
      "trigger": "VIEW_SHADOW_DEPTH_TEXTURE",
      "contents": "VIEW_SHADOW_DEPTH_TEXTURE",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_SHADOW_DEPTH_TEXTURE = 7"
    },
    {
      "trigger": "VIEW_SSAO",
      "contents": "VIEW_SSAO",
      "annotation": "Client",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "VIEW_SSAO = 8"
    },
    {
      "trigger": "WEAPON_PROFICIENCY_POOR",
      "contents": "WEAPON_PROFICIENCY_POOR",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEAPON_PROFICIENCY_POOR = 0"
    },
    {
      "trigger": "WEAPON_PROFICIENCY_AVERAGE",
      "contents": "WEAPON_PROFICIENCY_AVERAGE",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEAPON_PROFICIENCY_AVERAGE = 1"
    },
    {
      "trigger": "WEAPON_PROFICIENCY_GOOD",
      "contents": "WEAPON_PROFICIENCY_GOOD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEAPON_PROFICIENCY_GOOD = 2"
    },
    {
      "trigger": "WEAPON_PROFICIENCY_VERY_GOOD",
      "contents": "WEAPON_PROFICIENCY_VERY_GOOD",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEAPON_PROFICIENCY_VERY_GOOD = 3"
    },
    {
      "trigger": "WEAPON_PROFICIENCY_PERFECT",
      "contents": "WEAPON_PROFICIENCY_PERFECT",
      "annotation": "Shared",
      "kind": [
        "variable",
        "E",
        "Enum"
      ],
      "details": "WEAPON_PROFICIENCY_PERFECT = 4"
    }
  ]
}